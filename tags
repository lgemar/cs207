!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Acceleration	Examples/Metrics.hpp	/^typedef Unit<0, 1, -2, double>  Acceleration;$/;"	t	namespace:Metrics
Acceleration3	Examples/Metrics.hpp	/^typedef Unit<0, 1, -2, Point>   Acceleration3;$/;"	t	namespace:Metrics
CS207	CS207/Color.hpp	/^namespace CS207 {$/;"	n
CS207	CS207/GLCamera.hpp	/^namespace CS207 {$/;"	n
CS207	CS207/SDLViewer.hpp	/^namespace CS207 {$/;"	n
CS207	CS207/Util.hpp	/^namespace CS207 {$/;"	n
CS207_COLOR_HPP	CS207/Color.hpp	2;"	d
CS207_GLCAMERA_HPP	CS207/GLCamera.hpp	2;"	d
CS207_GRAPH_HPP	Graph.hpp	2;"	d
CS207_METRICS_HPP	Examples/Metrics.hpp	2;"	d
CS207_POINT_HPP	Point.hpp	2;"	d
CS207_SDLVIEWER_HPP	CS207/SDLViewer.hpp	2;"	d
CS207_UTIL_HPP	CS207/Util.hpp	2;"	d
CXX	Examples/Makefile	/^CXX := $(shell which clang++) -std=c++11$/;"	m
CXX	Makefile	/^CXX := $(shell which clang++) -std=c++11 -g$/;"	m
CentroidPredicate	subgraph.cpp	/^struct CentroidPredicate {$/;"	s	file:
Clock	CS207/Util.hpp	/^  Clock() : starttime_(clock::now()) {}$/;"	f	class:CS207::Clock
Clock	CS207/Util.hpp	/^class Clock {$/;"	c	namespace:CS207
Color	CS207/Color.hpp	/^  Color() $/;"	f	struct:CS207::Color
Color	CS207/Color.hpp	/^  Color(float r, float g, float b)$/;"	f	struct:CS207::Color
Color	CS207/Color.hpp	/^  Color(float v)$/;"	f	struct:CS207::Color
Color	CS207/Color.hpp	/^struct Color {$/;"	s	namespace:CS207
DEPSDIR	Examples/Makefile	/^DEPSDIR := $(shell mkdir -p .deps; echo .deps)$/;"	m
DEPSDIR	Makefile	/^DEPSDIR := $(shell mkdir -p .deps; echo .deps)$/;"	m
DEPSFILE	Examples/Makefile	/^DEPSFILE = $(DEPSDIR)\/$(notdir $*.d)$/;"	m
DEPSFILE	Makefile	/^DEPSFILE = $(DEPSDIR)\/$(notdir $*.d)$/;"	m
DEPSFLAGS	Examples/Makefile	/^DEPSFLAGS = -MD -MF $(DEPSFILE) -MP$/;"	m
DEPSFLAGS	Makefile	/^DEPSFLAGS = -MD -MF $(DEPSFILE) -MP$/;"	m
DampingConstant	Examples/Metrics.hpp	/^typedef Unit<1, 0, -1, double>  DampingConstant;$/;"	t	namespace:Metrics
DefaultColor	CS207/SDLViewer.hpp	/^struct DefaultColor {$/;"	s	namespace:CS207
DefaultPosition	CS207/SDLViewer.hpp	/^struct DefaultPosition {$/;"	s	namespace:CS207
Distance	Examples/Metrics.hpp	/^typedef Unit<0, 1,  0, double>  Distance;$/;"	t	namespace:Metrics
Distance3	Examples/Metrics.hpp	/^typedef Unit<0, 1,  0, Point>   Distance3;$/;"	t	namespace:Metrics
Edge	Graph.hpp	/^  	Edge(const Graph* graph, uid_type node1, uid_type node2) {$/;"	f	class:Graph::Edge
Edge	Graph.hpp	/^    Edge() {$/;"	f	class:Graph::Edge
Edge	Graph.hpp	/^  class Edge {$/;"	c	class:Graph
Edge	mass_spring.cpp	/^typedef typename GraphType::edge_type Edge;$/;"	t	file:
Edge	test_edges.cpp	/^typedef GraphType::edge_type Edge;$/;"	t	file:
EdgeIterator	Graph.hpp	/^	EdgeIterator(const Graph* graph) {$/;"	f	class:Graph::EdgeIterator
EdgeIterator	Graph.hpp	/^    EdgeIterator() {$/;"	f	class:Graph::EdgeIterator
EdgeIterator	Graph.hpp	/^  class EdgeIterator : private totally_ordered<EdgeIterator> {$/;"	c	class:Graph
FIRST_PRIME	primes.cpp	3;"	d	file:
Force	Examples/Metrics.hpp	/^typedef Unit<1, 1, -2, double>  Force;$/;"	t	namespace:Metrics
Force3	Examples/Metrics.hpp	/^typedef Unit<1, 1, -2, Point>   Force3;$/;"	t	namespace:Metrics
GLCamera	CS207/GLCamera.hpp	/^  GLCamera()$/;"	f	class:CS207::GLCamera
GLCamera	CS207/GLCamera.hpp	/^class GLCamera {$/;"	c	namespace:CS207
Graph	Graph.hpp	/^  Graph() {$/;"	f	class:Graph
Graph	Graph.hpp	/^class Graph {$/;"	c
GraphType	mass_spring.cpp	/^typedef Graph<NodeData> GraphType;$/;"	t	file:
GraphType	test_edges.cpp	/^typedef Graph<int> GraphType;$/;"	t	file:
GraphType	test_nodes.cpp	/^typedef Graph<int> GraphType;$/;"	t	file:
IncidentIterator	Graph.hpp	/^	IncidentIterator(const Graph* graph, uid_type uid) {$/;"	f	class:Graph::IncidentIterator
IncidentIterator	Graph.hpp	/^    IncidentIterator() {$/;"	f	class:Graph::IncidentIterator
IncidentIterator	Graph.hpp	/^  class IncidentIterator : private totally_ordered<IncidentIterator> {$/;"	c	class:Graph
Mass	Examples/Metrics.hpp	/^typedef Unit<1, 0,  0, double>  Mass;$/;"	t	namespace:Metrics
Metrics	Examples/Metrics.hpp	/^namespace Metrics {$/;"	n
MyColorFunc	shortest_path.cpp	/^	MyColorFunc(int longest_path) : lp_(longest_path) {$/;"	f	struct:MyColorFunc
MyColorFunc	shortest_path.cpp	/^struct MyColorFunc {$/;"	s	file:
MyComparator	shortest_path.cpp	/^   MyComparator(const Point& p) : p_(p) {$/;"	f	struct:MyComparator
MyComparator	shortest_path.cpp	/^struct MyComparator {$/;"	s	file:
Node	Graph.hpp	/^	Node(const Graph* graph, size_type uid) : graph_(graph), uid_(uid) {$/;"	f	class:Graph::Node
Node	Graph.hpp	/^    Node() {$/;"	f	class:Graph::Node
Node	Graph.hpp	/^  class Node {$/;"	c	class:Graph
Node	mass_spring.cpp	/^typedef typename GraphType::node_type Node;$/;"	t	file:
Node	test_edges.cpp	/^typedef GraphType::node_type Node;$/;"	t	file:
Node	test_nodes.cpp	/^typedef GraphType::node_type Node;$/;"	t	file:
NodeData	mass_spring.cpp	/^struct NodeData {$/;"	s	file:
NodeIterator	Graph.hpp	/^  	NodeIterator(const Graph* graph, size_type index) : graph_(graph), index_(index) {$/;"	f	class:Graph::NodeIterator
NodeIterator	Graph.hpp	/^    NodeIterator() {$/;"	f	class:Graph::NodeIterator
NodeIterator	Graph.hpp	/^  class NodeIterator : private totally_ordered<NodeIterator> {$/;"	c	class:Graph
Point	Point.hpp	/^  Point() {$/;"	f	struct:Point
Point	Point.hpp	/^  Point(value_type b0, value_type b1, value_type b2) {$/;"	f	struct:Point
Point	Point.hpp	/^  explicit Point(value_type b) {$/;"	f	struct:Point
Point	Point.hpp	/^struct Point {$/;"	s
Problem1Force	mass_spring.cpp	/^struct Problem1Force {$/;"	s	file:
SDLViewer	CS207/SDLViewer.hpp	/^  SDLViewer()$/;"	f	class:CS207::SDLViewer
SDLViewer	CS207/SDLViewer.hpp	/^class SDLViewer {$/;"	c	namespace:CS207
Scalar	Examples/Metrics.hpp	/^typedef Unit<0, 0,  0, double>  Scalar;$/;"	t	namespace:Metrics
SimpleElement	Examples/proxy_example.cpp	/^    SimpleElement() {$/;"	f	class:SimpleSet::SimpleElement
SimpleElement	Examples/proxy_example.cpp	/^    SimpleElement(const SimpleSet* set, size_type uid)$/;"	f	class:SimpleSet::SimpleElement	file:
SimpleElement	Examples/proxy_example.cpp	/^  class SimpleElement {$/;"	c	class:SimpleSet	file:
SimpleSet	Examples/proxy_example.cpp	/^  SimpleSet()$/;"	f	class:SimpleSet
SimpleSet	Examples/proxy_example.cpp	/^class SimpleSet {$/;"	c	file:
SlicePredicate	subgraph.cpp	/^struct SlicePredicate {$/;"	s	file:
SpringConstant	Examples/Metrics.hpp	/^typedef Unit<1, 0, -2, double>  SpringConstant;$/;"	t	namespace:Metrics
Time	Examples/Metrics.hpp	/^typedef Unit<0, 0,  1, double>  Time;$/;"	t	namespace:Metrics
UNAME	Examples/Makefile	/^UNAME := $(shell uname)$/;"	m
UNAME	Makefile	/^UNAME := $(shell uname)$/;"	m
Unit	Examples/Metrics.hpp	/^  constexpr Unit(const T& v = T())$/;"	f	struct:Metrics::Unit
Unit	Examples/Metrics.hpp	/^struct Unit {$/;"	s	namespace:Metrics
Velocity	Examples/Metrics.hpp	/^typedef Unit<0, 1, -1, double>  Velocity;$/;"	t	namespace:Metrics
Velocity3	Examples/Metrics.hpp	/^typedef Unit<0, 1, -1, Point>   Velocity3;$/;"	t	namespace:Metrics
_g	Examples/Metrics.hpp	/^constexpr Mass operator"" _g(long double v) {$/;"	f	namespace:Metrics
_m	Examples/Metrics.hpp	/^constexpr Distance operator"" _m(long double v) {$/;"	f	namespace:Metrics
_s	Examples/Metrics.hpp	/^constexpr Time operator"" _s(long double v) {$/;"	f	namespace:Metrics
_s	Examples/Metrics.hpp	/^constexpr Time operator"" _s(unsigned long long v) {$/;"	f	namespace:Metrics
add_edge	Graph.hpp	/^  Edge add_edge(const Node& a, const Node& b) {$/;"	f	class:Graph
add_edges	CS207/SDLViewer.hpp	/^  void add_edges(InputIterator first, InputIterator last, const Map& node_map) {$/;"	f	class:CS207::SDLViewer
add_node	Graph.hpp	/^  Node add_node(const Point& position, const node_value_type& value = node_value_type()) {$/;"	f	class:Graph
add_nodes	CS207/SDLViewer.hpp	/^  void add_nodes(InputIterator first, InputIterator last,$/;"	f	class:CS207::SDLViewer
adj	Graph.hpp	/^	std::vector<uid_type> adj;$/;"	m	struct:Graph::node_data
b	CS207/Color.hpp	/^  value_type r, g, b;$/;"	m	struct:CS207::Color
back	Point.hpp	/^  const_reference back()  const { return elem[2]; }$/;"	f	struct:Point
back	Point.hpp	/^  reference       back()        { return elem[2]; }$/;"	f	struct:Point
begin	Graph.hpp	/^	EdgeIterator& begin() {$/;"	f	class:Graph::EdgeIterator
begin	Graph.hpp	/^	IncidentIterator& begin() {$/;"	f	class:Graph::IncidentIterator
begin	Point.hpp	/^  const_iterator  begin() const { return elem; }$/;"	f	struct:Point
begin	Point.hpp	/^  iterator        begin()       { return elem; }$/;"	f	struct:Point
camera_	CS207/SDLViewer.hpp	/^  GLCamera camera_;$/;"	m	class:CS207::SDLViewer
cbegin	Point.hpp	/^  const_iterator cbegin() const { return elem; }$/;"	f	struct:Point
cend	Point.hpp	/^  const_iterator   cend() const { return elem+3; }$/;"	f	struct:Point
center_view	CS207/SDLViewer.hpp	/^  void center_view() {$/;"	f	class:CS207::SDLViewer
check_gl_error	CS207/SDLViewer.hpp	/^  void check_gl_error(const char* context = nullptr) {$/;"	f	class:CS207::SDLViewer
clear	CS207/SDLViewer.hpp	/^  void clear() {$/;"	f	class:CS207::SDLViewer
clear	Graph.hpp	/^  void clear() {$/;"	f	class:Graph
clock	CS207/Util.hpp	/^  typedef std::chrono::high_resolution_clock clock;$/;"	t	class:CS207::Clock
colors_	CS207/SDLViewer.hpp	/^  std::vector<Color> colors_;$/;"	m	class:CS207::SDLViewer
const_iterator	Point.hpp	/^  typedef const double*   const_iterator;$/;"	t	struct:Point
const_reference	Point.hpp	/^  typedef const double&   const_reference;$/;"	t	struct:Point
coords_	CS207/SDLViewer.hpp	/^  std::vector<Point> coords_;$/;"	m	class:CS207::SDLViewer
cross	Point.hpp	/^Point cross(const Point& a, const Point& b) {$/;"	f
data	Point.hpp	/^  const_iterator  data() const { return elem; }$/;"	f	struct:Point
data	Point.hpp	/^  iterator        data()       { return elem; }$/;"	f	struct:Point
default_generator	CS207/Util.hpp	/^static std::mt19937 default_generator;$/;"	m	namespace:CS207
degree	Graph.hpp	/^	size_type degree() const {$/;"	f	class:Graph::Node
degree	Graph.hpp	/^	size_type degree;$/;"	m	struct:Graph::node_data
difference_type	Graph.hpp	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Graph::EdgeIterator
difference_type	Graph.hpp	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Graph::IncidentIterator
difference_type	Graph.hpp	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Graph::NodeIterator
difference_type	Point.hpp	/^  typedef std::ptrdiff_t  difference_type;$/;"	t	struct:Point
difference_type	subgraph.cpp	/^  typedef typename std::iterator_traits<It>::difference_type   difference_type;$/;"	t	class:filter_iterator	file:
dist	CS207/GLCamera.hpp	/^  float dist;$/;"	m	class:CS207::GLCamera
distance	shortest_path.cpp	/^float distance(const Point& a, const Point& b) {$/;"	f
dot	Point.hpp	/^double dot(const Point& a, const Point& b) {$/;"	f
draw_graph	CS207/SDLViewer.hpp	/^  void draw_graph(const G& g) {$/;"	f	class:CS207::SDLViewer
draw_graph_nodes	CS207/SDLViewer.hpp	/^  void draw_graph_nodes(const G& g) {$/;"	f	class:CS207::SDLViewer
duration	CS207/Util.hpp	/^  typedef typename clock::duration           duration;$/;"	t	class:CS207::Clock
edge	Graph.hpp	/^  Edge edge(size_type i) const {$/;"	f	class:Graph
edge_begin	Graph.hpp	/^	IncidentIterator& edge_begin() const {$/;"	f	class:Graph::Node
edge_begin	Graph.hpp	/^  EdgeIterator& edge_begin() const {$/;"	f	class:Graph
edge_end	Graph.hpp	/^	IncidentIterator& edge_end() const {$/;"	f	class:Graph::Node
edge_end	Graph.hpp	/^  EdgeIterator& edge_end() const {$/;"	f	class:Graph
edge_iterator	Graph.hpp	/^  typedef EdgeIterator edge_iterator;$/;"	t	class:Graph
edge_type	Graph.hpp	/^  typedef Edge edge_type;$/;"	t	class:Graph
edges_	CS207/SDLViewer.hpp	/^  std::vector<unsigned> edges_;$/;"	m	class:CS207::SDLViewer
elapsed	CS207/Util.hpp	/^  duration elapsed() const {$/;"	f	class:CS207::Clock
elem	Point.hpp	/^    double elem[3];$/;"	m	union:Point::__anon1
elements_	Examples/proxy_example.cpp	/^  internal_element* elements_;$/;"	m	class:SimpleSet	file:
empty	Point.hpp	/^  static constexpr bool         empty() { return false; }$/;"	f	struct:Point
empty_node_map	CS207/SDLViewer.hpp	/^  std::map<typename G::node_type, unsigned> empty_node_map(const G&) const {$/;"	f	class:CS207::SDLViewer
end	Graph.hpp	/^	EdgeIterator& end() {$/;"	f	class:Graph::EdgeIterator
end	Graph.hpp	/^	IncidentIterator& end() {$/;"	f	class:Graph::IncidentIterator
end	Point.hpp	/^  const_iterator    end() const { return elem+3; }$/;"	f	struct:Point
end	Point.hpp	/^  iterator          end()       { return elem+3; }$/;"	f	struct:Point
end_	subgraph.cpp	/^  It end_;$/;"	m	class:filter_iterator	file:
equality_comparable	CS207/Util.hpp	/^struct equality_comparable {$/;"	s
event_loop	CS207/SDLViewer.hpp	/^  void event_loop() {$/;"	f	class:CS207::SDLViewer
event_loop_wrapper	CS207/SDLViewer.hpp	/^  static int event_loop_wrapper(void* _viewer_ptr) {$/;"	f	class:CS207::SDLViewer
event_thread_	CS207/SDLViewer.hpp	/^  SDL_Thread* event_thread_;$/;"	m	class:CS207::SDLViewer
eyeV	CS207/GLCamera.hpp	/^  Point eyeV;$/;"	m	class:CS207::GLCamera
f_greater	Examples/func_params.cpp	/^bool f_greater(int a, int b) {$/;"	f
fail_count	test_edges.cpp	/^static unsigned fail_count = 0;$/;"	v	file:
fail_count	test_nodes.cpp	/^static unsigned fail_count = 0;$/;"	v	file:
fetch	Examples/proxy_example.cpp	/^    internal_element& fetch() const {$/;"	f	class:SimpleSet::SimpleElement	file:
filter_iterator	subgraph.cpp	/^  filter_iterator(const Pred& p, const It& first, const It& last)$/;"	f	class:filter_iterator
filter_iterator	subgraph.cpp	/^class filter_iterator$/;"	c	file:
fix	Graph.hpp	/^	void fix() {$/;"	f	class:Graph::EdgeIterator
fix	subgraph.cpp	/^  void fix() {$/;"	f	class:filter_iterator	file:
for_i	Point.hpp	11;"	d
for_i	Point.hpp	234;"	d
front	Point.hpp	/^  const_reference front() const { return elem[0]; }$/;"	f	struct:Point
front	Point.hpp	/^  reference       front()       { return elem[0]; }$/;"	f	struct:Point
g	CS207/Color.hpp	/^  value_type r, g, b;$/;"	m	struct:CS207::Color
get_element	Examples/proxy_example.cpp	/^  SimpleElement get_element(size_type i) const {$/;"	f	class:SimpleSet
getline_parsed	CS207/Util.hpp	/^std::istream& getline_parsed(std::istream& s, T& value)$/;"	f	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template <typename T> struct gltype {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<double>         : public gltype_v<GL_DOUBLE> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<float>          : public gltype_v<GL_FLOAT> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<int>            : public gltype_v<GL_INT> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<short>          : public gltype_v<GL_SHORT> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<unsigned char>  : public gltype_v<GL_UNSIGNED_BYTE> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<unsigned int>   : public gltype_v<GL_UNSIGNED_INT> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<unsigned short> : public gltype_v<GL_UNSIGNED_SHORT> {};$/;"	s	namespace:CS207
gltype_v	CS207/SDLViewer.hpp	/^template <GLenum V> struct gltype_v {$/;"	s	namespace:CS207
graph_	Graph.hpp	/^	const Graph* graph_;$/;"	m	class:Graph::Edge
graph_	Graph.hpp	/^	const Graph* graph_;$/;"	m	class:Graph::EdgeIterator
graph_	Graph.hpp	/^	const Graph* graph_;$/;"	m	class:Graph::IncidentIterator
graph_	Graph.hpp	/^	const Graph* graph_;$/;"	m	class:Graph::Node
graph_	Graph.hpp	/^	const Graph* graph_;$/;"	m	class:Graph::NodeIterator
graph_type	Graph.hpp	/^  typedef Graph graph_type;$/;"	t	class:Graph
grav	mass_spring.cpp	/^static constexpr double grav = 9.81;$/;"	v	file:
handle_event	CS207/SDLViewer.hpp	/^  void handle_event(SDL_Event event) {$/;"	f	class:CS207::SDLViewer
has_edge	Graph.hpp	/^   size_type has_edge(const Node& a, const Node& b) {$/;"	f	class:Graph
has_node	Graph.hpp	/^  bool has_node(const Node& n) const {$/;"	f	class:Graph
incident_iterator	Graph.hpp	/^  typedef IncidentIterator incident_iterator;$/;"	t	class:Graph
index	Graph.hpp	/^    size_type index() const {$/;"	f	class:Graph::Node
index_	Graph.hpp	/^	size_type index_;$/;"	m	class:Graph::NodeIterator
init	CS207/SDLViewer.hpp	/^  void init() {$/;"	f	class:CS207::SDLViewer
inner_	Graph.hpp	/^	size_type inner_;$/;"	m	class:Graph::EdgeIterator
inner_prod	Point.hpp	/^double inner_prod(const Point& a, const Point& b) {$/;"	f
internal_element	Examples/proxy_example.cpp	/^  struct internal_element {$/;"	s	class:SimpleSet	file:
is_prime	primes.cpp	/^bool is_prime(int n)$/;"	f
it_	Graph.hpp	/^	size_type it_;$/;"	m	class:Graph::IncidentIterator
it_	subgraph.cpp	/^  It it_;$/;"	m	class:filter_iterator	file:
iterator	Graph.hpp	/^	typedef std::vector<uid_type>::iterator iterator;$/;"	t	class:Graph::IncidentIterator
iterator	Point.hpp	/^  typedef double*         iterator;$/;"	t	struct:Point
iterator_category	Graph.hpp	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:Graph::EdgeIterator
iterator_category	Graph.hpp	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:Graph::IncidentIterator
iterator_category	Graph.hpp	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:Graph::NodeIterator
iterator_category	subgraph.cpp	/^  typedef typename std::input_iterator_tag                     iterator_category;$/;"	t	class:filter_iterator	file:
label_	CS207/SDLViewer.hpp	/^  std::string label_;$/;"	m	class:CS207::SDLViewer
launch	CS207/SDLViewer.hpp	/^  void launch() {$/;"	f	class:CS207::SDLViewer
less_than_comparable	CS207/Util.hpp	/^struct less_than_comparable {$/;"	s
lock_	CS207/SDLViewer.hpp	/^  SDL_mutex* lock_;$/;"	m	class:CS207::SDLViewer
lower_bound	Examples/func_params.cpp	/^int lower_bound(const T* a, int low, int high, const T& v, Comp comp = Comp()) {$/;"	f
lower_bound	Examples/func_params.cpp	/^int lower_bound(const T* a, int n, const T& v, Comp comp = Comp()) {$/;"	f
lp_	shortest_path.cpp	/^	int lp_;$/;"	m	struct:MyColorFunc	file:
main	Examples/func_params.cpp	/^int main()$/;"	f
main	Examples/proxy_example.cpp	/^int main() {$/;"	f
main	Examples/test_metrics.cpp	/^int main()$/;"	f
main	mass_spring.cpp	/^int main(int argc, char** argv) {$/;"	f
main	primes.cpp	/^int main()$/;"	f
main	shortest_path.cpp	/^int main(int argc, char** argv)$/;"	f
main	subgraph.cpp	/^int main(int argc, char** argv)$/;"	f
main	test_edges.cpp	/^int main()$/;"	f
main	test_nodes.cpp	/^int main()$/;"	f
main	viewer.cpp	/^int main(int argc, char** argv)$/;"	f
make_filtered	subgraph.cpp	/^filter_iterator<Pred,Iter> make_filtered(const Iter& it, const Iter& end,$/;"	f
make_heat	CS207/Color.hpp	/^  static Color make_heat(float v) {$/;"	f	struct:CS207::Color
make_hsv	CS207/Color.hpp	/^  static Color make_hsv(float h, float s, float v) {$/;"	f	struct:CS207::Color
make_rgb	CS207/Color.hpp	/^  static Color make_rgb(float r, float g, float b) {$/;"	f	struct:CS207::Color
mass	mass_spring.cpp	/^  double mass;     \/\/< Node mass$/;"	m	struct:NodeData	file:
max_size	Point.hpp	/^  static constexpr size_type max_size() { return 3; }$/;"	f	struct:Point
next	Graph.hpp	/^	void next() {$/;"	f	class:Graph::EdgeIterator
next_uid_	Examples/proxy_example.cpp	/^  size_type next_uid_;$/;"	m	class:SimpleSet	file:
node	Graph.hpp	/^  Node node(size_type i) const {$/;"	f	class:Graph
node1	Graph.hpp	/^    Node node1() const {$/;"	f	class:Graph::Edge
node2	Graph.hpp	/^    Node node2() const {$/;"	f	class:Graph::Edge
node_	Graph.hpp	/^	Node node_;$/;"	m	class:Graph::IncidentIterator
node_begin	Graph.hpp	/^  NodeIterator node_begin() const {$/;"	f	class:Graph
node_data	Graph.hpp	/^  typedef struct node_data {$/;"	s	class:Graph
node_data	Graph.hpp	/^  } node_data;$/;"	t	class:Graph	typeref:struct:Graph::node_data
node_end	Graph.hpp	/^  NodeIterator node_end() const {$/;"	f	class:Graph
node_iterator	Graph.hpp	/^  typedef NodeIterator node_iterator;$/;"	t	class:Graph
node_type	Graph.hpp	/^  typedef Node node_type;$/;"	t	class:Graph
node_value_type	Graph.hpp	/^  typedef V node_value_type;$/;"	t	class:Graph
nodes_	Graph.hpp	/^ 	std::vector<node_data> nodes_;$/;"	m	class:Graph
norm	Point.hpp	/^double norm(const Point& a) {$/;"	f
normSq	Point.hpp	/^double normSq(const Point& a) {$/;"	f
norm_1	Point.hpp	/^double norm_1(const Point& a) {$/;"	f
norm_2	Point.hpp	/^double norm_2(const Point& a) {$/;"	f
norm_inf	Point.hpp	/^double norm_inf(const Point& a) {$/;"	f
num_edges	Graph.hpp	/^  size_type num_edges() const {$/;"	f	class:Graph
num_edges_	Graph.hpp	/^	size_type num_edges_ = 0;$/;"	m	class:Graph
num_nodes	Graph.hpp	/^  size_type num_nodes() const {$/;"	f	class:Graph
num_nodes_	Graph.hpp	/^	size_type num_nodes_ = 0;$/;"	m	class:Graph
ok_	CS207/SDLViewer.hpp	/^    bool ok_;$/;"	m	struct:CS207::SDLViewer::safe_lock
operator !=	CS207/Util.hpp	/^  friend bool operator!=(const T& a, const T& b) { return !(a == b); }$/;"	f	struct:equality_comparable
operator !=	Point.hpp	/^  bool operator!=(const Point& b) const {$/;"	f	struct:Point
operator ()	CS207/SDLViewer.hpp	/^  Color operator()(const NODE&) {$/;"	f	struct:CS207::DefaultColor
operator ()	CS207/SDLViewer.hpp	/^  Point operator()(const NODE& node) {$/;"	f	struct:CS207::DefaultPosition
operator ()	Examples/func_params.cpp	/^  bool operator()(int a, int b) const {$/;"	f	struct:s_greater
operator ()	mass_spring.cpp	/^  Point operator()(Node n, double t) {$/;"	f	struct:Problem1Force
operator ()	shortest_path.cpp	/^	CS207::Color operator()(const NODE& node) {$/;"	f	struct:MyColorFunc
operator ()	shortest_path.cpp	/^   bool operator()(const NODE& node1, const NODE& node2) const {$/;"	f	struct:MyComparator
operator ()	subgraph.cpp	/^  bool operator()(const NODE& n) {$/;"	f	struct:CentroidPredicate
operator ()	subgraph.cpp	/^  bool operator()(const NODE& n) {$/;"	f	struct:SlicePredicate
operator *	Examples/Metrics.hpp	/^inline Unit<i+l, j+m, k+n, prod_type<T,C>> operator*(const Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator *	Graph.hpp	/^	Edge operator*() const {$/;"	f	class:Graph::EdgeIterator
operator *	Graph.hpp	/^	Edge operator*() const {$/;"	f	class:Graph::IncidentIterator
operator *	Graph.hpp	/^	Node operator*() const{$/;"	f	class:Graph::NodeIterator
operator *	Point.hpp	/^Point operator*(Point a, const Point& b) {$/;"	f
operator *	Point.hpp	/^Point operator*(Point a, double b) {$/;"	f
operator *	Point.hpp	/^Point operator*(double b, Point a) {$/;"	f
operator *	subgraph.cpp	/^  value_type operator*() const {$/;"	f	class:filter_iterator
operator *=	Examples/Metrics.hpp	/^inline Unit<i, j, k, T>& operator*=(Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator *=	Point.hpp	/^  Point& operator*=(const Point& b) {$/;"	f	struct:Point
operator *=	Point.hpp	/^  Point& operator*=(value_type b) {$/;"	f	struct:Point
operator +	Examples/Metrics.hpp	/^inline Unit<i, j, k, T> operator+(const Unit<i, j, k, T>& a) {$/;"	f	namespace:Metrics
operator +	Examples/Metrics.hpp	/^inline Unit<i, j, k, T> operator+(const Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator +	Point.hpp	/^Point operator+(Point a, const Point& b) {$/;"	f
operator +	Point.hpp	/^Point operator+(Point a, double b) {$/;"	f
operator +	Point.hpp	/^Point operator+(const Point& a) {$/;"	f
operator +	Point.hpp	/^Point operator+(double b, Point a) {$/;"	f
operator ++	Graph.hpp	/^	EdgeIterator& operator++() {$/;"	f	class:Graph::EdgeIterator
operator ++	Graph.hpp	/^	IncidentIterator& operator++() {$/;"	f	class:Graph::IncidentIterator
operator ++	Graph.hpp	/^	NodeIterator& operator++() {$/;"	f	class:Graph::NodeIterator
operator ++	subgraph.cpp	/^  self_type& operator++() {$/;"	f	class:filter_iterator
operator +=	Examples/Metrics.hpp	/^inline Unit<i, j, k, T>& operator+=(Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator +=	Point.hpp	/^  Point& operator+=(const Point& b) {$/;"	f	struct:Point
operator +=	Point.hpp	/^  Point& operator+=(value_type b) {$/;"	f	struct:Point
operator -	Examples/Metrics.hpp	/^inline Unit<i, j, k, T> operator-(const Unit<i, j, k, T>& a) {$/;"	f	namespace:Metrics
operator -	Examples/Metrics.hpp	/^inline Unit<i, j, k, T> operator-(const Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator -	Point.hpp	/^Point operator-(Point a, const Point& b) {$/;"	f
operator -	Point.hpp	/^Point operator-(Point a, double b) {$/;"	f
operator -	Point.hpp	/^Point operator-(const Point& a) {$/;"	f
operator -	Point.hpp	/^Point operator-(double b, const Point& a) {$/;"	f
operator -=	Examples/Metrics.hpp	/^inline Unit<i, j, k, T>& operator-=(Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator -=	Point.hpp	/^  Point& operator-=(const Point& b) {$/;"	f	struct:Point
operator -=	Point.hpp	/^  Point& operator-=(value_type b) {$/;"	f	struct:Point
operator /	Examples/Metrics.hpp	/^inline Unit<i-l, j-m, k-n, div_type<T,C>> operator\/(const Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator /	Point.hpp	/^Point operator\/(Point a, const Point& b) {$/;"	f
operator /	Point.hpp	/^Point operator\/(Point a, double b) {$/;"	f
operator /=	Examples/Metrics.hpp	/^inline Unit<i, j, k, T>& operator\/=(Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator /=	Point.hpp	/^  Point& operator\/=(const Point& b) {$/;"	f	struct:Point
operator /=	Point.hpp	/^  Point& operator\/=(value_type b) {$/;"	f	struct:Point
operator <	Graph.hpp	/^    bool operator<(const Edge& x) const {$/;"	f	class:Graph::Edge
operator <	Graph.hpp	/^    bool operator<(const Node& x) const {$/;"	f	class:Graph::Node
operator <<	Examples/Metrics.hpp	/^  friend std::ostream& operator<<(std::ostream& s, const Unit& u) {$/;"	f	struct:Metrics::Unit
operator <<	Point.hpp	/^std::ostream& operator<<(std::ostream& s, const Point& a) {$/;"	f
operator <=	CS207/Util.hpp	/^  friend bool operator<=(const T& a, const T& b) { return !(b < a); }$/;"	f	struct:less_than_comparable
operator ==	Examples/Metrics.hpp	/^inline bool operator==(const Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator ==	Graph.hpp	/^	bool operator==(const EdgeIterator& it) const {$/;"	f	class:Graph::EdgeIterator
operator ==	Graph.hpp	/^	bool operator==(const IncidentIterator& other) const {$/;"	f	class:Graph::IncidentIterator
operator ==	Graph.hpp	/^	bool operator==(const NodeIterator& it) const {$/;"	f	class:Graph::NodeIterator
operator ==	Graph.hpp	/^    bool operator==(const Edge& x) const {$/;"	f	class:Graph::Edge
operator ==	Graph.hpp	/^    bool operator==(const Node& x) const {$/;"	f	class:Graph::Node
operator ==	Point.hpp	/^  bool operator==(const Point& b) const {$/;"	f	struct:Point
operator ==	subgraph.cpp	/^  bool operator==(const self_type& other) const {$/;"	f	class:filter_iterator
operator >	CS207/Util.hpp	/^  friend bool operator> (const T& a, const T& b) { return   b < a;  }$/;"	f	struct:less_than_comparable
operator >=	CS207/Util.hpp	/^  friend bool operator>=(const T& a, const T& b) { return !(a < b); }$/;"	f	struct:less_than_comparable
operator >>	CS207/Util.hpp	/^std::istream& operator>>(std::istream& s, std::array<T,N>& v) {$/;"	f	namespace:CS207
operator >>	Point.hpp	/^std::istream& operator>>(std::istream& s, Point& a) {$/;"	f
operator []	Point.hpp	/^  const_reference operator[](size_type i) const { return elem[i]; }$/;"	f	struct:Point
operator []	Point.hpp	/^  reference       operator[](size_type i)       { return elem[i]; }$/;"	f	struct:Point
outer_	Graph.hpp	/^	size_type outer_;$/;"	m	class:Graph::EdgeIterator
p	Graph.hpp	/^	mutable Point p;$/;"	m	struct:Graph::node_data
p_	shortest_path.cpp	/^   Point p_;$/;"	m	struct:MyComparator	file:
p_	subgraph.cpp	/^  Pred p_;$/;"	m	class:filter_iterator	file:
pan	CS207/GLCamera.hpp	/^  inline void pan(float x, float y, float z) {$/;"	f	class:CS207::GLCamera
point	CS207/GLCamera.hpp	/^  Point point;$/;"	m	class:CS207::GLCamera
pointer	Graph.hpp	/^    typedef Edge* pointer;$/;"	t	class:Graph::EdgeIterator
pointer	Graph.hpp	/^    typedef Edge* pointer;$/;"	t	class:Graph::IncidentIterator
pointer	Graph.hpp	/^    typedef Node* pointer;$/;"	t	class:Graph::NodeIterator
pointer	subgraph.cpp	/^  typedef typename std::iterator_traits<It>::pointer           pointer;$/;"	t	class:filter_iterator	file:
position	Graph.hpp	/^	Point& position() {$/;"	f	class:Graph::Node
position	Graph.hpp	/^    const Point& position() const {$/;"	f	class:Graph::Node
push_back	Examples/proxy_example.cpp	/^  SimpleElement push_back(const std::string& text) {$/;"	f	class:SimpleSet
r	CS207/Color.hpp	/^  value_type r, g, b;$/;"	m	struct:CS207::Color
random	CS207/Util.hpp	/^double random() {$/;"	f	namespace:CS207
random	CS207/Util.hpp	/^double random(double a, double b) {$/;"	f	namespace:CS207
reference	Graph.hpp	/^    typedef Edge& reference;$/;"	t	class:Graph::EdgeIterator
reference	Graph.hpp	/^    typedef Edge& reference;$/;"	t	class:Graph::IncidentIterator
reference	Graph.hpp	/^    typedef Node& reference;$/;"	t	class:Graph::NodeIterator
reference	Point.hpp	/^  typedef double&         reference;$/;"	t	struct:Point
reference	subgraph.cpp	/^  typedef typename std::iterator_traits<It>::reference         reference;$/;"	t	class:filter_iterator	file:
remove	Examples/proxy_example.cpp	/^  void remove(size_type i) {$/;"	f	class:SimpleSet
render	CS207/SDLViewer.hpp	/^  void render() {$/;"	f	class:CS207::SDLViewer
render_label	CS207/SDLViewer.hpp	/^  void render_label() {$/;"	f	class:CS207::SDLViewer
render_lcd_segments	CS207/SDLViewer.hpp	/^  void render_lcd_segments(unsigned segments) {$/;"	f	class:CS207::SDLViewer
render_requested_	CS207/SDLViewer.hpp	/^  bool render_requested_;$/;"	m	class:CS207::SDLViewer
request_render	CS207/SDLViewer.hpp	/^  void request_render() {$/;"	f	class:CS207::SDLViewer
rightV	CS207/GLCamera.hpp	/^  Point rightV;$/;"	m	class:CS207::GLCamera
rotate_x	CS207/GLCamera.hpp	/^  inline void rotate_x(float angle) {$/;"	f	class:CS207::GLCamera
rotate_y	CS207/GLCamera.hpp	/^  inline void rotate_y(float angle) {$/;"	f	class:CS207::GLCamera
s_greater	Examples/func_params.cpp	/^struct s_greater {$/;"	s	file:
safe_lock	CS207/SDLViewer.hpp	/^    safe_lock(SDLViewer* v)$/;"	f	struct:CS207::SDLViewer::safe_lock
safe_lock	CS207/SDLViewer.hpp	/^  struct safe_lock {$/;"	s	class:CS207::SDLViewer
seconds	CS207/Util.hpp	/^  double seconds() const {$/;"	f	class:CS207::Clock
self_type	subgraph.cpp	/^  typedef filter_iterator<Pred,It> self_type;$/;"	t	class:filter_iterator	file:
set_	Examples/proxy_example.cpp	/^    SimpleSet* set_;$/;"	m	class:SimpleSet::SimpleElement	file:
set_label	CS207/SDLViewer.hpp	/^  void set_label(const std::string& str) {$/;"	f	class:CS207::SDLViewer
set_label	CS207/SDLViewer.hpp	/^  void set_label(double d) {$/;"	f	class:CS207::SDLViewer
set_ortho	CS207/GLCamera.hpp	/^  void set_ortho(double left, double right, double bottom, double top,$/;"	f	class:CS207::GLCamera
set_perspective	CS207/GLCamera.hpp	/^  void set_perspective(double fovy, double aspect,$/;"	f	class:CS207::GLCamera
set_text	Examples/proxy_example.cpp	/^    void set_text(const std::string& text) {$/;"	f	class:SimpleSet::SimpleElement
set_view	CS207/GLCamera.hpp	/^  inline void set_view() const {$/;"	f	class:CS207::GLCamera
sf_print	test_edges.cpp	/^void sf_print(T a, string msg = "") {$/;"	f
sf_print	test_edges.cpp	/^void sf_print(bool sf, string msg = "") {$/;"	f
sf_print	test_nodes.cpp	/^void sf_print(T a, string msg = "") {$/;"	f
sf_print	test_nodes.cpp	/^void sf_print(bool sf, string msg = "") {$/;"	f
shortest_path_lengths	shortest_path.cpp	/^int shortest_path_lengths(Graph<int>& g, const Point& point) {$/;"	f
size	Examples/proxy_example.cpp	/^  size_type size() const {$/;"	f	class:SimpleSet
size	Graph.hpp	/^  size_type size() const {$/;"	f	class:Graph
size	Point.hpp	/^  static constexpr size_type     size() { return 3; }$/;"	f	struct:Point
size_	Examples/proxy_example.cpp	/^  size_type size_;$/;"	m	class:SimpleSet	file:
size_type	Examples/proxy_example.cpp	/^  typedef unsigned size_type;$/;"	t	class:SimpleSet	file:
size_type	Graph.hpp	/^  typedef unsigned size_type;$/;"	t	class:Graph
size_type	Point.hpp	/^  typedef std::size_t     size_type;$/;"	t	struct:Point
sleep	CS207/Util.hpp	/^int sleep(double t) {$/;"	f	namespace:CS207
start	CS207/Util.hpp	/^  void start() {$/;"	f	class:CS207::Clock
starttime_	CS207/Util.hpp	/^  time_point starttime_;$/;"	m	class:CS207::Clock
surface_	CS207/SDLViewer.hpp	/^  SDL_Surface* surface_;$/;"	m	class:CS207::SDLViewer
symp_euler_step	mass_spring.cpp	/^double symp_euler_step(G& g, double t, double dt, F force) {$/;"	f
text	Examples/proxy_example.cpp	/^    std::string text(){$/;"	f	class:SimpleSet::SimpleElement
text	Examples/proxy_example.cpp	/^    std::string text;   \/\/ The text held by an element$/;"	m	struct:SimpleSet::internal_element	file:
tick_type	CS207/Util.hpp	/^  typedef typename duration::rep             tick_type;$/;"	t	class:CS207::Clock
time_point	CS207/Util.hpp	/^  typedef typename clock::time_point         time_point;$/;"	t	class:CS207::Clock
totally_ordered	CS207/Util.hpp	/^struct totally_ordered$/;"	s
uid	Examples/proxy_example.cpp	/^    size_type uid;      \/\/ The unique identifcation for an element$/;"	m	struct:SimpleSet::internal_element	file:
uid	Graph.hpp	/^  	uid_type uid;$/;"	m	struct:Graph::node_data
uid1_	Graph.hpp	/^	uid_type uid1_;$/;"	m	class:Graph::Edge
uid2_	Graph.hpp	/^	uid_type uid2_;$/;"	m	class:Graph::Edge
uid_	Examples/proxy_example.cpp	/^    size_type uid_;$/;"	m	class:SimpleSet::SimpleElement	file:
uid_	Graph.hpp	/^	size_type uid_ = 0;$/;"	m	class:Graph::Node
uid_type	Graph.hpp	/^  typedef size_type uid_type;$/;"	t	class:Graph
unlock	CS207/SDLViewer.hpp	/^    void unlock() {$/;"	f	struct:CS207::SDLViewer::safe_lock
upV	CS207/GLCamera.hpp	/^  Point upV;$/;"	m	class:CS207::GLCamera
v	Graph.hpp	/^	mutable node_value_type v;$/;"	m	struct:Graph::node_data
v_	CS207/SDLViewer.hpp	/^    SDLViewer* v_;$/;"	m	struct:CS207::SDLViewer::safe_lock
value	CS207/SDLViewer.hpp	/^  static constexpr GLenum value = V;$/;"	m	struct:CS207::gltype_v
value	Examples/Metrics.hpp	/^  T value;$/;"	m	struct:Metrics::Unit
value	Graph.hpp	/^	const node_value_type& value() const {$/;"	f	class:Graph::Node
value	Graph.hpp	/^	node_value_type& value() {$/;"	f	class:Graph::Node
value_type	CS207/Color.hpp	/^  typedef float value_type;$/;"	t	struct:CS207::Color
value_type	Examples/Metrics.hpp	/^  typedef T value_type;$/;"	t	struct:Metrics::Unit
value_type	Graph.hpp	/^    typedef Edge value_type;$/;"	t	class:Graph::EdgeIterator
value_type	Graph.hpp	/^    typedef Edge value_type;$/;"	t	class:Graph::IncidentIterator
value_type	Graph.hpp	/^    typedef Node value_type;$/;"	t	class:Graph::NodeIterator
value_type	Point.hpp	/^  typedef double          value_type;$/;"	t	struct:Point
value_type	subgraph.cpp	/^  typedef typename std::iterator_traits<It>::value_type        value_type;$/;"	t	class:filter_iterator	file:
velocity	mass_spring.cpp	/^  Point velocity;  \/\/< Node velocity$/;"	m	struct:NodeData	file:
view_point	CS207/GLCamera.hpp	/^  inline void view_point(const Point& p) {$/;"	f	class:CS207::GLCamera
view_point	CS207/GLCamera.hpp	/^  inline void view_point(float x, float y, float z) {$/;"	f	class:CS207::GLCamera
window_height	CS207/SDLViewer.hpp	/^  int window_height() const {$/;"	f	class:CS207::SDLViewer
window_height_	CS207/SDLViewer.hpp	/^  int window_height_;$/;"	m	class:CS207::SDLViewer
window_width	CS207/SDLViewer.hpp	/^  int window_width() const {$/;"	f	class:CS207::SDLViewer
window_width_	CS207/SDLViewer.hpp	/^  int window_width_;$/;"	m	class:CS207::SDLViewer
x	Point.hpp	/^      double x;$/;"	m	struct:Point::__anon1::__anon2
y	Point.hpp	/^      double y;$/;"	m	struct:Point::__anon1::__anon2
z	Point.hpp	/^      double z;$/;"	m	struct:Point::__anon1::__anon2
zoom	CS207/GLCamera.hpp	/^  inline void zoom(float d) {$/;"	f	class:CS207::GLCamera
zoom_mag	CS207/GLCamera.hpp	/^  inline void zoom_mag(float d) {$/;"	f	class:CS207::GLCamera
~SDLViewer	CS207/SDLViewer.hpp	/^  ~SDLViewer() {$/;"	f	class:CS207::SDLViewer
~SimpleSet	Examples/proxy_example.cpp	/^  ~SimpleSet() {$/;"	f	class:SimpleSet
~safe_lock	CS207/SDLViewer.hpp	/^    ~safe_lock() {$/;"	f	struct:CS207::SDLViewer::safe_lock
