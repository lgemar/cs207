!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicg.hpp	/^    const LinearOperator& A;$/;"	m	class:itl::bicg_solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab.hpp	/^    const LinearOperator& A;$/;"	m	class:itl::bicgstab_solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_2.hpp	/^    const LinearOperator& A;$/;"	m	class:itl::bicgstab_2_solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^    const LinearOperator& A;$/;"	m	class:itl::bicgstab_ell_solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cg.hpp	/^    const LinearOperator& A;$/;"	m	class:itl::cg_solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cgs.hpp	/^    const LinearOperator& A;$/;"	m	class:itl::cgs_solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^    const LinearOperator& A;$/;"	m	class:itl::gmres_solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^    const LinearOperator& A;$/;"	m	class:itl::idr_s_solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^    const LinearOperator& A;$/;"	m	class:itl::qmr_solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^    const LinearOperator& A;$/;"	m	class:itl::tfqmr_solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    const Matrix& A;$/;"	m	class:itl::pc::concat
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^    const Matrix&    A;$/;"	m	class:itl::gauss_seidel
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^    const Matrix&    A;$/;"	m	class:itl::jacobi
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^    const Matrix&    A;$/;"	m	class:itl::jor
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^    const Matrix&    A;$/;"	m	class:itl::sor
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    const compressed2D<Value, Parameters>& A;$/;"	m	class:mtl::mat::umfpack::solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    const matrix_type&   A;$/;"	m	class:mtl::mat::umfpack::solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    const matrix_type&  A;$/;"	m	class:mtl::mat::umfpack::solver
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    matrix_type& A;$/;"	m	struct:mtl::mat::ell_matrix_inserter
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    const matrix_type&   A;$/;"	m	struct:mtl::mat::sparse_banded_key
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    matrix_type&                      A;$/;"	m	struct:mtl::mat::sparse_banded_inserter
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	const Matrix&                                    A;$/;"	m	struct:mtl::mat::detail::lower_trisolve_t
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	const Matrix& A;$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_ref_type A;$/;"	m	struct:mtl::detail::coordinate2D_col
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_ref_type A;$/;"	m	struct:mtl::detail::coordinate2D_const_value
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_ref_type A;$/;"	m	struct:mtl::detail::coordinate2D_row
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_ref_type A;$/;"	m	struct:mtl::detail::sparse_banded_col
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_ref_type A;$/;"	m	struct:mtl::detail::sparse_banded_const_value
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_ref_type A;$/;"	m	struct:mtl::detail::sparse_banded_row
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^    const Matrix&   A;$/;"	m	struct:mtl::vec::mat_cvec_multiplier
A	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    const Matrix&   A;$/;"	m	struct:mtl::vec::row_mat_cvec_index_evaluator
AbelianGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^      : AbelianGroup<AddOp, Element>,$/;"	m	namespace:algebra
AbelianGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct AbelianGroup$/;"	s	namespace:algebra
AbelianGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : AbelianGroup<AddOp, Element>,$/;"	m	namespace:math
AbelianGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : AbelianGroup<AddOp, Element>,$/;"	m	namespace:math
AbelianGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : AbelianGroup<AddOp, Element>,$/;"	m	namespace:math
Acceleration	Examples/Metrics.hpp	/^typedef Unit<0, 1, -2, double>  Acceleration;$/;"	t	namespace:Metrics
Acceleration3	Examples/Metrics.hpp	/^typedef Unit<0, 1, -2, Point>   Acceleration3;$/;"	t	namespace:Metrics
AdditionResultConvertible	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : AdditionResultConvertible<T>,$/;"	m	namespace:math
Additive	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : Additive<Element>,$/;"	m	namespace:math
Additive	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : Additive<Element>,$/;"	m	namespace:math
AdditiveAbelianGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : AdditiveAbelianGroup<Element>,$/;"	m	namespace:math
AdditiveAbelianGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : AdditiveAbelianGroup<Element>,$/;"	m	namespace:math
AdditiveAbelianGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : AdditiveAbelianGroup<Element>,$/;"	m	namespace:math
AdditiveCommutativeMagma	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    AdditiveCommutativeMagma<Element>,$/;"	m	namespace:math
AdditiveCommutativeMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    AdditiveCommutativeMonoid<Element>, $/;"	m	namespace:math
AdditiveCommutativeMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    AdditiveCommutativeMonoid<Element>,$/;"	m	namespace:math
AdditiveCommutativeSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    AdditiveCommutativeSemiGroup<Element>,$/;"	m	namespace:math
AdditiveGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : AdditiveGroup<Element>,$/;"	m	namespace:math
AdditiveGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : AdditiveGroup<Element>,$/;"	m	namespace:math
AdditiveGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : AdditiveGroup<Element>,$/;"	m	namespace:math
AdditiveMagma	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : AdditiveMagma<Element>, $/;"	m	namespace:math
AdditiveMagma	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : AdditiveMagma<Element>,$/;"	m	namespace:math
AdditiveMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : std::HasMinus<Element>, AdditiveMonoid<Element>, $/;"	m	namespace:math
AdditiveMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : std::HasMinus<Element>, AdditiveMonoid<Element>, $/;"	m	namespace:math
AdditiveMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : AdditiveMonoid<Element>,$/;"	m	namespace:math
AdditivePIMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : AdditivePIMonoid<Element>,$/;"	m	namespace:math
AdditivePIMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : AdditivePIMonoid<Element>,$/;"	m	namespace:math
AdditivePartiallyInvertibleMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : AdditivePartiallyInvertibleMonoid<Element>,$/;"	m	namespace:math
AdditiveSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : AdditiveSemiGroup<Element>,$/;"	m	namespace:math
AdditiveSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : AdditiveSemiGroup<Element>,$/;"	m	namespace:math
AdditiveSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : AdditiveSemiGroup<Element>,$/;"	m	namespace:math
AddressHasher	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^struct AddressHasher {$/;"	s	namespace:itl::pc
AdjacentIterator	Mesh.hpp	/^			AdjacentIterator() {$/;"	f	class:Mesh::AdjacentIterator
AdjacentIterator	Mesh.hpp	/^	class AdjacentIterator : private totally_ordered<AdjacentIterator> {$/;"	c	class:Mesh
Ai	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    const index_type     *Ap, *Ai;$/;"	m	class:mtl::mat::umfpack::solver
Ai	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    const index_type    *Ap, *Ai;$/;"	m	class:mtl::mat::umfpack::solver
Aic	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    index_type          *Apc, *Aic;$/;"	m	class:mtl::mat::umfpack::solver
AlgebraicCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^      : AlgebraicCollection<T>,$/;"	m	namespace:mtl
AlgebraicCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct AlgebraicCollection$/;"	s	namespace:mtl
AllTraversableMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct AllTraversableMatrix$/;"	s	namespace:mtl
Ap	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^	Matrix* Ap;$/;"	m	struct:itl::pc::sub_matrix_pc::matrix_container
Ap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    const index_type     *Ap, *Ai;$/;"	m	class:mtl::mat::umfpack::solver
Ap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    const index_type    *Ap, *Ai;$/;"	m	class:mtl::mat::umfpack::solver
Apc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    index_type          *Apc, *Aic;$/;"	m	class:mtl::mat::umfpack::solver
Associative	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct Associative$/;"	s	namespace:algebra
Ax	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    const double        *Ax;$/;"	m	class:mtl::mat::umfpack::solver
Ax	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    dense_vector<double> Ax, Az;$/;"	m	class:mtl::mat::umfpack::solver
Az	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    dense_vector<double> Ax, Az;$/;"	m	class:mtl::mat::umfpack::solver
BITS_PER_BYTE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sorting.hpp	27;"	d
BLOCK0_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1399;"	d
BLOCK0_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1552;"	d
BLOCK0_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	700;"	d
BLOCK0_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	853;"	d
BLOCK0_1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1413;"	d
BLOCK0_1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1553;"	d
BLOCK0_1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	714;"	d
BLOCK0_1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	854;"	d
BLOCK1_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1427;"	d
BLOCK1_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1554;"	d
BLOCK1_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	728;"	d
BLOCK1_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	855;"	d
BLOCK1_1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1481;"	d
BLOCK1_1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1555;"	d
BLOCK1_1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	782;"	d
BLOCK1_1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	856;"	d
BanachSpace	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^struct BanachSpace$/;"	s	namespace:math
BinaryFunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/std_concept.hpp	/^    struct BinaryFunctor$/;"	s	namespace:mtl
BinaryStaticFunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/std_concept.hpp	/^    struct BinaryStaticFunctor$/;"	s	namespace:mtl
BoundingBox	BoundingBox.hpp	/^  BoundingBox()$/;"	f	class:BoundingBox
BoundingBox	BoundingBox.hpp	/^  BoundingBox(PointIter first, PointIter last)$/;"	f	class:BoundingBox
BoundingBox	BoundingBox.hpp	/^  BoundingBox(const point_type& p1, const point_type& p2)$/;"	f	class:BoundingBox
BoundingBox	BoundingBox.hpp	/^  explicit BoundingBox(const point_type& p)$/;"	f	class:BoundingBox
BoundingBox	BoundingBox.hpp	/^class BoundingBox {$/;"	c
CS207	CS207/Color.hpp	/^namespace CS207 {$/;"	n
CS207	CS207/GLCamera.hpp	/^namespace CS207 {$/;"	n
CS207	CS207/SDLViewer.hpp	/^namespace CS207 {$/;"	n
CS207	CS207/Util.hpp	/^namespace CS207 {$/;"	n
CS207_COLOR_HPP	CS207/Color.hpp	2;"	d
CS207_GLCAMERA_HPP	CS207/GLCamera.hpp	2;"	d
CS207_GRAPH_HPP	Graph.hpp	2;"	d
CS207_METRICS_HPP	Examples/Metrics.hpp	2;"	d
CS207_POINT_HPP	Point.hpp	2;"	d
CS207_SDLVIEWER_HPP	CS207/SDLViewer.hpp	2;"	d
CS207_UTIL_HPP	CS207/Util.hpp	2;"	d
CXX	Examples/Makefile	/^CXX := $(shell which g++) -std=c++11$/;"	m
CXX	Makefile	/^CXX := $(shell which clang++) -std=c++11 -g$/;"	m
CentroidPredicate	subgraph.cpp	/^struct CentroidPredicate {$/;"	s	file:
Clock	CS207/Util.hpp	/^  Clock() : starttime_(clock::now()) {}$/;"	f	class:CS207::Clock
Clock	CS207/Util.hpp	/^class Clock {$/;"	c	namespace:CS207
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection< mat::banded_view<Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection< mat::indirect<Matrix> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection< vec::map_view<Functor, Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection< vec::vec_scal_aop_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<T const>$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::conj_view<Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::element_structure<Value> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::ell_matrix<Value, Parameters> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::hilbert_matrix<Value> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::imag_view<Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::implicit_dense<Functor> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::mat_mat_plus_expr<E1, E2> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::mat_mat_times_expr<E1, E2> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::mv_mv_plus_expr<E1, E2> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::negate_view<Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::ones_matrix<Value> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::outer_product_matrix<Vector1, Vector2> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::real_view<Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::rscaled_view<Coll,RScaling> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mat::scaled_view<Scaling, Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::mat::compressed2D<Value, Parameters> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::mat::coordinate2D<Value, Parameters> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::mat::dense2D<Value, Parameters> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::mat::morton_dense<Value, Mask, Parameters> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::mat::multi_vector<Vector> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::mat::multi_vector_range<Vector> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::mat::sparse_banded<Value, Parameters> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::mat::transposed_view<Matrix> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::mat_cvec_times_expr<Matrix, Vector> > $/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::vec::lazy_reduction<Vector, Functor> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::vec::mat_cvec_multiplier<Matrix, VectorIn> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::vec::sparse_vector<Value, Parameters> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::vec::vec_vec_aop_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::vec::vec_vec_ele_prod_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::vec::vec_vec_op_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<mtl::vec::vec_vec_pmop_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<std::vector<Value> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<traits::detail::sub_matrix_cursor<Matrix, Tag, level> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<vec::conj_view<Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<vec::imag_view<Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<vec::negate_view<Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<vec::real_view<Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<vec::rscaled_view<Coll,RScaling> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<vec::scaled_view<Scaling, Coll> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<vec::unrolled1<BSize, Vector> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct Collection<vec::vec_scal_asgn_expr<E1, E2> >$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^    struct Collection<mat::identity2D>$/;"	s	namespace:mtl
Collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^    struct Collection<mat::poisson2D_dirichlet>$/;"	s	namespace:mtl
Collection	mtl_test.cpp	/^struct Collection<IdentityMatrix> {$/;"	s	namespace:mtl	file:
Collection	poisson.cpp	/^struct Collection<GraphSymmetricMatrix> {$/;"	s	namespace:mtl	file:
Color	CS207/Color.hpp	/^  Color() $/;"	f	struct:CS207::Color
Color	CS207/Color.hpp	/^  Color(float r, float g, float b)$/;"	f	struct:CS207::Color
Color	CS207/Color.hpp	/^  Color(float v)$/;"	f	struct:CS207::Color
Color	CS207/Color.hpp	/^struct Color {$/;"	s	namespace:CS207
ColumnInMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^struct ColumnInMatrix$/;"	s	namespace:mtl
ColumnInMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^struct ColumnInMatrix<const mtl::mat::dense2D<Value, Parameters> > $/;"	s	namespace:mtl
ColumnInMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^struct ColumnInMatrix<mtl::mat::dense2D<Value, Parameters> > $/;"	s	namespace:mtl
ColumnTraversableMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct ColumnTraversableMatrix$/;"	s	namespace:mtl
Commutative	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct Commutative $/;"	s	namespace:algebra
CommutativeRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    CommutativeRing<Element>,$/;"	m	namespace:math
CommutativeRingWithIdentity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    CommutativeRingWithIdentity<Element>,$/;"	m	namespace:math
CommutativeSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : CommutativeSemiGroup<Operation, Element>, $/;"	m	namespace:math
ConjugateSymmetry	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    axiom ConjugateSymmetry(I inner, Vector v, Vector w)$/;"	f	struct:math::InnerProduct
Consistency	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    axiom Consistency(Vector v)$/;"	f	struct:math::HilbertSpace
ConstantSizeAlgebraicCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct ConstantSizeAlgebraicCollection$/;"	s	namespace:mtl
ConstantSizeCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct ConstantSizeCollection$/;"	s	namespace:mtl
ConstantSizeMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct ConstantSizeMatrix$/;"	s	namespace:mtl
ConstantSizeVector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/vector.hpp	/^    struct ConstantSizeVector$/;"	s	namespace:mtl
Constraint	mass_spring.cpp	/^	Constraint(Rule* s) {$/;"	f	struct:Constraint
Constraint	mass_spring.cpp	/^	Constraint(f_composition composite) : constraints_(composite) {$/;"	f	struct:Constraint
Constraint	mass_spring.cpp	/^struct Constraint {$/;"	s	file:
Control	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    double               Control[UMFPACK_CONTROL], Info[UMFPACK_INFO];$/;"	m	class:mtl::mat::umfpack::solver
Control	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    double              Control[UMFPACK_CONTROL], Info[UMFPACK_INFO];$/;"	m	class:mtl::mat::umfpack::solver
DEPSDIR	Examples/Makefile	/^DEPSDIR := $(shell mkdir -p .deps; echo .deps)$/;"	m
DEPSDIR	Makefile	/^DEPSDIR := $(shell mkdir -p .deps; echo .deps)$/;"	m
DEPSFILE	Examples/Makefile	/^DEPSFILE = $(DEPSDIR)\/$(notdir $*.d)$/;"	m
DEPSFILE	Makefile	/^DEPSFILE = $(DEPSDIR)\/$(notdir $*.d)$/;"	m
DEPSFLAGS	Examples/Makefile	/^DEPSFLAGS = -MD -MF $(DEPSFILE) -MP$/;"	m
DEPSFLAGS	Makefile	/^DEPSFLAGS = -MD -MF $(DEPSFILE) -MP$/;"	m
DIAGONAL	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^enum Status { UNMARKED, DIAGONAL, MARKED_CURRENT, REMOVED, NON_DIAGONAL };$/;"	e	enum:itl::pc::Status
DIM	BoundingBox.hpp	/^  static constexpr unsigned DIM = 3;$/;"	m	class:BoundingBox
DampingConstant	Examples/Metrics.hpp	/^typedef Unit<1, 0, -1, double>  DampingConstant;$/;"	t	namespace:Metrics
DampingForce	mass_spring.cpp	/^	DampingForce(scalar coeff) : coeff_(coeff) {$/;"	f	struct:DampingForce
DampingForce	mass_spring.cpp	/^struct DampingForce : public Stimulus {$/;"	s	file:
DefaultColor	CS207/SDLViewer.hpp	/^struct DefaultColor {$/;"	s	namespace:CS207
DefaultPosition	CS207/SDLViewer.hpp	/^struct DefaultPosition {$/;"	s	namespace:CS207
DegreeCompare	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^struct DegreeCompare {$/;"	s	namespace:itl::pc::heap
Distance	Examples/Metrics.hpp	/^typedef Unit<0, 1,  0, double>  Distance;$/;"	t	namespace:Metrics
Distance3	Examples/Metrics.hpp	/^typedef Unit<0, 1,  0, Point>   Distance3;$/;"	t	namespace:Metrics
Distributive	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct Distributive$/;"	s	namespace:algebra
DivisionRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^      : DivisionRing<AddOp, MultOp, Element>,$/;"	m	namespace:algebra
DivisionRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct DivisionRing$/;"	s	namespace:algebra
DivisionRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : DivisionRing<AddOp, MultOp, Element>,$/;"	m	namespace:math
DivisionRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : DivisionRing<AddOp, MultOp, Element>,$/;"	m	namespace:math
DivisionRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : DivisionRing<Element>,$/;"	m	namespace:math
DotProduct	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^struct DotProduct$/;"	s	namespace:math
ELEMENT_STRUCTURE_ALGORITHMS	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/element_structure_algorithms.hpp	3;"	d
Edge	Graph.hpp	/^  	Edge(const Graph* graph, Node node1, Node node2) {$/;"	f	class:Graph::Edge
Edge	Graph.hpp	/^  	Edge(const Graph* graph, uid_type uid1, uid_type uid2) : $/;"	f	class:Graph::Edge
Edge	Graph.hpp	/^    Edge() {$/;"	f	class:Graph::Edge
Edge	Graph.hpp	/^  class Edge : private totally_ordered<Edge> {$/;"	c	class:Graph
Edge	mass_spring.cpp	/^typedef typename GraphType::edge_type Edge;$/;"	t	file:
Edge	poisson.cpp	/^typedef typename GraphType::edge_type Edge;$/;"	t	file:
Edge	test_edges.cpp	/^typedef GraphType::edge_type Edge;$/;"	t	file:
EdgeData	mass_spring.cpp	/^struct EdgeData {$/;"	s	file:
EdgeData	poisson.cpp	/^typedef struct EdgeData {$/;"	s	file:
EdgeFluxCalculator	shallow_water.cpp	/^struct EdgeFluxCalculator {$/;"	s	file:
EdgeIterator	Graph.hpp	/^	EdgeIterator(const Graph* graph) {$/;"	f	class:Graph::EdgeIterator
EdgeIterator	Graph.hpp	/^	EdgeIterator(const Graph* graph, node_iterator n, $/;"	f	class:Graph::EdgeIterator
EdgeIterator	Graph.hpp	/^    EdgeIterator() {$/;"	f	class:Graph::EdgeIterator
EdgeIterator	Graph.hpp	/^  class EdgeIterator : private totally_ordered<EdgeIterator> {$/;"	c	class:Graph
FIRST_PRIME	primes.cpp	3;"	d	file:
Field	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct Field$/;"	s	namespace:algebra
FireBall	mass_spring.cpp	/^struct FireBall : public Rule {$/;"	s	file:
FloatingPointLike	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : std::FloatingPointLike<T>,$/;"	m	class:math::std
FloatingPointLike	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : std::FloatingPointLike<T>,$/;"	m	class:math::std
Force	Examples/Metrics.hpp	/^typedef Unit<1, 1, -2, double>  Force;$/;"	t	namespace:Metrics
Force	mass_spring.cpp	/^	Force(Stimulus* s) {$/;"	f	struct:Force
Force	mass_spring.cpp	/^	Force(f_composition composite) : forces_(composite) {$/;"	f	struct:Force
Force	mass_spring.cpp	/^struct Force {$/;"	s	file:
Force3	Examples/Metrics.hpp	/^typedef Unit<1, 1, -2, Point>   Force3;$/;"	t	namespace:Metrics
Functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^    typedef typename mtl::sfunctor::minus<typename V1::value_type, typename V2::value_type> Functor;$/;"	t	struct:mtl::traits::fast_multi_vector_expr
Functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^    typedef typename mtl::sfunctor::plus<typename V1::value_type, typename V2::value_type> Functor;$/;"	t	struct:mtl::traits::fast_multi_vector_expr
G	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    Matrix&    H, G;$/;"	m	class:mtl::mat::givens
G	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    Matrix     R, G, Q;$/;"	m	class:mtl::mat::qr_givens_solver
GLAS_GLAS_TAG_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/glas_tag.hpp	14;"	d
GLCamera	CS207/GLCamera.hpp	/^  GLCamera()$/;"	f	class:CS207::GLCamera
GLCamera	CS207/GLCamera.hpp	/^class GLCamera {$/;"	c	namespace:CS207
GenericCommutativeRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    GenericCommutativeRing<AddOp, MultOp, Element>,$/;"	m	namespace:math
GenericCommutativeRingWithIdentity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    GenericCommutativeRingWithIdentity<AddOp, MultOp, Element>,$/;"	m	namespace:math
GenericDivisionRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : GenericDivisionRing<AddOp, MultOp, Element>,$/;"	m	namespace:math
GenericRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : GenericRing<AddOp, MultOp, Element>,$/;"	m	namespace:math
GenericRingWithIdentity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : GenericRingWithIdentity<AddOp, MultOp, Element>,$/;"	m	namespace:math
GetKey	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^struct GetKey {$/;"	s	namespace:itl::pc::heap
GetLeftChild	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^struct GetLeftChild {$/;"	s	namespace:itl::pc::heap
GetParent	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^struct GetParent {$/;"	s	namespace:itl::pc::heap
GetRightChild	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^struct GetRightChild {$/;"	s	namespace:itl::pc::heap
Graph	Graph.hpp	/^  Graph() {$/;"	f	class:Graph
Graph	Graph.hpp	/^class Graph {$/;"	c
GraphSymmetricMatrix	poisson.cpp	/^		GraphSymmetricMatrix(const GraphType* graph) : g(graph) {$/;"	f	class:GraphSymmetricMatrix
GraphSymmetricMatrix	poisson.cpp	/^class GraphSymmetricMatrix {$/;"	c	file:
GraphType	mass_spring.cpp	/^typedef Graph<NodeData, EdgeData> GraphType;$/;"	t	file:
GraphType	poisson.cpp	/^typedef Graph<node_data,edge_data> GraphType;$/;"	t	file:
GraphType	test_edges.cpp	/^typedef Graph<int, int> GraphType;$/;"	t	file:
GraphType	test_nodes.cpp	/^typedef Graph<int, int> GraphType;$/;"	t	file:
GravityForce	mass_spring.cpp	/^struct GravityForce : public Stimulus {$/;"	s	file:
Group	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^      : Group<Operation, Element>, Commutative<Operation, Element>$/;"	m	namespace:algebra
Group	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct Group$/;"	s	namespace:algebra
Group	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : Group<Operation, Element>, Commutative<Operation, Element>$/;"	m	namespace:math
Group	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : Group<Operation, Element>, Commutative<Operation, Element>$/;"	m	namespace:math
Group	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : Group<Operation, Element>, $/;"	m	namespace:math
H	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    Matrix&    H, G;$/;"	m	class:mtl::mat::givens
HasDivide	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : std::HasDivide<Element>, MultiplicativeMonoid<Element>,$/;"	m	class:math::std
HasDivide	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : std::HasDivide<Element>, MultiplicativeMonoid<Element>,$/;"	m	class:math::std
HasMinus	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : std::HasMinus<Element>, AdditiveMonoid<Element>, $/;"	m	class:math::std
HasMinus	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : std::HasMinus<Element>, AdditiveMonoid<Element>, $/;"	m	class:math::std
HeapInformation	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	HeapInformation() :$/;"	f	struct:itl::pc::heap::HeapInformation
HeapInformation	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^struct HeapInformation {$/;"	s	namespace:itl::pc::heap
Hermitian	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    enum symmetry {general, symmetric, skew, Hermitian} my_symmetry;$/;"	e	enum:mtl::io::matrix_market_istream::symmetry
HilbertSpace	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^struct HilbertSpace$/;"	s	namespace:math
I	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    Matrix R, I;$/;"	m	class:mtl::mat::eigenvalue_solver
ITL_ARMIJO_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/armijo.hpp	14;"	d
ITL_BASIC_ITERATION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	14;"	d
ITL_BFGS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/bfgs.hpp	14;"	d
ITL_BICGSTAB_2_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_2.hpp	14;"	d
ITL_BICGSTAB_ELL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	17;"	d
ITL_BICGSTAB_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab.hpp	14;"	d
ITL_BICG_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicg.hpp	14;"	d
ITL_BROYDEN_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/broyden.hpp	14;"	d
ITL_CGS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cgs.hpp	14;"	d
ITL_CG_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cg.hpp	14;"	d
ITL_CYCLIC_ITERATION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	14;"	d
ITL_DFP_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/dfp.hpp	14;"	d
ITL_EXCEPTION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/utility/exception.hpp	14;"	d
ITL_FSM_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/fsm.hpp	14;"	d
ITL_GAUSS_SEIDEL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	14;"	d
ITL_GMRES_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	17;"	d
ITL_IDR_S_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	17;"	d
ITL_ITL_FWD_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/itl_fwd.hpp	14;"	d
ITL_ITL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/itl.hpp	14;"	d
ITL_JACOBI_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	14;"	d
ITL_JOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	14;"	d
ITL_NOISY_ITERATION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/noisy_iteration.hpp	14;"	d
ITL_PC_CONCAT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	14;"	d
ITL_PC_DIAGONAL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	14;"	d
ITL_PC_IC_0_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	14;"	d
ITL_PC_IDENTITY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	14;"	d
ITL_PC_ILUT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilut.hpp	14;"	d
ITL_PC_ILU_0_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu_0.hpp	14;"	d
ITL_PC_ILU_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	14;"	d
ITL_PC_IS_IDENTITY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/is_identity.hpp	14;"	d
ITL_PC_SOLVER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	14;"	d
ITL_PC_SUB_MATRIX_PC_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	14;"	d
ITL_PSB_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/psb.hpp	14;"	d
ITL_QMR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	17;"	d
ITL_QUASI_NEWTON_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/minimization/quasi_newton.hpp	14;"	d
ITL_REPEATED_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/repeated.hpp	14;"	d
ITL_REPEATING_SOLVER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/repeating_solver.hpp	14;"	d
ITL_SOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	14;"	d
ITL_SR1_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/sr1.hpp	14;"	d
ITL_TFQMR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	17;"	d
ITL_WOLF_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/wolf.hpp	14;"	d
IdentityMatrix	mtl_test.cpp	/^	IdentityMatrix(int m, int n) : m(m), n(n), s(m * n) {$/;"	f	struct:IdentityMatrix
IdentityMatrix	mtl_test.cpp	/^struct IdentityMatrix {$/;"	s	file:
IncidentIterator	Graph.hpp	/^	IncidentIterator(const Graph* graph, uid_type uid) {$/;"	f	class:Graph::IncidentIterator
IncidentIterator	Graph.hpp	/^	IncidentIterator(const Graph* graph, uid_type uid, adj_list_iterator pos) :$/;"	f	class:Graph::IncidentIterator
IncidentIterator	Graph.hpp	/^    IncidentIterator() {$/;"	f	class:Graph::IncidentIterator
IncidentIterator	Graph.hpp	/^  class IncidentIterator : private totally_ordered<IncidentIterator> {$/;"	c	class:Graph
Info	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    double               Control[UMFPACK_CONTROL], Info[UMFPACK_INFO];$/;"	m	class:mtl::mat::umfpack::solver
Info	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    double              Control[UMFPACK_CONTROL], Info[UMFPACK_INFO];$/;"	m	class:mtl::mat::umfpack::solver
InnerProduct	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^  : InnerProduct<I, Vector, Scalar>,$/;"	m	namespace:math
InnerProduct	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^struct InnerProduct$/;"	s	namespace:math
InsertableMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct InsertableMatrix$/;"	s	namespace:mtl
Inversion	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct Inversion$/;"	s	namespace:algebra
IsRemoved	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	IsRemoved(const StatusVector& status) : m_status(status) { }$/;"	f	struct:itl::pc::IsRemoved
IsRemoved	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^struct IsRemoved {$/;"	s	namespace:itl::pc
IteratableSubMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct IteratableSubMatrix$/;"	s	namespace:mtl
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicg.hpp	/^    Preconditioner        L;$/;"	m	class:itl::bicg_solver
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab.hpp	/^    Preconditioner        L;$/;"	m	class:itl::bicgstab_solver
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_2.hpp	/^    Preconditioner        L;$/;"	m	class:itl::bicgstab_2_solver
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^    Preconditioner        L;$/;"	m	class:itl::bicgstab_ell_solver
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cg.hpp	/^    Preconditioner        L;$/;"	m	class:itl::cg_solver
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cgs.hpp	/^    Preconditioner        L;$/;"	m	class:itl::cgs_solver
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^    Preconditioner        L;$/;"	m	class:itl::gmres_solver
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^    Preconditioner        L;$/;"	m	class:itl::idr_s_solver
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^    Preconditioner        L;$/;"	m	class:itl::qmr_solver
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^    Preconditioner        L;$/;"	m	class:itl::tfqmr_solver
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    L_type                       L;$/;"	m	class:itl::pc::ic_0
L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    L_type                      L;$/;"	m	class:itl::pc::ilu
LA_ALGEBRAIC_CONCEPTS_DOC_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	14;"	d
LA_CONCEPTS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	15;"	d
LA_ETS_CONCEPTS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/ets_concepts.hpp	4;"	d
LA_VECTOR_CONCEPTS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	15;"	d
LU	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    LU_type                        LU;$/;"	m	class:itl::pc::ilu
LU	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^    matrix_type      LU;$/;"	m	class:mtl::mat::lu_solver
LU_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef Matrix                                        LU_type;$/;"	t	class:itl::pc::ilu
L_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef U_type                                                   L_type;$/;"	t	class:itl::pc::ic_0
L_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef typename mtl::mat::transposed_view<U_type>            L_type;$/;"	t	class:itl::pc::ic_0
L_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef mtl::mat::compressed2D<value_type, para>                     L_type;$/;"	t	class:itl::pc::ilu
MAP	poisson.cpp	/^		typedef typename std::map<typename GraphType::node_type, unsigned> MAP;$/;"	t	class:itl::visual_iteration	file:
MARKED_CURRENT	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^enum Status { UNMARKED, DIAGONAL, MARKED_CURRENT, REMOVED, NON_DIAGONAL };$/;"	e	enum:itl::pc::Status
MATH_ACCUMULATE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/accumulate.hpp	15;"	d
MATH_CONCEPT_MAPS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concept_maps.hpp	4;"	d
MATH_IDENTITY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	15;"	d
MATH_INTRINSIC_CONCEPT_MAPS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/intrinsic_concept_maps.hpp	14;"	d
MATH_INVERSE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/inverse.hpp	15;"	d
MATH_IS_INVERTIBLE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	15;"	d
MATH_LINEAR_OPERATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/linear_operator.hpp	14;"	d
MATH_OPERATORS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	15;"	d
MATH_POWER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/power.hpp	14;"	d
META_MATH_ABS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/abs.hpp	14;"	d
META_MATH_IS_POWER_OF_2_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_power_of_2.hpp	14;"	d
META_MATH_IS_PRIME_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	14;"	d
META_MATH_LEAST_SIGNIFICANT_ONE_BIT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/least_significant_one_bit.hpp	14;"	d
META_MATH_LOG_2_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/log_2.hpp	14;"	d
META_MATH_LOOP1_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop1.hpp	14;"	d
META_MATH_LOOP2_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	14;"	d
META_MATH_LOOP3_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	14;"	d
META_MATH_LOOP_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop.hpp	14;"	d
META_MATH_MAX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/max.hpp	14;"	d
META_MATH_MIN_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/min.hpp	14;"	d
META_MATH_POWER_OF_2_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/power_of_2.hpp	14;"	d
META_MATH_SQRT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/sqrt.hpp	14;"	d
MM_LOAD1U_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1392;"	d
MM_LOAD1U_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1550;"	d
MM_LOAD1U_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	693;"	d
MM_LOAD1U_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	851;"	d
MM_LOAD1_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1387;"	d
MM_LOAD1_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1549;"	d
MM_LOAD1_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	688;"	d
MM_LOAD1_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	850;"	d
MM_MUL_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1397;"	d
MM_MUL_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	1551;"	d
MM_MUL_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	698;"	d
MM_MUL_PD	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	852;"	d
MTL_ADJOINT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjoint.hpp	14;"	d
MTL_ALIGNMENT	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	40;"	d
MTL_ALIGNMENT_LIMIT	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	35;"	d
MTL_ALL_MAT_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/all_mat_expr.hpp	14;"	d
MTL_ALL_VEC_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/all_vec_expr.hpp	14;"	d
MTL_ARPREC_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/arprec.hpp	14;"	d
MTL_ASHAPE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	14;"	d
MTL_ASSIGN_EACH_NONZERO_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_each_nonzero.hpp	14;"	d
MTL_ASSIGN_MODE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	14;"	d
MTL_BASE_CASE_CAST_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_cast.hpp	14;"	d
MTL_BASE_CASE_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_matrix.hpp	14;"	d
MTL_BASE_CASE_TEST_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	14;"	d
MTL_BASE_CURSOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	14;"	d
MTL_BASE_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	14;"	d
MTL_BASE_SUB_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	14;"	d
MTL_BINARY_HEAP_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	20;"	d
MTL_BIN_OP_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/bin_op_expr.hpp	14;"	d
MTL_BIT_MASKING_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	14;"	d
MTL_BLAS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/blas.hpp	15;"	d
MTL_BLAS_NAME	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/blas.hpp	34;"	d
MTL_CATEGORY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	14;"	d
MTL_CHOLESKY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	14;"	d
MTL_CLONE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/clone.hpp	14;"	d
MTL_COLLECTION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	14;"	d
MTL_COLUMN_IN_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	14;"	d
MTL_COMMON_INCLUDES_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/common_include.hpp	14;"	d
MTL_COMPARATORS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/comparators.hpp	25;"	d
MTL_COMPLEXITY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	14;"	d
MTL_COMPRESSED2D_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	14;"	d
MTL_COMPUTE_FACTORS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	14;"	d
MTL_CONFIG_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	14;"	d
MTL_CONJ_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	14;"	d
MTL_CONTIGUOUS_MEMORY_BLOCK_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	14;"	d
MTL_COORDINATE2D_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	3;"	d
MTL_COPYSIGN_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copysign.hpp	14;"	d
MTL_COPY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	14;"	d
MTL_CROP_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/crop.hpp	14;"	d
MTL_CRTP_BASE_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	14;"	d
MTL_CRTP_BASE_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	14;"	d
MTL_CURSOR_PSEUDO_DOT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	14;"	d
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void realloc(std::size_t MTL_DEBUG_ARG(s)) $/;"	f	struct:mtl::detail::contiguous_memory_block
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void set_size(std::size_t MTL_DEBUG_ARG(size))$/;"	f	struct:mtl::detail::size_helper
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    void check_dim(size_type MTL_DEBUG_ARG(num_rows), size_type MTL_DEBUG_ARG(num_cols)) const$/;"	f	struct:mtl::mat::base_matrix
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^		      size_type MTL_DEBUG_ARG(begin_c), size_type MTL_DEBUG_ARG(end_c) ) const$/;"	f	struct:mtl::mat::base_sub_matrix
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    void check_dim(size_type MTL_DEBUG_ARG(num_rows), size_type MTL_DEBUG_ARG(num_cols) ) const$/;"	f	struct:mtl::mat::base_sub_matrix
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    void check(size_type MTL_DEBUG_ARG(r), size_type MTL_DEBUG_ARG(c)) const$/;"	f	class:mtl::mat::sparse_banded
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	22;"	d
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	void check(size_type MTL_DEBUG_ARG(i)) const$/;"	f	class:mtl::iset
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    void check(const zip_it& MTL_DEBUG_ARG(other)) const { assert(a == other.a); assert(v == other.v); }$/;"	f	struct:mtl::utility::zip_it
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    void check(const zip_ref& MTL_DEBUG_ARG(other)) const { assert(a == other.a); assert(v == other.v); }$/;"	f	struct:mtl::utility::zip_ref
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    void check_dim( size_type MTL_DEBUG_ARG(s) ) const$/;"	f	class:mtl::vec::dense_vector
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    void check_index( size_type MTL_DEBUG_ARG(i) ) const$/;"	f	class:mtl::vec::dense_vector
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    void static_check( size_type MTL_DEBUG_ARG(s) ) const$/;"	f	class:mtl::vec::dense_vector
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    void check(size_type MTL_DEBUG_ARG(j)) const$/;"	f	class:mtl::vec::sparse_vector
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    void change_dim(size_type MTL_DEBUG_ARG(n)) { MTL_DEBUG_THROW_IF(my_size != n, incompatible_size()); }$/;"	f	class:mtl::vec::strided_vector_ref
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    void check_dim( size_type MTL_DEBUG_ARG(s) ) const$/;"	f	class:mtl::vec::strided_vector_ref
MTL_DEBUG_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    void check_index( size_type MTL_DEBUG_ARG(i) ) const$/;"	f	class:mtl::vec::strided_vector_ref
MTL_DEBUG_THROW_IF	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	37;"	d
MTL_DENSE2D_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	14;"	d
MTL_DENSE_EL_CURSOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	14;"	d
MTL_DENSE_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	17;"	d
MTL_DETAIL_ADJUST_CURSOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjust_cursor.hpp	14;"	d
MTL_DETAIL_RANGE_GENERATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	14;"	d
MTL_DIAGONAL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/diagonal.hpp	14;"	d
MTL_DIAGONAL_SETUP_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/diagonal_setup.hpp	14;"	d
MTL_DILATED_INT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	16;"	d
MTL_DILATION_TABLE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilation_table.hpp	27;"	d
MTL_DIMENSIONS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	14;"	d
MTL_DIMENSION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	14;"	d
MTL_DIM_SPLITTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	14;"	d
MTL_DIST_BLOCK_DIAGONAL2D_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	3;"	d
MTL_DIVIDE_BY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	10;"	d
MTL_DIVIDE_BY_INPLACE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by_inplace.hpp	10;"	d
MTL_DIV_RESULT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/div_result.hpp	10;"	d
MTL_DMAT_DMAT_MULT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	14;"	d
MTL_DMAT_DMAT_MULT_INNER_UNROLL	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	272;"	d
MTL_DMAT_DMAT_MULT_TILING1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	264;"	d
MTL_DMAT_DMAT_MULT_TILING2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	268;"	d
MTL_DOT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	14;"	d
MTL_ELEMENT_ARRAY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_array.hpp	14;"	d
MTL_ELEMENT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	17;"	d
MTL_ELEMENT_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_matrix.hpp	14;"	d
MTL_ELEMENT_STRUCTURE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	18;"	d
MTL_ENABLE_IF_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/enable_if.hpp	14;"	d
MTL_ENTRY1D_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry1D.hpp	14;"	d
MTL_ENTRY_SIMILAR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry_similar.hpp	14;"	d
MTL_EVALUATE_LAZY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/evaluate_lazy.hpp	14;"	d
MTL_FILL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fill.hpp	14;"	d
MTL_FOR_EACH_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/for_each.hpp	14;"	d
MTL_FOR_EACH_NONZERO_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/look_at_each_nonzero.hpp	14;"	d
MTL_FROBENIUS_NORM_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/frobenius_norm.hpp	14;"	d
MTL_FUSED_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	14;"	d
MTL_FUSED_INDEX_EVALUATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	14;"	d
MTL_FUSE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fuse.hpp	14;"	d
MTL_HERMITIAN_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hermitian.hpp	14;"	d
MTL_HERMITIAN_VIEW_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	14;"	d
MTL_HESSIAN_MATRIX_UTILITIES_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hessian_setup.hpp	14;"	d
MTL_IMAG_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	14;"	d
MTL_IMF_ALGORITHMS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	20;"	d
MTL_IMF_PRECONDITIONER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	26;"	d
MTL_INDEX_EVALUATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/index_evaluator.hpp	14;"	d
MTL_INDEX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	14;"	d
MTL_INFINITY_NORM_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/infinity_norm.hpp	14;"	d
MTL_INTERFACES_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interfaces.hpp	14;"	d
MTL_INVERT_DIAGONAL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/invert_diagonal.hpp	14;"	d
MTL_IO_FUNCTOR_SYMBOL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	14;"	d
MTL_IO_MATRIX_FILE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_file.hpp	14;"	d
MTL_IO_MATRIX_MARKET_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	14;"	d
MTL_IO_PATH_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/path.hpp	14;"	d
MTL_IO_READ_FILTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_filter.hpp	14;"	d
MTL_IO_WRITE_AST_DISPATCH_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	14;"	d
MTL_IO_WRITE_AST_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast.hpp	14;"	d
MTL_IRANGE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	14;"	d
MTL_ISET_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	14;"	d
MTL_IS_NEGATIVE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/is_negative.hpp	14;"	d
MTL_IS_ROW_MAJOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	14;"	d
MTL_ITERATOR_ADAPTOR_1D_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	14;"	d
MTL_ITERATOR_ADAPTOR_DETAIL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	14;"	d
MTL_ITERATOR_ADAPTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	14;"	d
MTL_ITL_RELAXATION_PARAMETER_HPP	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/relaxation_parameter.hpp	9;"	d
MTL_LAPACK_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/lapack.hpp	14;"	d
MTL_LAPLACIAN_SETUP_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/laplacian_setup.hpp	14;"	d
MTL_LAZY_ASSIGN_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy_assign.hpp	14;"	d
MTL_LAZY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy.hpp	14;"	d
MTL_LEFT_SCALE_INPLACE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/left_scale_inplace.hpp	14;"	d
MTL_LOWER_TRISOLVE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	14;"	d
MTL_MAGNITUDE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/magnitude.hpp	14;"	d
MTL_MAKE_COPY_OR_REFERENCE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	14;"	d
MTL_MAKE_TAG_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_tag_vector.hpp	14;"	d
MTL_MAP_VIEW_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	14;"	d
MTL_MASKED_DILATION_TABLES_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	14;"	d
MTL_MATRICES_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrices.hpp	14;"	d
MTL_MATRIX_ALGORITHMS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/matrix_algorithms.hpp	18;"	d
MTL_MATRIX_BANDED_VIEW_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	14;"	d
MTL_MATRIX_BANDS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/bands.hpp	14;"	d
MTL_MATRIX_BRACKETS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	14;"	d
MTL_MATRIX_CONCEPT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	14;"	d
MTL_MATRIX_CUPPEN_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cuppen.hpp	16;"	d
MTL_MATRIX_EIGENVALUE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	16;"	d
MTL_MATRIX_EIGENVALUE_SYMMETRIC_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue_symmetric.hpp	16;"	d
MTL_MATRIX_ELL_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	14;"	d
MTL_MATRIX_GIVENS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	16;"	d
MTL_MATRIX_HESSENBERG_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hessenberg.hpp	16;"	d
MTL_MATRIX_HOUSEHOLDER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/householder.hpp	16;"	d
MTL_MATRIX_IDENTITY2D_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	14;"	d
MTL_MATRIX_IDENTITY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity.hpp	14;"	d
MTL_MATRIX_IMPLICIT_DENSE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	14;"	d
MTL_MATRIX_INDIRECT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	14;"	d
MTL_MATRIX_INSERTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	14;"	d
MTL_MATRIX_INV_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	14;"	d
MTL_MATRIX_LOWER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/lower.hpp	14;"	d
MTL_MATRIX_LU_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	16;"	d
MTL_MATRIX_MAKE_FAST_MULTI_VECTOR_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/make_fast_multi_vector_expr.hpp	14;"	d
MTL_MATRIX_MAPPED_INSERTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	14;"	d
MTL_MATRIX_MAT_MAT_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_asgn_expr.hpp	14;"	d
MTL_MATRIX_MAX_ABS_POS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_abs_pos.hpp	14;"	d
MTL_MATRIX_MAX_POS	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	14;"	d
MTL_MATRIX_MERGE_COMPLEX_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/merge_complex_matrix.hpp	14;"	d
MTL_MATRIX_MULTI_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	14;"	d
MTL_MATRIX_MULTI_VECTOR_RANGE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	14;"	d
MTL_MATRIX_OPERATORS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/operators.hpp	14;"	d
MTL_MATRIX_PARAMETERS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/parameter.hpp	14;"	d
MTL_MATRIX_PERMUTATION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/permutation.hpp	14;"	d
MTL_MATRIX_POISSON2D_DIRICHLET_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	14;"	d
MTL_MATRIX_QR_GIVENS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	16;"	d
MTL_MATRIX_QR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr.hpp	16;"	d
MTL_MATRIX_READ_EL_MATRIX	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_el_matrix.hpp	16;"	d
MTL_MATRIX_RECURATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	14;"	d
MTL_MATRIX_REORDER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder.hpp	14;"	d
MTL_MATRIX_REORDER_MATRIX_ROWS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder_matrix_rows.hpp	14;"	d
MTL_MATRIX_REORDER_REF_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder_ref.hpp	14;"	d
MTL_MATRIX_SHIFTED_INSERTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	14;"	d
MTL_MATRIX_SOLVE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/solve.hpp	14;"	d
MTL_MATRIX_SPARSE_BANDED_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	14;"	d
MTL_MATRIX_SPLIT_COMPLEX_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/split_complex_matrix.hpp	14;"	d
MTL_MATRIX_STRICT_LOWER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_lower.hpp	14;"	d
MTL_MATRIX_STRICT_UPPER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_upper.hpp	14;"	d
MTL_MATRIX_SVD_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/svd.hpp	16;"	d
MTL_MATRIX_SWAP_ROW	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/swap_row.hpp	14;"	d
MTL_MATRIX_TYPE_GENERATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	14;"	d
MTL_MATRIX_UMFPACK_SOLVE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	14;"	d
MTL_MATRIX_UPPER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/upper.hpp	14;"	d
MTL_MATRIX_VIEW_REF_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/view_ref.hpp	14;"	d
MTL_MAT_CVEC_TIMES_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_cvec_times_expr.hpp	14;"	d
MTL_MAT_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_expr.hpp	14;"	d
MTL_MAT_MAT_ELE_TIMES_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	14;"	d
MTL_MAT_MAT_MINUS_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	14;"	d
MTL_MAT_MAT_OP_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	14;"	d
MTL_MAT_MAT_PLUS_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	14;"	d
MTL_MAT_MAT_TIMES_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	14;"	d
MTL_MAT_NEGATE_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_negate_expr.hpp	14;"	d
MTL_MAT_VEC_MULT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	14;"	d
MTL_MAX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max.hpp	14;"	d
MTL_MAX_OF_SUMS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_of_sums.hpp	14;"	d
MTL_MAYBE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	14;"	d
MTL_MINIMAL_INCREASE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/minimal_increase.hpp	14;"	d
MTL_MIN_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min.hpp	14;"	d
MTL_MIN_POS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	14;"	d
MTL_MISC_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/misc.hpp	16;"	d
MTL_MORTON_DENSE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	14;"	d
MTL_MTL_CONDITIONAL_FWD_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_conditional_fwd.hpp	14;"	d
MTL_MTL_EXCEPTION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	14;"	d
MTL_MTL_FWD_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	14;"	d
MTL_MTL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl.hpp	14;"	d
MTL_MULTI_ACTION_BLOCK_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	14;"	d
MTL_MULTI_TMP_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	14;"	d
MTL_MULT_ASSIGN_MODE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	14;"	d
MTL_MULT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	14;"	d
MTL_MULT_RESULT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	14;"	d
MTL_MULT_SPECIALIZE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_specialize.hpp	14;"	d
MTL_NEW_ALGEBRAIC_CONCEPTS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	14;"	d
MTL_NEW_ALGEBRAIC_CONCEPTS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	14;"	d
MTL_NORMS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/norms.hpp	14;"	d
MTL_NO_OP_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/no_op.hpp	14;"	d
MTL_NUM_COLS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	14;"	d
MTL_NUM_ROWS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	14;"	d
MTL_ONES_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/ones.hpp	14;"	d
MTL_ONE_NORM_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/one_norm.hpp	14;"	d
MTL_OPERATIONS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operations.hpp	14;"	d
MTL_OPERATION_EXTENDED_COMPLEX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	14;"	d
MTL_OPERATORS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	14;"	d
MTL_OPTERON_MATRIX_MULT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	17;"	d
MTL_ORTH_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	14;"	d
MTL_PAPI_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	14;"	d
MTL_PREDEFINED_MASKS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	14;"	d
MTL_PRINT_COMPLEXITY	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	173;"	d
MTL_PRINT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	14;"	d
MTL_PRINT_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_matrix.hpp	14;"	d
MTL_PRINT_SIZE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_size.hpp	14;"	d
MTL_PRINT_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_vector.hpp	14;"	d
MTL_PRODUCT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/product.hpp	14;"	d
MTL_PROPERTY_MAP_IMPL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	14;"	d
MTL_PROPERTY_MAP_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	14;"	d
MTL_PUSH_BACK_COMMA_INSERTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/push_back_comma_inserter.hpp	14;"	d
MTL_RANDOM_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	14;"	d
MTL_RANGE_GENERATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	14;"	d
MTL_RANK_ONE_UPDATE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rank_one_update.hpp	14;"	d
MTL_RANK_TWO_UPDATE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rank_two_update.hpp	14;"	d
MTL_RAW_COPY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/raw_copy.hpp	14;"	d
MTL_REAL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	14;"	d
MTL_RECURSION_UTILITIES_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/utility.hpp	14;"	d
MTL_REDUCTION_FUNCTORS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	14;"	d
MTL_REDUCTION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	14;"	d
MTL_RESOURCE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/resource.hpp	14;"	d
MTL_RIGHT_SCALE_INPLACE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/right_scale_inplace.hpp	14;"	d
MTL_ROW_IN_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	14;"	d
MTL_ROW_MAT_CVEC_INDEX_EVALUATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	14;"	d
MTL_RSCALE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	21;"	d
MTL_RVEC_MAT_TIMES_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/rvec_mat_times_expr.hpp	14;"	d
MTL_SCALE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	14;"	d
MTL_SET_TO_0_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	14;"	d
MTL_SFUNCTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	14;"	d
MTL_SHIFT_BLOCKS_DETAIL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/shift_block_detail.hpp	14;"	d
MTL_SHIFT_BLOCKS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/shift_block.hpp	14;"	d
MTL_SHRINK_STL_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/shrink_stl_vector.hpp	14;"	d
MTL_SIGNUM_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/signum.hpp	14;"	d
MTL_SIMPLIFY_BASE_CASE_MATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/simplify_base_case_matrix.hpp	14;"	d
MTL_SIZE1D_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size1D.hpp	14;"	d
MTL_SIZE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	14;"	d
MTL_SMAT_DMAT_MULT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	14;"	d
MTL_SMAT_DMAT_MULT_TILING1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	113;"	d
MTL_SMAT_SMAT_MULT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_smat_mult.hpp	14;"	d
MTL_SORTING_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sorting.hpp	22;"	d
MTL_SORT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	14;"	d
MTL_SQUARED_ABS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/squared_abs.hpp	14;"	d
MTL_SRANGE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	14;"	d
MTL_STATIC_ASSERT	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_assert.hpp	21;"	d
MTL_STATIC_ASSERT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_assert.hpp	14;"	d
MTL_STATIC_FUNCTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/static_functor.hpp	14;"	d
MTL_STATIC_NUM_COLS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	14;"	d
MTL_STATIC_NUM_ROWS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	14;"	d
MTL_STATIC_SIZE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_size.hpp	14;"	d
MTL_STATIC_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	14;"	d
MTL_STD_CONCEPT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/std_concept.hpp	14;"	d
MTL_STD_OUTPUT_OPERATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/std_output_operator.hpp	14;"	d
MTL_STRIDED_BASE_CURSOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	14;"	d
MTL_STRIDED_DENSE_EL_CURSOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	14;"	d
MTL_STRIDED_DENSE_EL_ITERATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	14;"	d
MTL_STRIDED_VECTOR_REF_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	14;"	d
MTL_STRING_TO_ENUM_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/string_to_enum.hpp	14;"	d
MTL_SUBMATRIX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sub_matrix.hpp	14;"	d
MTL_SUM_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sum.hpp	14;"	d
MTL_TAG_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	14;"	d
MTL_TEST_OSTREAM_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	14;"	d
MTL_TFUNCTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor.hpp	14;"	d
MTL_TFUNCTOR_TFUNCTOR_MIXED_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	14;"	d
MTL_THROW	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	62;"	d
MTL_THROW_ARG	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	28;"	d
MTL_THROW_IF	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	49;"	d
MTL_TRACE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trace.hpp	14;"	d
MTL_TRAITS_ADD_CONST_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	14;"	d
MTL_TRAITS_ALGEBRAIC_CATEGORY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/algebraic_category.hpp	14;"	d
MTL_TRAITS_COMPOSE_VIEW_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	14;"	d
MTL_TRAITS_COPY_EXPRESSION_CONST_REF_CONTAINER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	14;"	d
MTL_TRAITS_DIFFERENT_NON_COMPLEX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/different_non_complex.hpp	14;"	d
MTL_TRAITS_DOMAIN_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/domain.hpp	14;"	d
MTL_TRAITS_EVAL_DENSE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	14;"	d
MTL_TRAITS_EVAL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	14;"	d
MTL_TRAITS_EXTENDED_COMPLEX_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/extended_complex.hpp	14;"	d
MTL_TRAITS_FAST_MULTI_VECTOR_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	14;"	d
MTL_TRAITS_FLATCAT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	14;"	d
MTL_TRAITS_GRADIENT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/gradient.hpp	14;"	d
MTL_TRAITS_INDEX_EVALUATABLE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	14;"	d
MTL_TRAITS_INDEX_EVALUATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluator.hpp	14;"	d
MTL_TRAITS_IS_COMPOSABLE_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_composable_vector.hpp	14;"	d
MTL_TRAITS_IS_DISTRIBUTED_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_distributed.hpp	14;"	d
MTL_TRAITS_IS_LAZY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_lazy.hpp	14;"	d
MTL_TRAITS_IS_MULTI_VECTOR_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	14;"	d
MTL_TRAITS_IS_STATIC_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_static.hpp	14;"	d
MTL_TRAITS_IS_VECTOR_REDUCTION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_vector_reduction.hpp	14;"	d
MTL_TRAITS_IS_WHAT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	14;"	d
MTL_TRAITS_LINEAR_OPERATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/linear_operator.hpp	14;"	d
MTL_TRAITS_LU_MATRIX_TYPE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/lu_matrix_type.hpp	14;"	d
MTL_TRAITS_OMP_SIZE_TYPE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/omp_size_type.hpp	14;"	d
MTL_TRAITS_PARAMETERS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	14;"	d
MTL_TRAITS_POS_TYPE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/pos_type.hpp	14;"	d
MTL_TRAITS_RANGE_WRAPPER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	14;"	d
MTL_TRAITS_ROOT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	14;"	d
MTL_TRAITS_TRANSPOSED_MATRIX_TYPE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	14;"	d
MTL_TRAITS_TRANSPOSED_ORIENTATION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_orientation.hpp	14;"	d
MTL_TRAITS_TRUE_COPY_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/true_copy.hpp	14;"	d
MTL_TRAITS_UNROLL_SIZE1_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/unroll_size1.hpp	14;"	d
MTL_TRAITS_UPDATER_TO_ASSIGNER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/updater_to_assigner.hpp	14;"	d
MTL_TRAITS_VIEWED_COLLECTION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/viewed_collection.hpp	14;"	d
MTL_TRAITS_VIEW_CODE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	14;"	d
MTL_TRAITS_WITH_UNROLL1_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/with_unroll1.hpp	14;"	d
MTL_TRANSPOSED_VIEW_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	14;"	d
MTL_TRANS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	14;"	d
MTL_TRIVIAL_INSERTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	14;"	d
MTL_TWO_NORM_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/two_norm.hpp	14;"	d
MTL_TYPES_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/types.hpp	14;"	d
MTL_TYPE_PARAMETER_COMMON_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	14;"	d
MTL_TYPE_PARAMETER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	14;"	d
MTL_TYPE_PARAMETER_LOCAL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_local.hpp	14;"	d
MTL_UNARY_DOT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/unary_dot.hpp	14;"	d
MTL_UNROLL_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/unroll.hpp	14;"	d
MTL_UPDATE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	14;"	d
MTL_UPPER_TRISOLVE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	14;"	d
MTL_UTILITY_SOMETIMES_DATA_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/sometimes_data.hpp	14;"	d
MTL_VECTORS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vectors.hpp	14;"	d
MTL_VECTOR_ASSIGNER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assigner.hpp	14;"	d
MTL_VECTOR_CONCEPTS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/vector.hpp	14;"	d
MTL_VECTOR_CROSS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cross.hpp	14;"	d
MTL_VECTOR_DECREMENTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/decrementer.hpp	14;"	d
MTL_VECTOR_DOT_INDEX_EVALUATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	14;"	d
MTL_VECTOR_EXTRACTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	14;"	d
MTL_VECTOR_INCREMENTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/incrementer.hpp	14;"	d
MTL_VECTOR_INSERTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	14;"	d
MTL_VECTOR_IOTA_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/iota.hpp	14;"	d
MTL_VECTOR_LAZY_REDUCTION_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/lazy_reduction.hpp	14;"	d
MTL_VECTOR_MAKE_SPARSE_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	14;"	d
MTL_VECTOR_MAPPED_INSERTER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	14;"	d
MTL_VECTOR_MAP_VIEW_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	14;"	d
MTL_VECTOR_MAT_CVEC_MULTIPLIER_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	14;"	d
MTL_VECTOR_MERGE_COMPLEX_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/merge_complex_vector.hpp	14;"	d
MTL_VECTOR_PARAMETERS_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/parameter.hpp	14;"	d
MTL_VECTOR_REDUCTION_INDEX_EVALUATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	14;"	d
MTL_VECTOR_RVEC_MAT_MULT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	14;"	d
MTL_VECTOR_SECULAR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	16;"	d
MTL_VECTOR_SPARSE_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	14;"	d
MTL_VECTOR_SPLIT_COMPLEX_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/split_complex_vector.hpp	14;"	d
MTL_VECTOR_TYPE_GENERATOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	14;"	d
MTL_VECTOR_UNIT_VECTOR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unit_vector.hpp	14;"	d
MTL_VECTOR_UNROLLED1_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	14;"	d
MTL_VECTOR_VEC_CONST_REF_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	14;"	d
MTL_VECTOR_VEC_SCAL_MINUS_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_minus_asgn_expr.hpp	14;"	d
MTL_VECTOR_VEC_SCAL_MIXED_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	14;"	d
MTL_VECTOR_VEC_SCAL_PLUS_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_plus_asgn_expr.hpp	14;"	d
MTL_VECTOR_VEC_VEC_ELE_PROD_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_ele_prod_expr.hpp	14;"	d
MTL_VECTOR_VEC_VEC_ELE_QUOT_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_ele_quot_expr.hpp	14;"	d
MTL_VECTOR_VEC_VEC_PMOP_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	14;"	d
MTL_VEC_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_expr.hpp	14;"	d
MTL_VEC_NEGATE_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_negate_expr.hpp	14;"	d
MTL_VEC_SCAL_AOP_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	14;"	d
MTL_VEC_SCAL_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_asgn_expr.hpp	15;"	d
MTL_VEC_SCAL_DIV_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_div_asgn_expr.hpp	10;"	d
MTL_VEC_SCAL_TIMES_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_times_asgn_expr.hpp	15;"	d
MTL_VEC_VEC_AOP_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	14;"	d
MTL_VEC_VEC_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	17;"	d
MTL_VEC_VEC_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_asgn_expr.hpp	17;"	d
MTL_VEC_VEC_DIV_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_div_asgn_expr.hpp	17;"	d
MTL_VEC_VEC_MINUS_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_minus_asgn_expr.hpp	17;"	d
MTL_VEC_VEC_MINUS_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_minus_expr.hpp	17;"	d
MTL_VEC_VEC_OP_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	17;"	d
MTL_VEC_VEC_PLUS_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_plus_asgn_expr.hpp	17;"	d
MTL_VEC_VEC_PLUS_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_plus_expr.hpp	17;"	d
MTL_VEC_VEC_TIMES_ASGN_EXPR_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_times_asgn_expr.hpp	17;"	d
MTL_VPT_LEVEL	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/vpt.hpp	32;"	d
MTL_VPT_VPT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/vpt.hpp	14;"	d
MTL_WRAPPED_OBJECT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/wrapped_object.hpp	14;"	d
MTL_ZIPPED_SORT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	14;"	d
MTL__OPERATION_COMPUTE_SUMMAND_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	14;"	d
Magma	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : Magma<Operation, Element>, $/;"	m	namespace:math
Magnitude	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^struct Magnitude$/;"	s	namespace:math
Magnitude	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^struct Magnitude<std::complex<T> >$/;"	s	namespace:math
Magnitude	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/arprec.hpp	/^    struct Magnitude<mp_complex>$/;"	s	namespace:mtl
MajorTraversableMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct MajorTraversableMatrix$/;"	s	namespace:mtl
Mass	Examples/Metrics.hpp	/^typedef Unit<1, 0,  0, double>  Mass;$/;"	t	namespace:Metrics
MassSpringForce	mass_spring.cpp	/^struct MassSpringForce : public Stimulus {$/;"	s	file:
MatAdd	Examples/expr_template.cpp	/^  MatAdd(const MatExpr<E1>& a, const MatExpr<E2>& b)$/;"	f	struct:MatAdd
MatAdd	Examples/expr_template.cpp	/^struct MatAdd : public MatExpr<MatAdd<E1, E2>> {$/;"	s	file:
MatExpr	Examples/expr_template.cpp	/^struct MatExpr {$/;"	s	file:
MatMult	Examples/expr_template.cpp	/^  MatMult(const MatExpr<E1>& a, const MatExpr<E2>& b)$/;"	f	struct:MatMult
MatMult	Examples/expr_template.cpp	/^struct MatMult : public MatExpr<MatMult<E1, E2>> {$/;"	s	file:
MatScale	Examples/expr_template.cpp	/^  MatScale(double b, const MatExpr<E1>& a)$/;"	f	struct:MatScale
MatScale	Examples/expr_template.cpp	/^struct MatScale : public MatExpr<MatScale<E1>> {$/;"	s	file:
Matrix	Examples/expr_template.cpp	/^  Matrix(const MatExpr<E>& m)$/;"	f	struct:Matrix
Matrix	Examples/expr_template.cpp	/^  Matrix(unsigned rows, unsigned cols, double val = 0)$/;"	f	struct:Matrix
Matrix	Examples/expr_template.cpp	/^struct Matrix : public MatExpr<Matrix> {$/;"	s	file:
Matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef mtl::mat::dense2D<Value, mtl::mat::parameters<> >    Matrix;$/;"	t	class:itl::pc::ilu
Matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^    typedef mtl::mat::compressed2D<Value, Parameters> Matrix;$/;"	t	class:itl::gauss_seidel
Matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^    typedef mtl::mat::compressed2D<Value, Parameters> Matrix;$/;"	t	class:itl::jacobi
Matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^    typedef mtl::mat::compressed2D<Value, Parameters> Matrix;$/;"	t	class:itl::jor
Matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^    typedef mtl::mat::compressed2D<Value, Parameters> Matrix;$/;"	t	class:itl::sor
Matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^      : Matrix<M>,$/;"	m	namespace:mtl
Matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^      : Matrix<T>,$/;"	m	namespace:mtl
Matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	typedef morton_dense<Elt, BitMask, Parameters>        Matrix;$/;"	t	struct:mtl::traits::range_generator
MatrixInserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct MatrixInserter$/;"	s	namespace:mtl
Mesh	Mesh.hpp	/^class Mesh {$/;"	c
MeshType	shallow_water.cpp	/^typedef Mesh<char,char,char> MeshType;$/;"	t	file:
Metrics	Examples/Metrics.hpp	/^namespace Metrics {$/;"	n
MinConnectedNodesEstimation	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^struct MinConnectedNodesEstimation {$/;"	s	namespace:itl::pc
MinorTraversableMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct MinorTraversableMatrix$/;"	s	namespace:mtl
Monoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^      : Monoid<Operation, Element>, Inversion<Operation, Element>$/;"	m	namespace:algebra
Monoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct Monoid$/;"	s	namespace:algebra
Monoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : Monoid<Operation, Element>, $/;"	m	namespace:math
Monoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : Monoid<Operation, Element>, $/;"	m	namespace:math
Monoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    Monoid<MultOp, Element>,$/;"	m	namespace:math
Monoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : Monoid<Operation, Element>, $/;"	m	namespace:math
Multiplicative	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : Multiplicative<Element>,$/;"	m	namespace:math
Multiplicative	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : Multiplicative<Element>,$/;"	m	namespace:math
MultiplicativeCommutativeMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    MultiplicativeCommutativeMonoid<Element>,$/;"	m	namespace:math
MultiplicativeCommutativeSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    MultiplicativeCommutativeSemiGroup<Element>,$/;"	m	namespace:math
MultiplicativeGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : MultiplicativeGroup<Element>,$/;"	m	namespace:math
MultiplicativeGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : MultiplicativeGroup<Element>,$/;"	m	namespace:math
MultiplicativeGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : MultiplicativeGroup<Element>,$/;"	m	namespace:math
MultiplicativeMagma	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : MultiplicativeMagma<Element>,$/;"	m	namespace:math
MultiplicativeMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^    MultiplicativeMonoid<Element>,$/;"	m	namespace:math
MultiplicativeMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : std::HasDivide<Element>, MultiplicativeMonoid<Element>,$/;"	m	namespace:math
MultiplicativeMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^    MultiplicativeMonoid<Element>,$/;"	m	namespace:math
MultiplicativeMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : std::HasDivide<Element>, MultiplicativeMonoid<Element>,$/;"	m	namespace:math
MultiplicativeMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    MultiplicativeMonoid<Element>,$/;"	m	namespace:math
MultiplicativeMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : MultiplicativeMonoid<Element>,$/;"	m	namespace:math
MultiplicativePIMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^    MultiplicativePIMonoid<Element>, $/;"	m	namespace:math
MultiplicativePIMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : MultiplicativePIMonoid<Element>,$/;"	m	namespace:math
MultiplicativePIMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^    MultiplicativePIMonoid<Element>, $/;"	m	namespace:math
MultiplicativePIMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : MultiplicativePIMonoid<Element>,$/;"	m	namespace:math
MultiplicativePartiallyInvertibleMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    MultiplicativePartiallyInvertibleMonoid<Element>, $/;"	m	namespace:math
MultiplicativePartiallyInvertibleMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : MultiplicativePartiallyInvertibleMonoid<Element>,$/;"	m	namespace:math
MultiplicativeSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^    MultiplicativeSemiGroup<Element>,$/;"	m	namespace:math
MultiplicativeSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : MultiplicativeSemiGroup<Element>,$/;"	m	namespace:math
MultiplicativeSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^    MultiplicativeSemiGroup<Element>,$/;"	m	namespace:math
MultiplicativeSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : MultiplicativeSemiGroup<Element>,$/;"	m	namespace:math
MultiplicativeSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    MultiplicativeSemiGroup<Element>,$/;"	m	namespace:math
MultiplicativeSemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : MultiplicativeSemiGroup<Element>,$/;"	m	namespace:math
MutableCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct MutableCollection$/;"	s	namespace:mtl
MutableCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct MutableCollection<mtl::mat::dense2D<Value, Parameters> >$/;"	s	namespace:mtl
MutableCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct MutableCollection<mtl::mat::morton_dense<Value, Mask, Parameters> >$/;"	s	namespace:mtl
MutableCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct MutableCollection<mtl::vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl
MutableCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct MutableCollection<std::vector<Value> >$/;"	s	namespace:mtl
MutableMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct MutableMatrix$/;"	s	namespace:mtl
MutableVector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/vector.hpp	/^    struct MutableVector$/;"	s	namespace:mtl
MyColorFunc	shortest_path.cpp	/^	MyColorFunc(int longest_path) : lp_(longest_path) {$/;"	f	struct:MyColorFunc
MyColorFunc	shortest_path.cpp	/^struct MyColorFunc {$/;"	s	file:
MyComparator	shortest_path.cpp	/^   MyComparator(const Point& p) : p_(p) {$/;"	f	struct:MyComparator
MyComparator	shortest_path.cpp	/^struct MyComparator {$/;"	s	file:
NON_DIAGONAL	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^enum Status { UNMARKED, DIAGONAL, MARKED_CURRENT, REMOVED, NON_DIAGONAL };$/;"	e	enum:itl::pc::Status
Node	Graph.hpp	/^	Node(const Graph* graph, const uid_type uid) : graph_(graph), uid_(uid) {$/;"	f	class:Graph::Node
Node	Graph.hpp	/^    Node() {$/;"	f	class:Graph::Node
Node	Graph.hpp	/^  class Node : private totally_ordered<Node> {$/;"	c	class:Graph
Node	mass_spring.cpp	/^typedef typename GraphType::node_type Node;$/;"	t	file:
Node	poisson.cpp	/^typedef typename GraphType::node_type Node;$/;"	t	file:
Node	test_edges.cpp	/^typedef GraphType::node_type Node;$/;"	t	file:
Node	test_nodes.cpp	/^typedef GraphType::node_type Node;$/;"	t	file:
NodeData	mass_spring.cpp	/^struct NodeData {$/;"	s	file:
NodeData	poisson.cpp	/^typedef struct NodeData {$/;"	s	file:
NodeIterator	Graph.hpp	/^  	NodeIterator(const Graph* graph, idx_type index) {$/;"	f	class:Graph::NodeIterator
NodeIterator	Graph.hpp	/^    NodeIterator() {$/;"	f	class:Graph::NodeIterator
NodeIterator	Graph.hpp	/^  class NodeIterator : private totally_ordered<NodeIterator> {$/;"	c	class:Graph
NodePosition	shallow_water.cpp	/^struct NodePosition {$/;"	s	file:
NonDegeneracy	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    axiom NonDegeneracy(I inner, Vector v, Vector w, Scalar s)$/;"	f	struct:math::InnerProduct
NonNegativity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    axiom NonNegativity(I inner, Vector v, MagnitudeType<Scalar>::type magnitude)$/;"	f	struct:math::InnerProduct
NonZeroTraversableSubMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct NonZeroTraversableSubMatrix$/;"	s	namespace:mtl
Norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^  : Norm<N, Vector, Scalar>,$/;"	m	namespace:math
Norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^struct Norm$/;"	s	namespace:math
Num_Cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^        static size_type const Num_Cols= Cols;$/;"	m	struct:mtl::fixed::dimensions
Num_Rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^        static size_type const Num_Rows= Rows;$/;"	m	struct:mtl::fixed::dimensions
Numeric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void                 *Symbolic, *Numeric;$/;"	m	class:mtl::mat::umfpack::solver
Numeric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void                *Symbolic, *Numeric;$/;"	m	class:mtl::mat::umfpack::solver
OperatorDivisionRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : OperatorDivisionRing<Element>,$/;"	m	namespace:math
OperatorDivisionRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : OperatorDivisionRing<Element>,$/;"	m	namespace:math
OperatorRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : OperatorRing<Element>,$/;"	m	namespace:math
OperatorRing	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : OperatorRing<Element>,$/;"	m	namespace:math
OperatorRingWithIdentity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : OperatorRingWithIdentity<Element>,$/;"	m	namespace:math
OperatorRingWithIdentity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : OperatorRingWithIdentity<Element>,$/;"	m	namespace:math
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection< mat::rscaled_view<Coll,RScaling> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection< mat::scaled_view<Scaling, Coll> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection< mtl::vec::map_view<Functor, Coll> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection< mtl::vec::rscaled_view<Coll,RScaling> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection< mtl::vec::scaled_view<Scaling, Coll> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<const T>$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<mat::conj_view<Coll> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<mat::hermitian_view<Coll> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<mtl::mat::compressed2D<Value, Parameters> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<mtl::mat::dense2D<Value, Parameters> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<mtl::mat::indirect<Matrix> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<mtl::mat::morton_dense<Value, Mask, Parameters> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<mtl::mat::transposed_view<Coll> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<mtl::vec::conj_view<Coll> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<mtl::vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl
OrientedCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct OrientedCollection<std::vector<Value> >$/;"	s	namespace:mtl
P	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    mtl::vec::dense_vector<size_type, mtl::vec::parameters<> >   P;$/;"	m	class:itl::pc::ilu
P	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^        mtl::mat::traits::permutation<>::type P;$/;"	m	class:itl::pc::imf_preconditioner
P	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	/^    const pc_type&        P; $/;"	m	struct:itl::pc::solver
P	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    pc_type           P;$/;"	m	class:itl::pc::sub_matrix_pc
P	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^	const self& P;$/;"	m	struct:mtl::mat::block_diagonal2D::multiplier
P	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^    permutation_type P;$/;"	m	class:mtl::mat::lu_solver
POINTER	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/comparators.hpp	27;"	d
PSEUDO_CONCEPT_INCLUDE	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/pseudo_concept.hpp	14;"	d
PartiallyInvertibleCommutativeMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    PartiallyInvertibleCommutativeMonoid<Operation, Element>,$/;"	m	namespace:math
PartiallyInvertibleMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : PartiallyInvertibleMonoid<Operation, Element>, $/;"	m	namespace:math
PartiallyInvertibleMonoid	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : PartiallyInvertibleMonoid<Operation, Element>,$/;"	m	namespace:math
Point	Point.hpp	/^  Point() {$/;"	f	struct:Point
Point	Point.hpp	/^  Point(value_type b0, value_type b1, value_type b2) {$/;"	f	struct:Point
Point	Point.hpp	/^  explicit Point(value_type b) {$/;"	f	struct:Point
Point	Point.hpp	/^struct Point {$/;"	s
PoissonColor	CS207/SDLViewer.hpp	/^struct PoissonColor {$/;"	s	namespace:CS207
PoissonPosition	CS207/SDLViewer.hpp	/^struct PoissonPosition {$/;"	s	namespace:CS207
PositiveDefiniteness	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    axiom PositiveDefiniteness(N norm, Vector v, magnitude_type ref)$/;"	f	struct:math::SemiNorm
PositiveHomogeneity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    axiom PositiveHomogeneity(N norm, Vector v, Scalar a)$/;"	f	struct:math::Norm
Positivity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    axiom Positivity(N norm, Vector v, magnitude_type ref)$/;"	f	struct:math::Norm
Q	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    Matrix     R, G, Q;$/;"	m	class:mtl::mat::qr_givens_solver
QVar	shallow_water.cpp	/^  QVar()$/;"	f	struct:QVar
QVar	shallow_water.cpp	/^  QVar(double h_, double hx_, double hy_)$/;"	f	struct:QVar
QVar	shallow_water.cpp	/^struct QVar {$/;"	s	file:
R	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^    RightPreconditioner   R;$/;"	m	class:itl::bicgstab_ell_solver
R	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^    RightPreconditioner   R;$/;"	m	class:itl::gmres_solver
R	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^    RightPreconditioner   R;$/;"	m	class:itl::idr_s_solver
R	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^    RightPreconditioner   R;$/;"	m	class:itl::qmr_solver
R	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^    RightPreconditioner   R;$/;"	m	class:itl::tfqmr_solver
R	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    Matrix R, I;$/;"	m	class:mtl::mat::eigenvalue_solver
R	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    Matrix     R, G, Q;$/;"	m	class:mtl::mat::qr_givens_solver
REMOVED	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^enum Status { UNMARKED, DIAGONAL, MARKED_CURRENT, REMOVED, NON_DIAGONAL };$/;"	e	enum:itl::pc::Status
RealMagnitude	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^template <typename T> struct RealMagnitude$/;"	s	namespace:math
RealOperator	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/linear_operator.hpp	/^    struct RealOperator$/;"	s	namespace:math
ResizeableMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct ResizeableMatrix$/;"	s	namespace:mtl
Ring	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^      : Ring<AddOp, MultOp, Element>,$/;"	m	namespace:algebra
Ring	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct Ring$/;"	s	namespace:algebra
Ring	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : Ring<AddOp, MultOp, Element>,$/;"	m	namespace:math
Ring	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : Ring<AddOp, MultOp, Element>,$/;"	m	namespace:math
Ring	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : Ring<Element>,$/;"	m	namespace:math
RingWithIdentity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^      : RingWithIdentity<AddOp, MultOp, Element>,$/;"	m	namespace:algebra
RingWithIdentity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct RingWithIdentity$/;"	s	namespace:algebra
RingWithIdentity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : RingWithIdentity<AddOp, MultOp, Element>,$/;"	m	namespace:math
RingWithIdentity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : RingWithIdentity<AddOp, MultOp, Element>,$/;"	m	namespace:math
RingWithIdentity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : RingWithIdentity<Element>,$/;"	m	namespace:math
RowInMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^struct RowInMatrix $/;"	s	namespace:mtl
RowInMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^struct RowInMatrix<const mtl::mat::dense2D<Value, Parameters> > $/;"	s	namespace:mtl
RowInMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^struct RowInMatrix<mtl::mat::dense2D<Value, Parameters> > $/;"	s	namespace:mtl
RowTraversableMatrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^    struct RowTraversableMatrix$/;"	s	namespace:mtl
Rule	mass_spring.cpp	/^struct Rule {$/;"	s	file:
SDLViewer	CS207/SDLViewer.hpp	/^  SDLViewer()$/;"	f	class:CS207::SDLViewer
SDLViewer	CS207/SDLViewer.hpp	/^class SDLViewer {$/;"	c	namespace:CS207
Scalar	Examples/Metrics.hpp	/^typedef Unit<0, 0,  0, double>  Scalar;$/;"	t	namespace:Metrics
Scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^    typedef typename mtl::Collection<Matrix>::value_type Scalar;$/;"	t	class:itl::gauss_seidel
Scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^    typedef typename mtl::Collection<Matrix>::value_type Scalar;$/;"	t	class:itl::jacobi
Scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^    typedef typename mtl::Collection<Matrix>::value_type Scalar;$/;"	t	class:itl::jor
Scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^    typedef typename mtl::Collection<Matrix>::value_type Scalar;$/;"	t	class:itl::sor
SelfAdjointOperator	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/linear_operator.hpp	/^      : SelfAdjointOperator<Operator, VectorDomain, VectorImage>,$/;"	m	namespace:math
SelfAdjointOperator	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/linear_operator.hpp	/^    struct SelfAdjointOperator$/;"	s	namespace:math
SemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^        SemiGroup<MultOp, Element>,$/;"	m	namespace:algebra
SemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct SemiGroup$/;"	s	namespace:algebra
SemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^    SemiGroup<MultOp, Element>,$/;"	m	namespace:math
SemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^    SemiGroup<MultOp, Element>,$/;"	m	namespace:math
SemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    SemiGroup<MultOp, Element>,$/;"	m	namespace:math
SemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : SemiGroup<Operation, Element>, $/;"	m	namespace:math
SemiGroup	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^  : SemiGroup<Operation, Element>,$/;"	m	namespace:math
SemiNorm	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^struct SemiNorm$/;"	s	namespace:math
SequiLinearity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    axiom SequiLinearity(I inner, Scalar a, Scalar b, Vector u, Vector v, Vector w)$/;"	f	struct:math::InnerProduct
SignedIntegralLike	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : std::SignedIntegralLike<T>,$/;"	m	class:math::std
SignedIntegralLike	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : std::SignedIntegralLike<T>,$/;"	m	class:math::std
SimpleElement	Examples/proxy_example.cpp	/^    SimpleElement() {$/;"	f	class:SimpleSet::SimpleElement
SimpleElement	Examples/proxy_example.cpp	/^    SimpleElement(const SimpleSet* set, size_type uid)$/;"	f	class:SimpleSet::SimpleElement	file:
SimpleElement	Examples/proxy_example.cpp	/^  class SimpleElement {$/;"	c	class:SimpleSet	file:
SimpleSet	Examples/proxy_example.cpp	/^  SimpleSet()$/;"	f	class:SimpleSet
SimpleSet	Examples/proxy_example.cpp	/^class SimpleSet {$/;"	c	file:
SkewField	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^    struct SkewField$/;"	s	namespace:algebra
SlicePredicate	subgraph.cpp	/^struct SlicePredicate {$/;"	s	file:
Sphere	mass_spring.cpp	/^struct Sphere : public Rule {$/;"	s	file:
SpringConstant	Examples/Metrics.hpp	/^typedef Unit<1, 0, -2, double>  SpringConstant;$/;"	t	namespace:Metrics
Status	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^enum Status { UNMARKED, DIAGONAL, MARKED_CURRENT, REMOVED, NON_DIAGONAL };$/;"	g	namespace:itl::pc
Stimulus	mass_spring.cpp	/^struct Stimulus {$/;"	s	file:
Symbolic	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void                 *Symbolic, *Numeric;$/;"	m	class:mtl::mat::umfpack::solver
Symbolic	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void                *Symbolic, *Numeric;$/;"	m	class:mtl::mat::umfpack::solver
SymmetricOperator	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/linear_operator.hpp	/^    struct SymmetricOperator$/;"	s	namespace:math
TableTop	mass_spring.cpp	/^struct TableTop : public Rule {$/;"	s	file:
Time	Examples/Metrics.hpp	/^typedef Unit<0, 0,  1, double>  Time;$/;"	t	namespace:Metrics
Timer	Examples/openmp.cpp	/^  Timer(const std::string& s) : msg(s) {$/;"	f	struct:Timer
Timer	Examples/openmp.cpp	/^struct Timer {$/;"	s	file:
TraversableCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct TraversableCollection$/;"	s	namespace:mtl
TraversableCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^        TraversableCollection<Tag, M>,$/;"	m	namespace:mtl
TraversableMutableCollection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^    struct TraversableMutableCollection$/;"	s	namespace:mtl
TriGraph	Mesh.hpp	/^	typedef Graph<triangle_data, link_data> TriGraph;$/;"	t	class:Mesh
Triangle	Mesh.hpp	/^		Triangle() {$/;"	f	class:Mesh::Triangle
Triangle	Mesh.hpp	/^		Triangle(const Mesh* mesh, const size_type uid) : mesh_(mesh), uid_(uid) {}$/;"	f	class:Mesh::Triangle
Triangle	Mesh.hpp	/^		Triangle(const Mesh* mesh, const tri_node tn) : mesh_(mesh), uid_(tn.index()) {}$/;"	f	class:Mesh::Triangle
Triangle	Mesh.hpp	/^	class Triangle : private totally_ordered<Triangle> {$/;"	c	class:Mesh
TriangleInequality	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    axiom TriangleInequality(N norm, Vector u, Vector v)$/;"	f	struct:math::Norm
TriangleIterator	Mesh.hpp	/^			TriangleIterator() {$/;"	f	class:Mesh::TriangleIterator
TriangleIterator	Mesh.hpp	/^			TriangleIterator(tri_node_iterator& it) : it_(it) {$/;"	f	class:Mesh::TriangleIterator
TriangleIterator	Mesh.hpp	/^	class TriangleIterator : private totally_ordered<TriangleIterator> {$/;"	c	class:Mesh
U	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    U_type                       U;$/;"	m	class:itl::pc::ic_0
U	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    const typename pc_type::U_type&          U;$/;"	m	struct:itl::pc::ic_0_evaluator
U	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    U_type                      U;$/;"	m	class:itl::pc::ilu
UNAME	Examples/Makefile	/^UNAME := $(shell uname)$/;"	m
UNAME	Makefile	/^UNAME := $(shell uname)$/;"	m
UNMARKED	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^enum Status { UNMARKED, DIAGONAL, MARKED_CURRENT, REMOVED, NON_DIAGONAL };$/;"	e	enum:itl::pc::Status
USE_EXPR_TEMP	Examples/expr_template.cpp	9;"	d	file:
U_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef mtl::mat::compressed2D<value_type, para>                      U_type;$/;"	t	class:itl::pc::ic_0
U_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef mtl::mat::compressed2D<value_type, para>                     U_type;$/;"	t	class:itl::pc::ilu
UnaryFunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/std_concept.hpp	/^    struct UnaryFunctor$/;"	s	namespace:mtl
UnaryStaticFunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/std_concept.hpp	/^    struct UnaryStaticFunctor$/;"	s	namespace:mtl
Unit	Examples/Metrics.hpp	/^  constexpr Unit(const T& v = T())$/;"	f	struct:Metrics::Unit
Unit	Examples/Metrics.hpp	/^struct Unit {$/;"	s	namespace:Metrics
UnsignedIntegralLike	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^  : std::UnsignedIntegralLike<T>,$/;"	m	class:math::std
UnsignedIntegralLike	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^  : std::UnsignedIntegralLike<T>,$/;"	m	class:math::std
V1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    typedef typename E1::vector_type V1;$/;"	t	struct:mtl::mat::mv_mv_minus_expr
V1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    typedef typename E1::vector_type V1;$/;"	t	struct:mtl::mat::mv_mv_plus_expr
V1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^    typedef typename fast_multi_vector_expr<E1>::type V1;$/;"	t	struct:mtl::traits::fast_multi_vector_expr
V2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    typedef typename E2::vector_type V2;$/;"	t	struct:mtl::mat::mv_mv_minus_expr
V2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    typedef typename E2::vector_type V2;$/;"	t	struct:mtl::mat::mv_mv_plus_expr
V2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^    typedef typename fast_multi_vector_expr<E2>::type V2;$/;"	t	struct:mtl::traits::fast_multi_vector_expr
Vector	Examples/trivial_copy.cpp	/^  Vector()$/;"	f	class:Vector
Vector	Examples/trivial_copy.cpp	/^  explicit Vector(size_type n)$/;"	f	class:Vector
Vector	Examples/trivial_copy.cpp	/^class Vector {$/;"	c	file:
Vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/vector.hpp	/^      : Vector<T>, $/;"	m	namespace:mtl
Vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/vector.hpp	/^      : Vector<T>,$/;"	m	namespace:mtl
Velocity	Examples/Metrics.hpp	/^typedef Unit<0, 1, -1, double>  Velocity;$/;"	t	namespace:Metrics
Velocity3	Examples/Metrics.hpp	/^typedef Unit<0, 1, -1, Point>   Velocity3;$/;"	t	namespace:Metrics
VertGraph	Mesh.hpp	/^	typedef Graph<vertex_data, edge_data> VertGraph;$/;"	t	class:Mesh
_g	Examples/Metrics.hpp	/^constexpr Mass operator"" _g(long double v) {$/;"	f	namespace:Metrics
_m	Examples/Metrics.hpp	/^constexpr Distance operator"" _m(long double v) {$/;"	f	namespace:Metrics
_s	Examples/Metrics.hpp	/^constexpr Time operator"" _s(long double v) {$/;"	f	namespace:Metrics
_s	Examples/Metrics.hpp	/^constexpr Time operator"" _s(unsigned long long v) {$/;"	f	namespace:Metrics
a	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    value_type a, b;$/;"	m	class:mtl::vec::givens
a	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    T *a;$/;"	m	struct:mtl::utility::zip_ref
a	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    T*            a;$/;"	m	struct:mtl::utility::zip_it
a_	Examples/expr_template.cpp	/^  const MatExpr<E1>& a_;$/;"	m	struct:MatAdd	file:
a_	Examples/expr_template.cpp	/^  const MatExpr<E1>& a_;$/;"	m	struct:MatMult	file:
a_	Examples/expr_template.cpp	/^  const MatExpr<E1>& a_;$/;"	m	struct:MatScale	file:
a_cur_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	typedef typename mtl::traits::range_generator<tag::major, Matrix>::type     a_cur_type; \/\/ row or col depending on Matrix    $/;"	t	struct:mtl::mat::detail::lower_trisolve_t
a_cur_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	typedef typename mtl::traits::range_generator<tag::major, Matrix>::type   a_cur_type; \/\/ row or col accordingly$/;"	t	struct:mtl::mat::detail::upper_trisolve_t
a_icur_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	typedef typename mtl::traits::range_generator<tag::nz, a_cur_type>::type    a_icur_type;   $/;"	t	struct:mtl::mat::detail::lower_trisolve_t
a_icur_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	typedef typename mtl::traits::range_generator<tag::nz, a_cur_type>::type  a_icur_type;   $/;"	t	struct:mtl::mat::detail::upper_trisolve_t
abs	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/abs.hpp	/^struct abs$/;"	s	namespace:meta_math
abs	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct abs$/;"	s	namespace:mtl::sfunctor
abs_greater_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^struct abs_greater_0$/;"	s	namespace:mtl::utility
absorb	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    void absorb(Matrix& other_values, Vector& other_indices) $/;"	f	class:mtl::mat::element
access_during_insertion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit access_during_insertion(const char *s= "Diagonal entry missing.")$/;"	f	struct:mtl::access_during_insertion
access_during_insertion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct access_during_insertion : public domain_error$/;"	s	namespace:mtl
access_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^				    >::type                  access_type;$/;"	t	struct:mtl::mat::transposed_view
accumulate	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/accumulate.hpp	/^Value inline accumulate(Iter first, Iter last, Value init, Op op)$/;"	f	namespace:math
active_events	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    int num_counters, event_set, active_events;$/;"	m	class:mtl::utility::papi_t
adapt_crs_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline adapt_crs_cvec_mult(const compressed2D<MValue, MPara>& A, const VectorIn& v, VectorOut& w, Assign)$/;"	f	class:mtl::mat::mtl::traits::enable_if_scalar
adaptor_operators	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^struct adaptor_operators$/;"	s	namespace:mtl::utilities::detail
add	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct add : public std::binary_function<Element, Element, Element>$/;"	s	namespace:math
add	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct add : public std::binary_function<Element, Element, result_type>$/;"	s	class:math::std
add	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^template <> struct add<char> : heterogeneous_add<char, char, int> {};$/;"	s	namespace:math
add	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^template <> struct add<short> : heterogeneous_add<short, short, int> {};$/;"	s	namespace:math
add	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^template <> struct add<unsigned char> : heterogeneous_add<unsigned char, unsigned char, unsigned int> {};$/;"	s	namespace:math
add	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^template <> struct add<unsigned short> : heterogeneous_add<unsigned short, unsigned short, unsigned int> {}; $/;"	s	namespace:math
add_const_to_all	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^struct add_const_to_all$/;"	s	namespace:mtl::traits
add_const_to_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^struct add_const_to_data$/;"	s	namespace:mtl::traits
add_const_to_root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^struct add_const_to_root$/;"	s	namespace:mtl::traits
add_edge	Graph.hpp	/^  Edge add_edge(const Node& a, const Node& b, const edge_value_type& ev = edge_value_type()) {$/;"	f	class:Graph
add_edges	CS207/SDLViewer.hpp	/^  void add_edges(InputIterator first, InputIterator last, const Map& node_map) {$/;"	f	class:CS207::SDLViewer
add_event	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    int add_event(const char* name) { return 0;}$/;"	f	struct:mtl::utility::papi_t
add_event	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    int add_event(const char* name)$/;"	f	class:mtl::utility::papi_t
add_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    void add_mult(const VectorIn& x, VectorOut& y) const $/;"	f	class:mtl::mat::block_diagonal2D
add_neighbors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    void add_neighbors(element* n1, element* n2= 0, element* n3= 0,$/;"	f	class:mtl::mat::element
add_node	Graph.hpp	/^  Node add_node(const Point& position, $/;"	f	class:Graph
add_node	Mesh.hpp	/^	vert_node add_node(Point p, UserNodeData d = UserNodeData()) {$/;"	f	class:Mesh
add_nodes	CS207/SDLViewer.hpp	/^  void add_nodes(InputIterator first, InputIterator last,$/;"	f	class:CS207::SDLViewer
add_triangle	Mesh.hpp	/^	Triangle add_triangle(vert_node n1, vert_node n2, vert_node n3, UserTriData d = UserTriData()) {$/;"	f	class:Mesh
address_compare	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/comparators.hpp	/^struct address_compare {$/;"	s	namespace:compare
address_compare_equal	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/comparators.hpp	/^struct address_compare_equal {$/;"	s	namespace:compare
address_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    const value_type* address_data() const { check(); return &data[0]; }$/;"	f	class:mtl::mat::compressed2D
address_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    value_type* address_data() { check(); return &data[0]; }$/;"	f	class:mtl::mat::compressed2D
address_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    const value_type* address_data() const { return this->data; }$/;"	f	class:mtl::mat::dense2D
address_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    value_type* address_data() { return this->data; }$/;"	f	class:mtl::mat::dense2D
address_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    const value_type* address_data() const { return begin(); }$/;"	f	class:mtl::vec::dense_vector
address_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    value_type* address_data() { return begin(); }$/;"	f	class:mtl::vec::dense_vector
address_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    const_pointer address_data() const { return data; }$/;"	f	class:mtl::vec::strided_vector_ref
address_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    pointer address_data() { return data; }$/;"	f	class:mtl::vec::strided_vector_ref
address_hasher	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/comparators.hpp	/^struct address_hasher {$/;"	s	namespace:compare
address_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    const size_type* address_major() const { check(); return &starts[0]; }$/;"	f	class:mtl::mat::compressed2D
address_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    size_type* address_major() { check(); return &starts[0]; }$/;"	f	class:mtl::mat::compressed2D
address_minor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    const size_type* address_minor() const { check(); return &indices[0]; }$/;"	f	class:mtl::mat::compressed2D
address_minor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    size_type* address_minor() { check(); return &indices[0]; }$/;"	f	class:mtl::mat::compressed2D
adj_list	Graph.hpp	/^	mutable std::list<edge_data> adj_list;$/;"	m	struct:Graph::adjacency_data
adj_list_iterator	Graph.hpp	/^  typedef typename std::list<edge_data>::iterator adj_list_iterator;$/;"	t	class:Graph
adjacency_data	Graph.hpp	/^  typedef struct adjacency_data {$/;"	s	class:Graph
adjacency_data	Graph.hpp	/^  } adjacency_data;$/;"	t	class:Graph	typeref:struct:Graph::adjacency_data
adjacent_iterator	Mesh.hpp	/^	typedef AdjacentIterator adjacent_iterator;$/;"	t	class:Mesh
adjacent_triangles	Mesh.hpp	/^	adjacent_iterator adjacent_triangles(Triangle t) {$/;"	f	class:Mesh
adjacent_triangles_begin	Mesh.hpp	/^	adjacent_iterator adjacent_triangles_begin() const {$/;"	f	class:Mesh
adjacent_triangles_end	Mesh.hpp	/^	adjacent_iterator adjacent_triangles_end() const {$/;"	f	class:Mesh
adjoint	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjoint.hpp	/^    struct adjoint$/;"	s	namespace:mtl::mat::traits
adjoint	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjoint.hpp	/^inline adjoint(const LinOp& A)$/;"	f	class:mtl::mat::traits::adjoint
adjoint_L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    adjoint_L_type              adjoint_L;$/;"	m	class:itl::pc::ilu
adjoint_L_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef typename mtl::mat::traits::adjoint<L_type>::type     adjoint_L_type;$/;"	t	class:itl::pc::ilu
adjoint_U	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    adjoint_U_type              adjoint_U;$/;"	m	class:itl::pc::ilu
adjoint_U_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef typename mtl::mat::traits::adjoint<U_type>::type     adjoint_U_type;$/;"	t	class:itl::pc::ilu
adjoint_lower_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    adjoint_lower_solver_t      adjoint_lower_solver;$/;"	m	class:itl::pc::ilu
adjoint_lower_solver_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef mtl::mat::detail::lower_trisolve_t<adjoint_U_type, mtl::tag::inverse_diagonal, true> adjoint_lower_solver_t;$/;"	t	class:itl::pc::ilu
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    void adjoint_solve(const VectorIn& x, VectorOut& y) const$/;"	f	class:itl::pc::concat
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^inline adjoint_solve(const concat<PC1, PC2, Matrix, Store1, Store2>& P, const Vector& x)$/;"	f	namespace:itl::pc
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^    Vector adjoint_solve(const Vector& x) const$/;"	f	class:itl::pc::diagonal
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^    void adjoint_solve(const VectorIn& x, VectorOut& y) const$/;"	f	class:itl::pc::diagonal
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^inline adjoint_solve(const diagonal<Matrix>& P, const Vector& x)$/;"	f	namespace:itl::pc
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    Vector adjoint_solve(const Vector& x) const$/;"	f	class:itl::pc::ic_0
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    void adjoint_solve(const VectorIn& x, VectorOut& y) const$/;"	f	class:itl::pc::ic_0
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^inline adjoint_solve(const ic_0<Matrix, Value>& P, const Vector& x)$/;"	f	namespace:itl::pc
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^    Vector adjoint_solve(const Vector& x) const$/;"	f	class:itl::pc::identity
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^    void adjoint_solve(const VectorIn& b, VectorOut& x) const$/;"	f	class:itl::pc::identity
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^inline adjoint_solve(const identity<Matrix>& P, const Vector& x)$/;"	f	namespace:itl::pc
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    Vector adjoint_solve(const Vector& b) const { return lu_adjoint_apply(LU, P, b); }$/;"	f	class:itl::pc::ilu
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    Vector adjoint_solve(const Vector& x) const$/;"	f	class:itl::pc::ilu
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    void adjoint_solve(const VectorIn& b, VectorOut& x) const { x= lu_adjoint_apply(LU, P, b); }$/;"	f	class:itl::pc::ilu
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    void adjoint_solve(const VectorIn& x, VectorOut& y) const$/;"	f	class:itl::pc::ilu
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^inline adjoint_solve(const ilu<Matrix, Factorizer, Value>& P, const Vector& b)$/;"	f	namespace:itl::pc
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    void adjoint_solve(const VectorIn& x, VectorOut& y) const$/;"	f	class:itl::pc::sub_matrix_pc
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^inline adjoint_solve(const sub_matrix_pc<Preconditioner, Matrix, Store>& P, const Vector& x)$/;"	f	namespace:itl::pc
adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^    void adjoint_solve(const VectorIn& b, VectorOut& x) const$/;"	f	class:mtl::mat::lu_solver
adjoint_upper_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    adjoint_upper_solver_t      adjoint_upper_solver;$/;"	m	class:itl::pc::ilu
adjoint_upper_solver_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef mtl::mat::detail::upper_trisolve_t<adjoint_L_type, mtl::tag::unit_diagonal, true>    adjoint_upper_solver_t;$/;"	t	class:itl::pc::ilu
adjust_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjust_cursor.hpp	/^    void inline adjust_cursor(Size diff, Cursor& c, tag::dense) { c+= diff; }$/;"	f	namespace:mtl::detail
adjust_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjust_cursor.hpp	/^    void inline adjust_cursor(Size diff, Cursor& c, tag::sparse) {}$/;"	f	namespace:mtl::detail
advance	Examples/iterator_adaptor_boost.cpp	/^  void advance(typename super_type::difference_type n) {$/;"	f	struct:my_stride_iterator	file:
advance	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self& advance(int inc)$/;"	f	struct:mtl::dilated::dilated_int
advance	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& advance(int row_inc, int col_inc)$/;"	f	struct:mtl::mat::morton_dense_key
advance_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& advance_col(int col_inc)$/;"	f	struct:mtl::mat::morton_dense_key
advance_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& advance_row(int row_inc)$/;"	f	struct:mtl::mat::morton_dense_key
aic	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void row_init(size_type MTL_DEBUG_ARG(r), Cursor& aic, Cursor& MTL_DEBUG_ARG(aiend), Value& dia, tag::universe_diagonal) const$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
aiend	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void col_init(size_type MTL_DEBUG_ARG(r), Cursor& MTL_DEBUG_ARG(aic), Cursor& aiend, Value& rr, Value& res, tag::inverse_diagonal) const$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
aiend	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void col_init(size_type MTL_DEBUG_ARG(r), Cursor& MTL_DEBUG_ARG(aic), Cursor& aiend, Value& rr, Value& res, tag::regular_diagonal) const$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
algebra	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^namespace algebra {$/;"	n
algebraic_category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/algebraic_category.hpp	/^struct algebraic_category$/;"	s	namespace:mtl::traits
aligned	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    static const bool aligned= !boost::is_same<typename Parameters::orientation, row_major>::value;$/;"	m	struct:mtl::ColumnInMatrix
aligned	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    static const bool aligned= boost::is_same<typename Parameters::orientation, row_major>::value;$/;"	m	struct:mtl::RowInMatrix
aligned_delete	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^	void aligned_delete(bool is_own, Value*& data)$/;"	f	struct:mtl::detail::alignment_helper
alignment	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    static const unsigned alignment=                   32; \/\/ TBD: make more flexible later$/;"	m	class:mtl::mat::ell_matrix
alignment_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    typedef alignment_helper<Value>           alignment_base;$/;"	t	struct:mtl::detail::contiguous_memory_block
alignment_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^	alignment_helper() : malloc_address(0) {}$/;"	f	struct:mtl::detail::alignment_helper
alignment_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    struct alignment_helper$/;"	s	namespace:mtl::detail
all	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/glas_tag.hpp	/^struct all {};$/;"	s	namespace:glas::tag
all	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^	struct all {};$/;"	s	namespace:mtl::tag::const_iter
all	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^	struct all {};$/;"	s	namespace:mtl::tag::iter
all_cols_in_row_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct all_cols_in_row_range_generator$/;"	s	namespace:mtl::traits::detail
all_cols_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct all_cols_range_generator$/;"	s	namespace:mtl::traits::detail
all_of	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^inline all_of(const T& x)$/;"	f	class:mtl::mtl::traits
all_offsets_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct all_offsets_range_generator$/;"	s	namespace:mtl::traits::detail
all_rows_in_col_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct all_rows_in_col_range_generator$/;"	s	namespace:mtl::traits::detail
all_rows_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct all_rows_range_generator$/;"	s	namespace:mtl::traits::detail
alligned_alloc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^	Value* alligned_alloc(std::size_t size)	{  return size > 0 ? new Value[size] : (Value*)(0); }$/;"	f	struct:mtl::detail::alignment_helper
alligned_alloc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^	Value* alligned_alloc(std::size_t size)$/;"	f	struct:mtl::detail::alignment_helper
alloc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void alloc(std::size_t size)$/;"	f	struct:mtl::detail::contiguous_memory_block
allocate	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    void allocate()$/;"	f	struct:mtl::dilated::masked_dilation_tables
allocate	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void allocate(size_t new_nnz)$/;"	f	class:mtl::mat::compressed2D
allocate_slots	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    void allocate_slots(size_type s)$/;"	f	class:mtl::mat::ell_matrix
alpha_	Examples/expr_template.cpp	/^  double alpha_;$/;"	m	struct:MatScale	file:
anti_dilate_lut	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilation_table.hpp	/^static const unsigned short int anti_dilate_lut[256] = {$/;"	m	namespace:mtl::dilated
anti_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^	                 anti_mask = ~BitMask,    $/;"	m	struct:mtl::dilated::dilated_int
anti_symmetric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct anti_symmetric {};$/;"	s	namespace:mtl
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	static inline result_type apply(const Matrix& matrix)$/;"	f	struct:mtl::sfunctor::conj_aux
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static T& apply(T& x, const U& y)$/;"	f	struct:mtl::assign::assign_sum
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static T& apply(T& x, const U& y)$/;"	f	struct:mtl::assign::divide_sum
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static T& apply(T& x, const U& y)$/;"	f	struct:mtl::assign::minus_sum
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static T& apply(T& x, const U& y)$/;"	f	struct:mtl::assign::plus_sum
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static T& apply(T& x, const U& y)$/;"	f	struct:mtl::assign::times_sum
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void apply(Matrix& matrix, Visitor vis, tag::qsub_divisible)$/;"	f	struct:mtl::mat::recursive_cholesky_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void apply(Matrix& matrix, Visitor, tag::universe)$/;"	f	struct:mtl::mat::recursive_cholesky_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    static inline type apply(ref_type& A, const irange& row_range, size_type col)$/;"	f	struct:mtl::ColumnInMatrix
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^		static inline type apply(const Matrix& A)$/;"	f	struct:mtl::mat::detail::conj_trait
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	static inline result_type apply(const Value& v)$/;"	f	struct:mtl::sfunctor::conj_aux
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	static inline result_type apply(const std::complex<Value>& v)$/;"	f	struct:mtl::sfunctor::conj_aux
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	    static inline int apply(const MatrixSrc& src, const MatrixDest& dest)$/;"	f	struct:mtl::detail::copy_inserter_size
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	    static inline int apply(const MatrixSrc& src, const MatrixDest& dest)$/;"	f	struct:mtl::detail::sum_of_sizes
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copysign.hpp	/^	static inline Value1 apply(const Value1& v, const Value2& s)$/;"	f	struct:mtl::sfunctor::copysign
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copysign.hpp	/^	static inline Value1 apply(const std::complex<Value1>& v, const Value2& s)$/;"	f	struct:mtl::sfunctor::copysign
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^	static inline void apply(MatrixA const&, MatrixB const&, MatrixC&) {}$/;"	f	struct:mtl::fully_unroll_fixed_size_dmat_dmat_mult_t::noop
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    static inline void apply(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::fully_unroll_dmat_dmat_mult_block
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    static inline void apply(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::fully_unroll_dmat_dmat_mult_init_block
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    static inline void apply(Value& tmp00, Value& tmp01, Value& tmp02, Value& tmp03, Value& tmp04, $/;"	f	struct:mtl::gen_tiling_dmat_dmat_mult_block
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    static inline void apply(Value& tmp00, Value&, Value&, Value&, Value&, $/;"	f	struct:mtl::gen_tiling_dmat_dmat_mult_block
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, $/;"	f	struct:mtl::gen_recursive_dmat_dmat_mult_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, boost::mpl::false_)$/;"	f	struct:mtl::size_switch_dmat_dmat_mult_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, boost::mpl::true_)$/;"	f	struct:mtl::size_switch_dmat_dmat_mult_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::flat<tag::has_2D_layout>, tag::flat<tag::has_2D_layout>)$/;"	f	struct:mtl::gen_tiling_22_dmat_dmat_mult_ft
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::flat<tag::has_2D_layout>, tag::flat<tag::has_2D_layout>)$/;"	f	struct:mtl::gen_tiling_44_dmat_dmat_mult_ft
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::flat<tag::has_2D_layout>, tag::flat<tag::has_2D_layout>)$/;"	f	struct:mtl::gen_tiling_dmat_dmat_mult_ft
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::flat<tag::has_cursor>, tag::flat<tag::has_cursor>)$/;"	f	struct:mtl::gen_cursor_dmat_dmat_mult_ft
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::flat<tag::has_iterator>, tag::flat<tag::has_iterator>)$/;"	f	struct:mtl::gen_dmat_dmat_mult_ft
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::universe, tag::universe)$/;"	f	struct:mtl::gen_cursor_dmat_dmat_mult_ft
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::universe, tag::universe)$/;"	f	struct:mtl::gen_dmat_dmat_mult_ft
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::universe, tag::universe)$/;"	f	struct:mtl::gen_tiling_22_dmat_dmat_mult_ft
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::universe, tag::universe)$/;"	f	struct:mtl::gen_tiling_44_dmat_dmat_mult_ft
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::universe, tag::universe)$/;"	f	struct:mtl::gen_tiling_dmat_dmat_mult_ft
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void apply(MatrixA const& A, MatrixB const& B, MatrixC& C, tag::universe, tag::universe, tag::universe)$/;"	f	struct:mtl::gen_recursive_dmat_dmat_mult_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^		apply(Value& tmp00, Value& tmp01, Value& tmp02, Value& tmp03, Value& tmp04, $/;"	f	struct:mtl::vec::sfunctor::dot_aux
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^		apply(Value& tmp00, Value&, Value&, Value&, Value&, Value&, Value&, Value&, $/;"	f	struct:mtl::vec::sfunctor::dot_aux
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^		static inline apply(const Vector1& v1, const Vector2& v2, ConjOpt conj_opt)$/;"	f	struct:mtl::vec::sfunctor::dot
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hermitian.hpp	/^		static inline result_type apply(const Matrix& A)$/;"	f	struct:mtl::mat::detail::hermitian
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^	static inline result_type apply(const Value& v)$/;"	f	struct:mtl::sfunctor::imag
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^	static inline result_type apply(const std::complex<Value>& v)$/;"	f	struct:mtl::sfunctor::imag
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	void apply(const VectorIn& v, VectorOut& w, boost::mpl::int_<1>) const$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	void apply(const VectorIn& v, VectorOut& w, boost::mpl::int_<2>) const$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	void apply(const VectorIn& v, VectorOut& w, boost::mpl::int_<3>) const$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	void apply(const VectorIn& v, VectorOut& w, boost::mpl::int_<4>) const$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	void apply(const VectorIn& v, VectorOut& w, boost::mpl::int_<5>) const$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	void apply(const VectorIn& v, VectorOut& w, boost::mpl::int_<6>) const$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^	static inline void apply(const Matrix& A, const VectorIn& v, VectorOut& w)$/;"	f	struct:mtl::mat::impl::fully_unroll_mat_cvec_mult
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^	static inline void apply(const Matrix&, const VectorIn&, VectorOut&) {}$/;"	f	struct:mtl::mat::impl::noop
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    inline static void apply(const Matrix& A, Ptrs& ptrs)$/;"	f	struct:mtl::mat::init_ptrs
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    inline static void apply(const Matrix&, Ptrs&) {}$/;"	f	struct:mtl::mat::init_ptrs
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^	static inline Value apply(const Value& v)$/;"	f	struct:mtl::sfunctor::real
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^	static inline result_type apply(const std::complex<Value>& v)$/;"	f	struct:mtl::sfunctor::real
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/resource.hpp	/^	    type inline static apply(const Vector& v) { using mtl::vec::size; return size(v); }$/;"	f	struct:mtl::traits::vector_resource
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    static inline type apply(ref_type& A, size_type row, const irange& col_range)$/;"	f	struct:mtl::RowInMatrix
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^	static inline void apply(const VectorIn& v, const Matrix& A, VectorOut& w)$/;"	f	struct:mtl::vec::impl::fully_unroll_rvec_mat_mult
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^	static inline void apply(const VectorIn&, const Matrix&, VectorOut&) {}$/;"	f	struct:mtl::vec::impl::rvec_mat_noop
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(Value1& v1, const Value2& v2)$/;"	f	struct:mtl::sfunctor::assign
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(Value1& v1, const Value2& v2)$/;"	f	struct:mtl::sfunctor::divide_assign
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(Value1& v1, const Value2& v2)$/;"	f	struct:mtl::sfunctor::minus_assign
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(Value1& v1, const Value2& v2)$/;"	f	struct:mtl::sfunctor::plus_assign
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(Value1& v1, const Value2& v2)$/;"	f	struct:mtl::sfunctor::times_assign
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(argument_type x)$/;"	f	struct:mtl::sfunctor::compose
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(const Value& v) { return -v;  }$/;"	f	struct:mtl::sfunctor::negate
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(const Value& v)$/;"	f	struct:mtl::sfunctor::abs
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(const Value& v)$/;"	f	struct:mtl::sfunctor::identity
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(const Value& v)$/;"	f	struct:mtl::sfunctor::sqrt
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(const Value& v)$/;"	f	struct:mtl::sfunctor::square
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(const Value1& v1, const Value2& v2)$/;"	f	struct:mtl::sfunctor::divide
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(const Value1& v1, const Value2& v2)$/;"	f	struct:mtl::sfunctor::minus
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(const Value1& v1, const Value2& v2)$/;"	f	struct:mtl::sfunctor::plus
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(const Value1& v1, const Value2& v2)$/;"	f	struct:mtl::sfunctor::times
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(first_argument_type x, second_argument_type y)$/;"	f	struct:mtl::sfunctor::compose_binary
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(first_argument_type x, second_argument_type y)$/;"	f	struct:mtl::sfunctor::compose_both
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(first_argument_type x, second_argument_type y)$/;"	f	struct:mtl::sfunctor::compose_first
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    static inline result_type apply(first_argument_type x, second_argument_type y)$/;"	f	struct:mtl::sfunctor::compose_second
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/signum.hpp	/^	static inline Value apply(const Value& v)$/;"	f	struct:mtl::sfunctor::signum
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/signum.hpp	/^	static inline Value apply(const std::complex<Value>& v)$/;"	f	struct:mtl::sfunctor::signum
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    static inline void apply(Value& tmp00, Value& tmp01, Value& tmp02, Value& tmp03, Value& tmp04, $/;"	f	struct:mtl::functor::gen_tiling_smat_dmat_mult_block
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    static inline void apply(Value& tmp00, Value&, Value&, Value&, Value&, $/;"	f	struct:mtl::functor::gen_tiling_smat_dmat_mult_block
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    void apply(MatrixA const& a, MatrixB const& b, MatrixC& c, tag::col_major)$/;"	f	struct:mtl::functor::gen_smat_dmat_mult
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    void apply(MatrixA const& a, MatrixB const& b, MatrixC& c, tag::flat<tag::has_2D_layout>)$/;"	f	struct:mtl::functor::gen_tiling_smat_dmat_mult
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    void apply(MatrixA const& a, MatrixB const& b, MatrixC& c, tag::row_major)$/;"	f	struct:mtl::functor::gen_smat_dmat_mult
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    void apply(MatrixA const& a, MatrixB const& b, MatrixC& c, tag::universe)$/;"	f	struct:mtl::functor::gen_tiling_smat_dmat_mult
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^	    static inline result_type apply(ref_type matrix)$/;"	f	struct:mtl::mat::detail::trans
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void apply(const VectorIn& v, VectorOut& w, boost::mpl::int_<2>) const$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void apply(const VectorIn& v, VectorOut& w, boost::mpl::int_<3>) const$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void inline apply(const VectorIn& v, VectorOut& w, boost::mpl::int_<1>) const$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	static inline result_type apply(const Vector& vector)$/;"	f	struct:mtl::sfunctor::conj_aux
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^    Result static inline apply(const Vector& v)$/;"	f	struct:mtl::vec::reduction
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^    Result static inline apply(const Vector& v, boost::mpl::false_)$/;"	f	struct:mtl::vec::reduction
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^    Result static inline apply(const Vector& v, boost::mpl::true_)$/;"	f	struct:mtl::vec::reduction
apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^	    static inline void apply(E1& first, const E2& second, Size i)$/;"	f	struct:mtl::vec::impl::assign
apply	mass_spring.cpp	/^	virtual Point apply(Node n, double t) {$/;"	f	struct:DampingForce
apply	mass_spring.cpp	/^	virtual Point apply(Node n, double t) {$/;"	f	struct:GravityForce
apply	mass_spring.cpp	/^	virtual void apply(const GraphType& g, double t) {$/;"	f	struct:FireBall
apply	mass_spring.cpp	/^	virtual void apply(const GraphType& g, double t) {$/;"	f	struct:Sphere
apply	mass_spring.cpp	/^	virtual void apply(const GraphType& g, double t) {$/;"	f	struct:TableTop
apply	mass_spring.cpp	/^  virtual Point apply(Node n, double t) {$/;"	f	struct:MassSpringForce
apply2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    void apply2(MatrixA const& a, MatrixB const& b, MatrixC& c, tag::col_major)$/;"	f	struct:mtl::functor::gen_tiling_smat_dmat_mult
apply2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    void apply2(MatrixA const& a, MatrixB const& b, MatrixC& c, tag::row_major)$/;"	f	struct:mtl::functor::gen_tiling_smat_dmat_mult
area	Mesh.hpp	/^		double area() const {$/;"	f	class:Mesh::Triangle
argument_result_conflict	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit argument_result_conflict(const char *s= "Used same object illegally as argument and result.")$/;"	f	struct:mtl::argument_result_conflict
argument_result_conflict	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct argument_result_conflict : public domain_error$/;"	s	namespace:mtl
argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value&                                  argument_type;$/;"	t	struct:mtl::sfunctor::abs
argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value&                                  argument_type;$/;"	t	struct:mtl::sfunctor::identity
argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value&                                  argument_type;$/;"	t	struct:mtl::sfunctor::negate
argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value&                                  argument_type;$/;"	t	struct:mtl::sfunctor::sqrt
argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value&                                  argument_type;$/;"	t	struct:mtl::sfunctor::square
argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticUnaryFunctor<G>::argument_type argument_type;$/;"	t	struct:mtl::sfunctor::compose
armijo	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/armijo.hpp	/^    armijo(Value delta= 0.5, Value gamma= 0.5, Value beta1= 0.25, Value beta2= 0.5)$/;"	f	class:itl::armijo
armijo	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/armijo.hpp	/^class armijo$/;"	c	namespace:itl
array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    enum sparsity {coordinate, array} my_sparsity;$/;"	e	enum:mtl::io::matrix_market_istream::sparsity
array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_array.hpp	/^    const Array& array;$/;"	m	struct:mtl::mat::element_array_t
as_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    typedef typename boost::mpl::at<TypePara, size_type>::type                                            as_size;$/;"	t	struct:mtl::type_para::matrix_parameter_generator
as_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	    typedef typename boost::mpl::at<TypePara, size_type>::type                                            as_size;$/;"	t	struct:mtl::type_para::vector_parameter_generator
as_size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct as_size_type $/;"	s	namespace:mtl
ashape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^    namespace ashape {$/;"	n	namespace:mtl
ashape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^    namespace ashape {$/;"	n	namespace:mtl
ashape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^namespace ashape {$/;"	n	namespace:mtl
ashape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape$/;"	s	namespace:mtl::ashape
ashape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape< mat_cvec_times_expr<E1, E2> >$/;"	s	namespace:mtl::ashape
ashape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape< mtl::mat::mat_mat_times_expr<E1, E2> >$/;"	s	namespace:mtl::ashape
ashape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape< mtl::mat::outer_product_matrix<Vector1, Vector2> >$/;"	s	namespace:mtl::ashape
ashape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape< mtl::vec::mat_cvec_multiplier<Matrix, VectorIn> >$/;"	s	namespace:mtl::ashape
ashape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape< vec::rvec_mat_times_expr<E1, E2> >$/;"	s	namespace:mtl::ashape
ashape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape<itl::pc::solver<PC, Vector, Adjoint> >$/;"	s	namespace:mtl::ashape
ashape	mtl_test.cpp	/^namespace ashape {$/;"	n	namespace:mtl	file:
ashape	poisson.cpp	/^namespace ashape {$/;"	n	namespace:mtl	file:
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^	template <> struct ashape_aux<mtl::mat::identity2D> $/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^	template <> struct ashape_aux<mtl::mat::poisson2D_dirichlet> $/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux< mtl::mat::mat_mat_op_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux< vec::vec_const_ref_expr<Vector> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux< vec::vec_scal_aop_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux< vec::vec_vec_aop_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux< vec::vec_vec_op_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux< vec::vec_vec_pmop_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<Value (*)[Cols]>$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<Value*>$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<Value[Rows]>$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<Value[Rows][Cols]>$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<io::matrix_file<IFStream, OFStream> > $/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::banded_view<Matrix> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::compressed2D<Value, Parameters> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::coordinate2D<Value, Parameters> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::dense2D<Value, Parameters> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::element_structure<Value> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::ell_matrix<Value, Parameters> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::implicit_dense<Functor> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::indirect<Matrix> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::map_view<Functor, Coll> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::morton_dense<Value, Mask, Parameters> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::multi_vector<Vector> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::multi_vector_range<Vector> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::sparse_banded<Value, Parameters> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::mat::transposed_view<const mtl::mat::conj_view<Coll> > >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::vec::conj_view<Coll> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::vec::imag_view<Coll> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::vec::map_view<Functor, Coll> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<mtl::vec::real_view<Coll> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<std::initializer_list<Value> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<std::initializer_list<std::initializer_list<Value> > >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<std::vector<Value, Allocator> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<vec::sparse_vector<Value, Parameters> >$/;"	s	namespace:mtl::ashape
ashape_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ashape_aux<vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::ashape
ashape_aux	mtl_test.cpp	/^struct ashape_aux<IdentityMatrix> {$/;"	s	namespace:mtl::ashape	file:
ashape_aux	poisson.cpp	/^struct ashape_aux<GraphSymmetricMatrix> {$/;"	s	namespace:mtl::ashape	file:
assemble_compressed	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/matrix_algorithms.hpp	/^void assemble_compressed(const ElementStructure& es, Matrix& A) $/;"	f	namespace:mtl::mat
assemble_compressed	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/matrix_algorithms.hpp	/^void assemble_compressed(const ElementStructure& es, Matrix& A, Vector& order) $/;"	f	namespace:mtl::mat
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& assign(const Source& source, Matrix& matrix, ashape::scal)$/;"	f	struct:mtl::mat::crtp_assign
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& assign(const Source& source, Matrix& matrix, typename ashape::ashape<Matrix>::type)$/;"	f	struct:mtl::mat::crtp_assign
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& assign(const Source& source, Matrix& matrix, typename ashape::ashape<Matrix>::type)$/;"	f	struct:mtl::mat::crtp_minus_assign
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& assign(const Source& source, Matrix& matrix, typename ashape::ashape<Matrix>::type)$/;"	f	struct:mtl::mat::crtp_plus_assign
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace assign {}$/;"	n	namespace:mtl
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^namespace mtl { namespace assign {$/;"	n	namespace:mtl
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^namespace mtl { namespace assign {$/;"	n	namespace:mtl
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct assign$/;"	s	namespace:mtl::sfunctor
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^	struct assign$/;"	s	namespace:mtl::vec::impl
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^	struct assign<Max, Max, SFunctor>$/;"	s	namespace:mtl::vec::impl
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    void assign(boost::mpl::false_)$/;"	f	struct:mtl::vec::vec_vec_aop_expr
assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    void assign(boost::mpl::true_)$/;"	f	struct:mtl::vec::vec_vec_aop_expr
assign_assigner	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct assign_assigner$/;"	s	namespace:mtl::vec::detail
assign_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef crtp_matrix_assign<self, Elt, size_type>  assign_base;$/;"	t	class:mtl::mat::compressed2D
assign_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef crtp_matrix_assign<self, Value, size_type>                  assign_base;$/;"	t	class:mtl::mat::coordinate2D
assign_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef crtp_matrix_assign< self, Value, std::size_t >    assign_base;$/;"	t	class:mtl::mat::dense2D
assign_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef crtp_matrix_assign<self, Value, size_type> assign_base;$/;"	t	class:mtl::mat::ell_matrix
assign_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef crtp_matrix_assign< self, Elt, std::size_t >               assign_base;$/;"	t	class:mtl::mat::morton_dense
assign_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    typedef crtp_matrix_assign< self, value_type, size_type >    assign_base;$/;"	t	class:mtl::mat::multi_vector
assign_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef crtp_matrix_assign<self, Value, size_type> assign_base;$/;"	t	class:mtl::mat::sparse_banded
assign_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef crtp_vector_assign< self, Value, std::size_t >                           assign_base;$/;"	t	class:mtl::vec::dense_vector
assign_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef crtp_vector_assign< self, Value, std::size_t >                           assign_base;$/;"	t	class:mtl::vec::strided_vector_ref
assign_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    typedef crtp_vector_assign< self, value_type, std::size_t > assign_base; \/\/ base of crtp_base_vector$/;"	t	class:mtl::vec::unrolled1
assign_decrementer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct assign_decrementer$/;"	s	namespace:mtl::vec::detail
assign_divider	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct assign_divider$/;"	s	namespace:mtl::vec::detail
assign_each_nonzero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_each_nonzero.hpp	/^	inline void assign_each_nonzero(Matrix& m, const Functor& f)$/;"	f	namespace:mtl::mat
assign_each_nonzero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_each_nonzero.hpp	/^	inline void assign_each_nonzero(Vector& v, const Functor& f)$/;"	f	namespace:mtl::vec
assign_incrementer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct assign_incrementer$/;"	s	namespace:mtl::vec::detail
assign_multiplyer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct assign_multiplyer$/;"	s	namespace:mtl::vec::detail
assign_pointers	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void assign_pointers()$/;"	f	class:mtl::mat::umfpack::solver
assign_sum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^struct assign_sum$/;"	s	namespace:mtl::assign
assign_to	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	/^    void assign_to(VectorOut& y) const$/;"	f	struct:itl::pc::solver
assign_to	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	/^    void assign_to(VectorOut& y, boost::mpl::false_) const$/;"	f	struct:itl::pc::solver
assign_to	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	/^    void assign_to(VectorOut& y, boost::mpl::true_) const$/;"	f	struct:itl::pc::solver
assign_to	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^	void assign_to(VectorOut& y) const$/;"	f	struct:mtl::mat::block_diagonal2D::multiplier
assign_to	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assigner.hpp	/^    void assign_to(Vector& tgt) const$/;"	f	struct:mtl::vec::assigner
assign_to	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^    void assign_to(VectorOut& w) const$/;"	f	struct:mtl::vec::mat_cvec_multiplier
assign_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy_assign.hpp	/^    typedef Assign  assign_type;$/;"	t	struct:mtl::lazy_assign
assigner	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assigner.hpp	/^struct assigner : assigner_base$/;"	s	namespace:mtl::vec
assigner_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assigner.hpp	/^struct assigner_base {};$/;"	s	namespace:mtl::vec
associated_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/pseudo_concept.hpp	/^struct associated_type {};$/;"	s
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    void at(size_type r)$/;"	f	struct:itl::pc::ic_0_evaluator
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    Vector& at(size_type i) { return data[i]; }$/;"	f	class:mtl::mat::multi_vector
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    const Vector& at(size_type i) const { return data[i]; }$/;"	f	class:mtl::mat::multi_vector
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	/^    void at(std::size_t i) $/;"	f	struct:mtl::vec::fused_index_evaluator
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^    void at(std::size_t i) $/;"	f	struct:mtl::vec::dot_index_evaluator
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^    void at(std::size_t i) $/;"	f	struct:mtl::vec::reduction_index_evaluator
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    void at(size_type i)$/;"	f	struct:mtl::vec::row_mat_cvec_index_evaluator
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    void at(size_type i, boost::mpl::false_)$/;"	f	struct:mtl::vec::row_mat_cvec_index_evaluator
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    void at(size_type i, boost::mpl::true_)$/;"	f	struct:mtl::vec::row_mat_cvec_index_evaluator
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    value_type& at(size_type i) const { $/;"	f	struct:mtl::vec::vec_scal_aop_expr
at	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    value_type& at(size_type i) const { $/;"	f	struct:mtl::vec::vec_vec_aop_expr
atol	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    Real atol() const { return atol_; }$/;"	f	class:itl::basic_iteration
atol_	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    Real         rtol_, atol_, resid_;$/;"	m	class:itl::basic_iteration
axiom	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/pseudo_concept.hpp	/^struct axiom {};$/;"	s
b	CS207/Color.hpp	/^  value_type r, g, b;$/;"	m	struct:CS207::Color
b	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    value_type a, b;$/;"	m	class:mtl::vec::givens
b_	Examples/expr_template.cpp	/^  const MatExpr<E2>& b_;$/;"	m	struct:MatAdd	file:
b_	Examples/expr_template.cpp	/^  const MatExpr<E2>& b_;$/;"	m	struct:MatMult	file:
b_	Examples/iterator_adaptor.cpp	/^  base_type b_;$/;"	m	class:iterator_adaptor	file:
back	Point.hpp	/^  const_reference back()  const { return elem[2]; }$/;"	f	struct:Point
back	Point.hpp	/^  reference       back()        { return elem[2]; }$/;"	f	struct:Point
backup_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef typename mult_assign_mode<Backup, Assign>::type                      backup_type;$/;"	t	struct:mtl::assign::mult_assign_mode
backward	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    typedef boost::mpl::and_<traits::backward_index_evaluatable<T>, traits::backward_index_evaluatable<U> > backward;$/;"	t	struct:mtl::fused_expr
backward_eval_loop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    void backward_eval_loop(const TT& const_first_eval, const UU& const_second_eval, boost::mpl::false_)$/;"	f	struct:mtl::fused_expr
backward_eval_loop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    void backward_eval_loop(const TT& const_first_eval, const UU& const_second_eval, boost::mpl::true_)$/;"	f	struct:mtl::fused_expr
backward_index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct backward_index_evaluatable $/;"	s	namespace:mtl::traits
backward_index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct backward_index_evaluatable<lazy_assign<V1, itl::pc::solver<itl::pc::ic_0<Matrix, Value>, V2, true>, assign::assign_sum> >$/;"	s	namespace:mtl::traits
backward_index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct backward_index_evaluatable<lazy_assign<V1, itl::pc::solver<itl::pc::ilu<Matrix, Factorizer, Value>, V2, true>, assign::assign_sum> >$/;"	s	namespace:mtl::traits
band_size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef typename boost::make_signed<size_type>::type  band_size_type;$/;"	t	class:mtl::mat::sparse_banded
band_size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef typename matrix_type::band_size_type                             band_size_type;$/;"	t	struct:mtl::mat::sparse_banded_inserter
banded	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct banded {};$/;"	s	namespace:mtl
banded_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	    banded_value(view_type const& view) $/;"	f	struct:mtl::traits::detail::banded_value
banded_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	struct banded_value$/;"	s	namespace:mtl::traits::detail
banded_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    banded_view (self&& that) : my_copy(std::move(that.my_copy)), ref(that.ref), begin(that.begin), end(that.end) {}$/;"	f	struct:mtl::mat::banded_view
banded_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    banded_view(const boost::shared_ptr<Matrix>& p, bsize_type begin, bsize_type end) $/;"	f	struct:mtl::mat::banded_view
banded_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    banded_view(const other& ref, bsize_type begin, bsize_type end) $/;"	f	struct:mtl::mat::banded_view
banded_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^  banded_view (const self& that) : ref(that.ref), begin(that.begin), end(that.end) { assert(that.my_copy.use_count() == 0); }$/;"	f	struct:mtl::mat::banded_view
banded_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^struct banded_view $/;"	s	namespace:mtl::mat
bands	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/bands.hpp	/^    struct bands$/;"	s	namespace:mtl::mat::traits
bands	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/bands.hpp	/^inline bands(const Matrix& A, long begin, long end)$/;"	f	class:mtl::mat::traits::bands
bands	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    std::vector<band_size_type>    bands;$/;"	m	class:mtl::mat::sparse_banded
base	Examples/iterator_adaptor.cpp	/^  base_type& base() {$/;"	f	class:iterator_adaptor
base	Examples/iterator_adaptor.cpp	/^  const base_type& base() const {$/;"	f	class:iterator_adaptor
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu_0.hpp	/^    typedef ilu<Matrix, ilu_0_factorizer, Value> base;$/;"	t	class:itl::pc::ilu_0
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilut.hpp	/^    typedef ilu<Matrix, ilut_factorizer, Value> base;$/;"	t	class:itl::pc::ilut
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    typedef contiguous_memory_block<Value, OnStack, Size> base;$/;"	t	struct:mtl::detail::memory_crtp
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef mtl::detail::base_cursor<int>    base;$/;"	t	struct:mtl::traits::detail::sub_matrix_cursor
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    typedef base_cursor<Key>     base;$/;"	t	struct:mtl::detail::strided_base_cursor
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef base_matrix<typename Matrix::value_type, parameters> base;$/;"	t	struct:mtl::mat::banded_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef compressed_key                base;$/;"	t	struct:mtl::mat::compressed_el_cursor
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef compressed_key                base;$/;"	t	struct:mtl::mat::compressed_minor_cursor
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    typedef map_view<functor_type, transposed_view<Matrix> >       base;$/;"	t	struct:mtl::mat::hermitian_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef implicit_dense<functor_type>      base;$/;"	t	class:mtl::mat::hilbert_matrix
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef implicit_dense<functor_type>      base;$/;"	t	class:mtl::mat::ones_matrix
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef implicit_dense<functor_type>      base;$/;"	t	class:mtl::mat::outer_product_matrix
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef compressed2D_inserter<Value, Parameters, Updater > base;$/;"	t	struct:mtl::mat::inserter
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef coordinate2D_inserter<coordinate2D<Value, Parameters>, Updater>  base;$/;"	t	struct:mtl::mat::inserter
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef ell_matrix_inserter<Value, Parameters, Updater > base;$/;"	t	struct:mtl::mat::inserter
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef mtl::detail::trivial_inserter<Matrix, Updater>     base;$/;"	t	struct:mtl::mat::inserter
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef sparse_banded_inserter<Value, Parameters, Updater>  base;$/;"	t	struct:mtl::mat::inserter
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef map_view<functor_type, Matrix>                              base;$/;"	t	struct:mtl::mat::conj_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef map_view<functor_type, Matrix>                              base;$/;"	t	struct:mtl::mat::imag_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef map_view<functor_type, Matrix>                              base;$/;"	t	struct:mtl::mat::negate_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef map_view<functor_type, Matrix>                              base;$/;"	t	struct:mtl::mat::real_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef map_view<functor_type, Matrix>                             base;$/;"	t	struct:mtl::mat::divide_by_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef map_view<functor_type, Matrix>                          base;$/;"	t	struct:mtl::mat::rscaled_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef map_view<functor_type, Matrix>                         base;$/;"	t	struct:mtl::mat::scaled_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_expr.hpp	/^    typedef mat_expr<Matrix> base;$/;"	t	struct:mtl::mat::dmat_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_expr.hpp	/^    typedef mat_expr<Matrix> base;$/;"	t	struct:mtl::mat::smat_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    typedef mat_mat_minus_expr< E1, E2 > base;$/;"	t	struct:mtl::mat::mv_mv_minus_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    typedef mat_mat_op_expr< E1, E2, mtl::sfunctor::plus<typename E1::value_type, typename E2::value_type> > base;$/;"	t	struct:mtl::mat::dmat_dmat_plus_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    typedef mat_mat_plus_expr< E1, E2 > base;$/;"	t	struct:mtl::mat::mv_mv_plus_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_key<BitMask>                 base;$/;"	t	struct:mtl::mat::morton_dense_col_cursor
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_key<BitMask>                 base;$/;"	t	struct:mtl::mat::morton_dense_el_cursor
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_key<BitMask>                 base;$/;"	t	struct:mtl::mat::morton_dense_row_cursor
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef utilities::const_iterator_adaptor<map_type, cursor_type, value_type> base;$/;"	t	struct:mtl::mat::morton_dense_col_const_iterator
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef utilities::const_iterator_adaptor<map_type, cursor_type, value_type> base;$/;"	t	struct:mtl::mat::morton_dense_row_const_iterator
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef utilities::iterator_adaptor<map_type, cursor_type, value_type> base;$/;"	t	struct:mtl::mat::morton_dense_col_iterator
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef utilities::iterator_adaptor<map_type, cursor_type, value_type> base;$/;"	t	struct:mtl::mat::morton_dense_row_iterator
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef sparse_banded_key<Value, Parameters>          base;$/;"	t	struct:mtl::mat::sparse_banded_cursor
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    typedef meta_math::loop2<Index0, Max0, Index1, Max1>                              base;$/;"	t	struct:mtl::fully_unroll_dmat_dmat_mult_init_block
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    typedef meta_math::loop2<Index0, Max0, Index1, Max1>                              base;$/;"	t	struct:mtl::gen_tiling_dmat_dmat_mult_block
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    typedef meta_math::loop2<Max0, Max0, Max1, Max1>                              base;$/;"	t	struct:mtl::fully_unroll_dmat_dmat_mult_init_block
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    typedef meta_math::loop2<Max0, Max0, Max1, Max1>  base;$/;"	t	struct:mtl::gen_tiling_dmat_dmat_mult_block
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    typedef meta_math::loop3<Index0, Max0, Index1, Max1, Index2, Max2>                              base;$/;"	t	struct:mtl::fully_unroll_dmat_dmat_mult_block
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    typedef meta_math::loop3<Max0, Max0, Max1, Max1, Max2, Max2>                              base;$/;"	t	struct:mtl::fully_unroll_dmat_dmat_mult_block
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^		typedef meta_math::loop1<Index0, Max0>                                    base;$/;"	t	struct:mtl::vec::sfunctor::dot_aux
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^		typedef meta_math::loop1<Max0, Max0>                                      base;$/;"	t	struct:mtl::vec::sfunctor::dot_aux
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_cvec_times_expr.hpp	/^    typedef bin_op_expr< E1, E2 >         base;$/;"	t	struct:mtl::mat_cvec_times_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^	typedef meta_math::loop2<Index0, Max0, Index1, Max1>                              base;$/;"	t	struct:mtl::mat::impl::fully_unroll_mat_cvec_mult
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^	typedef meta_math::loop2<Index0, Max0, Max1, Max1>                              base;$/;"	t	struct:mtl::mat::impl::fully_unroll_mat_cvec_mult
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^	typedef meta_math::loop2<Max0, Max0, Max1, Max1>                              base;$/;"	t	struct:mtl::mat::impl::fully_unroll_mat_cvec_mult
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^	typedef meta_math::loop2<Index0, Max0, Index1, Max1>                              base;$/;"	t	struct:mtl::vec::impl::fully_unroll_rvec_mat_mult
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^	typedef meta_math::loop2<Max0, Max0, Max1, Max1>                              base;$/;"	t	struct:mtl::vec::impl::fully_unroll_rvec_mat_mult
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    typedef meta_math::loop1<Index0, Max0>                                    base;$/;"	t	struct:mtl::functor::gen_tiling_smat_dmat_mult_block
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    typedef meta_math::loop1<Max0, Max0>                                    base;$/;"	t	struct:mtl::functor::gen_tiling_smat_dmat_mult_block
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^    typedef std::pair<Value, bool> base; $/;"	t	struct:mtl::utilities::maybe
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef map_view<functor_type, Vector>                                base;$/;"	t	struct:mtl::vec::negate_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef map_view<functor_type, Vector>                             base;$/;"	t	struct:mtl::vec::divide_by_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef map_view<functor_type, Vector>                          base;$/;"	t	struct:mtl::vec::rscaled_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef map_view<functor_type, Vector>                         base;$/;"	t	struct:mtl::vec::conj_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef map_view<functor_type, Vector>                         base;$/;"	t	struct:mtl::vec::imag_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef map_view<functor_type, Vector>                         base;$/;"	t	struct:mtl::vec::real_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef map_view<functor_type, Vector>                         base;$/;"	t	struct:mtl::vec::scaled_view
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/rvec_mat_times_expr.hpp	/^    typedef bin_op_expr< E1, E2 >         base;$/;"	t	struct:mtl::vec::rvec_mat_times_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_asgn_expr.hpp	/^    typedef vec_scal_aop_expr< E1, E2, mtl::sfunctor::assign<typename E1::value_type, E2> > base;$/;"	t	struct:mtl::vec::vec_scal_asgn_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_div_asgn_expr.hpp	/^		typedef vec_scal_aop_expr< E1, E2, mtl::sfunctor::divide_assign<typename E1::value_type, E2> > base;$/;"	t	struct:mtl::vec::vec_scal_div_asgn_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_minus_asgn_expr.hpp	/^    typedef vec_scal_aop_expr< E1, E2, mtl::sfunctor::minus_assign<typename E1::value_type, E2> > base;$/;"	t	struct:mtl::vec::vec_scal_minus_asgn_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_plus_asgn_expr.hpp	/^    typedef vec_scal_aop_expr< E1, E2, mtl::sfunctor::plus_assign<typename E1::value_type, E2> > base;$/;"	t	struct:mtl::vec::vec_scal_plus_asgn_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_times_asgn_expr.hpp	/^    typedef vec_scal_aop_expr< E1, E2, mtl::sfunctor::times_assign<typename E1::value_type, E2> > base;$/;"	t	struct:mtl::vec::vec_scal_times_asgn_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_asgn_expr.hpp	/^    typedef vec_vec_aop_expr< E1, E2, mtl::sfunctor::assign<typename E1::value_type, typename E2::value_type> > base;$/;"	t	struct:mtl::vec::vec_vec_asgn_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_div_asgn_expr.hpp	/^    typedef vec_vec_aop_expr< E1, E2, mtl::sfunctor::divide_assign<typename E1::value_type, typename E2::value_type> > base;$/;"	t	struct:mtl::vec::vec_vec_div_asgn_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_minus_asgn_expr.hpp	/^    typedef vec_vec_aop_expr< E1, E2, mtl::sfunctor::minus_assign<typename E1::value_type, typename E2::value_type> > base;$/;"	t	struct:mtl::vec::vec_vec_minus_asgn_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_plus_asgn_expr.hpp	/^    typedef vec_vec_aop_expr< E1, E2, mtl::sfunctor::plus_assign<typename E1::value_type, typename E2::value_type> > base;$/;"	t	struct:mtl::vec::vec_vec_plus_asgn_expr
base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_times_asgn_expr.hpp	/^    typedef vec_vec_aop_expr< E1, E2, mtl::sfunctor::times_assign<typename E1::value_type, typename E2::value_type> > base;$/;"	t	struct:mtl::vec::vec_vec_times_asgn_expr
base_assign_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef typename detail::subm_assign<Assign>::type                           base_assign_type;$/;"	t	struct:mtl::assign::mult_assign_mode
base_case_bits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	/^	static const unsigned long base_case_bits= 5, tooth_length = 1;$/;"	m	struct:mtl::detail::opteron_shark_teeth
base_case_bits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_matrix.hpp	/^    static const unsigned long base_case_bits= meta_math::log_2<BaseCaseTest::base_case_size>::value;$/;"	m	struct:mtl::recursion::base_case_matrix
base_case_cast	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_cast.hpp	/^base_case_cast(Matrix const& matrix)$/;"	f	class:mtl::recursion::base_case_matrix
base_case_cast	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_cast.hpp	/^base_case_cast(Matrix& matrix)$/;"	f	class:mtl::recursion::base_case_matrix
base_case_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_matrix.hpp	/^struct base_case_matrix$/;"	s	namespace:mtl::recursion
base_case_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_matrix.hpp	/^struct base_case_matrix<mtl::mat::morton_dense<Elt, Mask, Parameters>, BaseCaseTest>$/;"	s	namespace:mtl::recursion
base_case_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    static const unsigned long base_case_size= BaseCaseSize;$/;"	m	struct:mtl::recursion::bound_test_static
base_case_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    static const unsigned long base_case_size= BaseCaseSize;$/;"	m	struct:mtl::recursion::max_dim_test_static
base_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    base_cursor () {} $/;"	f	class:mtl::detail::base_cursor
base_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    base_cursor (key_type key) : key(key) {}$/;"	f	class:mtl::detail::base_cursor
base_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^template <class Key> class base_cursor $/;"	c	namespace:mtl::detail
base_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef compressed2D_inserter<Value, Parameters, Updater>   base_inserter;$/;"	t	struct:mtl::mat::ell_matrix_inserter
base_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    base_matrix(size_type n= 0) :  my_nnz(n) {}$/;"	f	struct:mtl::mat::base_matrix
base_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    explicit base_matrix(mtl::non_fixed::dimensions d, size_type n= 0) : dim(d), my_nnz(n) {}$/;"	f	struct:mtl::mat::base_matrix
base_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^struct base_matrix $/;"	s	namespace:mtl::mat
base_mult_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef typename mult_assign_mode<BaseMult, base_assign_type>::type          base_mult_type;$/;"	t	struct:mtl::assign::mult_assign_mode
base_part_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    >::type base_part_type;$/;"	t	class:mtl::generate_mask
base_sub_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    base_sub_matrix() $/;"	f	struct:mtl::mat::base_sub_matrix
base_sub_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    explicit base_sub_matrix(const dim_type& d) $/;"	f	struct:mtl::mat::base_sub_matrix
base_sub_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    explicit base_sub_matrix(size_type br, size_type er, size_type bc, size_type ec) : my_nnz(0)$/;"	f	struct:mtl::mat::base_sub_matrix
base_sub_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^struct base_sub_matrix $/;"	s	namespace:mtl::mat
base_test	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    typedef  BaseTest                   base_test;$/;"	t	struct:mtl::mat::recursive_cholesky_visitor_t
basic_iteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    basic_iteration(Real nb, int max_iter_, Real t, Real a = Real(0))$/;"	f	class:itl::basic_iteration
basic_iteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    basic_iteration(const Vector& r0, int max_iter_, Real t, Real a = Real(0))$/;"	f	class:itl::basic_iteration
basic_iteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^class basic_iteration$/;"	c	namespace:itl
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type begin(Collection const& collection)$/;"	f	struct:mtl::traits::detail::dense_element_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type begin(Cursor const& c) const { return type(c.ref, 0, c.value()); }$/;"	f	struct:mtl::traits::detail::all_rows_in_col_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type begin(Cursor const& c) const { return type(c.ref, c.value(), size_type(0)); }$/;"	f	struct:mtl::traits::detail::all_cols_in_row_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type begin(Matrix const& c) const$/;"	f	struct:mtl::traits::detail::all_cols_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type begin(Matrix const& c) const$/;"	f	struct:mtl::traits::detail::all_rows_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type begin(Matrix const& matrix) const$/;"	f	struct:mtl::traits::detail::all_offsets_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type begin(Ref& c)$/;"	f	struct:mtl::traits::detail::strided_element_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type begin(const Coll& c)$/;"	f	struct:mtl::traits::detail::referred_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    bsize_type        begin, end;$/;"	m	struct:mtl::mat::banded_view
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	type begin(cursor const& c)$/;"	f	struct:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	type begin(cursor_type const& cursor) const$/;"	f	struct:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    type begin(matrix_ref_type A) const { return type(A, 0, 0); }$/;"	f	struct:mtl::mat::coordinate_col_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    type begin(matrix_ref_type A) const { return type(A, 0, 0); }$/;"	f	struct:mtl::mat::coordinate_row_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    type begin(outer_cursor_type c) const { return type(c.ref, c.offset); }$/;"	f	struct:mtl::mat::coordinate_minor_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    type begin(cursor const& c) const$/;"	f	struct:mtl::traits::detail::dense2D_iterator_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	type begin(cursor const& c) const$/;"	f	struct:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    type begin(cursor const& c)$/;"	f	struct:mtl::traits::detail::morton_dense_iterator_range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	type begin(Matrix const& matrix)$/;"	f	struct:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	type begin(cursor const& c) const$/;"	f	struct:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	type begin(cursor const& c)$/;"	f	struct:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	type begin(cursor_type const& cursor) const$/;"	f	struct:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^		type begin(mtl::mat::transposed_view<Matrix> const& m)$/;"	f	struct:mtl::traits::detail::range_transposer_impl
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^	cursor_type begin() const { return my_start; } $/;"	f	class:mtl::irange
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^    type begin(const Matrix& matrix) const$/;"	f	struct:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^inline begin(Collection const& c)$/;"	f	class:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^inline begin(Collection& c)$/;"	f	class:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^    type begin() const { return gen_type::begin(c); } \/\/< nullary begin $/;"	f	struct:mtl::traits::range_wrapper
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^	type begin(collection_t& collection)$/;"	f	struct:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^	type begin(const collection_t& collection) const$/;"	f	struct:mtl::traits::range_generator
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    const_pointer begin() const { return this->elements() ; }$/;"	f	class:mtl::vec::dense_vector
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    pointer begin() { return this->elements() ; }$/;"	f	class:mtl::vec::dense_vector
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    const_iterator begin() const { return const_iterator(data, my_stride); }$/;"	f	class:mtl::vec::strided_vector_ref
begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    iterator begin() { return iterator(data, my_stride); }$/;"	f	class:mtl::vec::strided_vector_ref
begin	Point.hpp	/^  const_iterator  begin() const { return elem; }$/;"	f	struct:Point
begin	Point.hpp	/^  iterator        begin()       { return elem; }$/;"	f	struct:Point
begin_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type begin_col() const $/;"	f	struct:mtl::mat::base_matrix
begin_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type begin_col() const $/;"	f	struct:mtl::mat::base_sub_matrix
begin_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    size_type begin_col() const { return ref.begin_col(); }$/;"	f	struct:mtl::mat::map_view
begin_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    size_type begin_col() const { return ref.begin_row(); }$/;"	f	struct:mtl::mat::transposed_view
begin_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    type begin_dispatch(cursor const& c, glas::tag::col) const$/;"	f	struct:mtl::traits::detail::dense2D_iterator_range_generator
begin_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    type begin_dispatch(cursor const& c, glas::tag::row) const$/;"	f	struct:mtl::traits::detail::dense2D_iterator_range_generator
begin_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    type begin_dispatch(cursor const& c, glas::tag::col)$/;"	f	struct:mtl::traits::detail::morton_dense_iterator_range_generator
begin_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    type begin_dispatch(cursor const& c, glas::tag::row)$/;"	f	struct:mtl::traits::detail::morton_dense_iterator_range_generator
begin_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type begin_row() const $/;"	f	struct:mtl::mat::base_matrix
begin_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type begin_row() const $/;"	f	struct:mtl::mat::base_sub_matrix
begin_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    size_type begin_row() const { return ref.begin_row(); }$/;"	f	struct:mtl::mat::map_view
begin_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    size_type begin_row() const { return ref.begin_col(); }$/;"	f	struct:mtl::mat::transposed_view
beta	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/armijo.hpp	/^    Value delta, gamma, beta1, beta;$/;"	m	class:itl::armijo
beta1	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/armijo.hpp	/^    Value delta, gamma, beta1, beta;$/;"	m	class:itl::armijo
beta1	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/wolf.hpp	/^    Value delta, gamma, beta1, beta2; $/;"	m	class:itl::wolf
beta2	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/wolf.hpp	/^    Value delta, gamma, beta1, beta2; $/;"	m	class:itl::wolf
bfgs	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/bfgs.hpp	/^struct bfgs$/;"	s	namespace:itl
bicg	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicg.hpp	/^int bicg(const LinearOperator &A, Vector &x, const Vector &b,$/;"	f	namespace:itl
bicg_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicg.hpp	/^    bicg_solver(const LinearOperator& A, const Preconditioner& L) : A(A), L(L) $/;"	f	class:itl::bicg_solver
bicg_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicg.hpp	/^    explicit bicg_solver(const LinearOperator& A) : A(A), L(A) $/;"	f	class:itl::bicg_solver
bicg_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicg.hpp	/^class bicg_solver$/;"	c	namespace:itl
bicgstab	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab.hpp	/^int bicgstab(const LinearOperator& A, HilbertSpaceX& x, const HilbertSpaceB& b, $/;"	f	namespace:itl
bicgstab_2	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_2.hpp	/^int bicgstab_2(const LinearOperator &A, Vector &x, const Vector &b,$/;"	f	namespace:itl
bicgstab_2_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_2.hpp	/^    bicgstab_2_solver(const LinearOperator& A, const Preconditioner& L) : A(A), L(L) $/;"	f	class:itl::bicgstab_2_solver
bicgstab_2_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_2.hpp	/^    explicit bicgstab_2_solver(const LinearOperator& A) : A(A), L(A) $/;"	f	class:itl::bicgstab_2_solver
bicgstab_2_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_2.hpp	/^class bicgstab_2_solver$/;"	c	namespace:itl
bicgstab_ell	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^int bicgstab_ell(const LinearOperator &A, Vector &x, const Vector &b,$/;"	f	namespace:itl
bicgstab_ell_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^    bicgstab_ell_solver(const LinearOperator& A, size_t l, const Preconditioner& L) : A(A), l(l), L(L), R(A) {}$/;"	f	class:itl::bicgstab_ell_solver
bicgstab_ell_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^    bicgstab_ell_solver(const LinearOperator& A, size_t l, const Preconditioner& L, const RightPreconditioner& R) $/;"	f	class:itl::bicgstab_ell_solver
bicgstab_ell_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^    explicit bicgstab_ell_solver(const LinearOperator& A, size_t l= 8) : A(A), l(l), L(A), R(A) {}$/;"	f	class:itl::bicgstab_ell_solver
bicgstab_ell_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^class bicgstab_ell_solver$/;"	c	namespace:itl
bicgstab_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab.hpp	/^    bicgstab_solver(const LinearOperator& A, const Preconditioner& L) : A(A), L(L) $/;"	f	class:itl::bicgstab_solver
bicgstab_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab.hpp	/^    explicit bicgstab_solver(const LinearOperator& A) : A(A), L(A) $/;"	f	class:itl::bicgstab_solver
bicgstab_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab.hpp	/^class bicgstab_solver$/;"	c	namespace:itl
bin_op_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/bin_op_expr.hpp	/^    bin_op_expr( first_argument_type const& v1, second_argument_type const& v2 )$/;"	f	struct:mtl::bin_op_expr
bin_op_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/bin_op_expr.hpp	/^struct bin_op_expr$/;"	s	namespace:mtl
binary_heap	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	binary_heap($/;"	f	class:utils::binary_heap
binary_heap	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^class binary_heap {$/;"	c	namespace:utils
bit_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    static T const       bit_mask = BitMask,$/;"	m	struct:mtl::dilated::dilated_int
bitwise_and	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct bitwise_and : public std::binary_function<Element, Element, Element>$/;"	s	namespace:math
bitwise_or	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct bitwise_or : public std::binary_function<Element, Element, Element>$/;"	s	namespace:math
bitwise_xor	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct bitwise_xor : public std::binary_function<Element, Element, Element>$/;"	s	namespace:math
block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    block_type const& block(size_type i) const$/;"	f	class:mtl::mat::block_diagonal2D
block_diagonal2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    explicit block_diagonal2D(size_type rows, size_type cols, size_type init_size= 0)$/;"	f	class:mtl::mat::block_diagonal2D
block_diagonal2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^class block_diagonal2D $/;"	c	namespace:mtl::mat
block_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    typedef std::vector<Matrix>       block_matrix_type;$/;"	t	class:mtl::mat::block_diagonal2D
block_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	typedef mtl::mat::dense2D<value_type>  block_type;$/;"	t	class:itl::pc::imf_preconditioner
block_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    typedef Matrix		      block_type;$/;"	t	class:mtl::mat::block_diagonal2D
blocks	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    block_matrix_type   blocks;$/;"	m	class:mtl::mat::block_diagonal2D
blong	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef boost::mpl::bool_<long_indices>           blong;$/;"	t	class:mtl::mat::umfpack::solver
bool	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void change_dim(size_type MTL_DEBUG_ARG(r), size_type MTL_DEBUG_ARG(c), bool, boost::mpl::true_)$/;"	m	class:mtl::mat::dense2D
bottom	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct bottom$/;"	s	namespace:mtl::tag
bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    size_type bound() const$/;"	f	struct:mtl::mat::recursator
bound_test	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    bound_test(std::size_t comp) : comp(comp) {}$/;"	f	struct:mtl::recursion::bound_test
bound_test	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^struct bound_test$/;"	s	namespace:mtl::recursion
bound_test_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^struct bound_test_static$/;"	s	namespace:mtl::recursion
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^	bracket_proxy(self& ref, size_type row) : ref(ref), row(row) {}$/;"	f	struct:mtl::detail::trivial_inserter::bracket_proxy
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    struct bracket_proxy$/;"	s	struct:mtl::detail::trivial_inserter
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	bracket_proxy(self& ref, size_type row) : ref(ref), row(row) {}$/;"	f	struct:mtl::mat::compressed2D_inserter::bracket_proxy
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    struct bracket_proxy$/;"	s	struct:mtl::mat::compressed2D_inserter
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^	bracket_proxy(self& ref, size_type row) : ref(ref), row(row) {}$/;"	f	struct:mtl::mat::coordinate2D_inserter::bracket_proxy
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    struct bracket_proxy$/;"	s	struct:mtl::mat::coordinate2D_inserter
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^	bracket_proxy(BaseInserter& ref, Mapper& map, size_type row) $/;"	f	struct:mtl::mat::mapped_inserter::bracket_proxy
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^    struct bracket_proxy$/;"	s	class:mtl::mat::mapped_inserter
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^	bracket_proxy(BaseInserter& ref, size_type row, size_type col_offset) : ref(ref), row(row), col_offset(col_offset) {}$/;"	f	struct:mtl::mat::shifted_inserter::bracket_proxy
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    struct bracket_proxy$/;"	s	class:mtl::mat::shifted_inserter
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	bracket_proxy(self& ref, size_type row) : ref(ref), row(row) {}$/;"	f	struct:mtl::mat::sparse_banded_inserter::bracket_proxy
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    struct bracket_proxy$/;"	s	struct:mtl::mat::sparse_banded_inserter
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	explicit bracket_proxy(Ref matrix, size_type row) : matrix(matrix), row(row) {}$/;"	f	struct:mtl::operations::bracket_proxy
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^    struct bracket_proxy$/;"	s	namespace:mtl::operations
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^	bracket_proxy(const size_type p, buffer_type& b) : p(p), buffer(b) {}$/;"	f	struct:mtl::vec::extracter::bracket_proxy
bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    struct bracket_proxy $/;"	s	class:mtl::vec::extracter
broyden	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/broyden.hpp	/^struct broyden$/;"	s	namespace:itl
bsize_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef long int                                   bsize_type;$/;"	t	struct:mtl::mat::banded_view
buffer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^	buffer_type& buffer;$/;"	m	struct:mtl::vec::extracter::bracket_proxy
buffer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    buffer_type* buffer;$/;"	m	class:mtl::vec::extracter
buffer_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    typedef indexbuffer< Vector >                   buffer_type;$/;"	t	class:mtl::vec::extracter
build_heap	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	void build_heap($/;"	f	class:utils::binary_heap
build_heap_rec	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	void build_heap_rec(value_type node) {$/;"	f	class:utils::binary_heap
c	Examples/iterator_adaptor.cpp	/^  std::vector<int>& c;$/;"	m	struct:my_position_iterator	file:
c	Examples/iterator_adaptor_boost.cpp	/^  std::vector<int>& c;$/;"	m	struct:my_position_iterator	file:
c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^	SizeType       r, c;$/;"	m	struct:mtl::mat::crtp_matrix_assign::scalar_assign
c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	size_type r, c;$/;"	m	struct:mtl::non_fixed::dimensions
c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    value_type c, s;$/;"	m	class:mtl::mat::givens
c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    value_type c, s, eps;$/;"	m	class:mtl::mat::qr_givens_solver
c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^    const Collection& c;$/;"	m	struct:mtl::traits::range_wrapper
c_index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	/^struct c_index {};$/;"	s	namespace:mtl::index
c_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_t c_offset(size_t r, size_t c) const$/;"	f	class:mtl::mat::dense2D
c_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    enum c_t {own,         \/\/< My own memory: allocate and free it$/;"	g	struct:mtl::detail::contiguous_memory_block
c_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    enum c_t {own};$/;"	g	struct:mtl::detail::contiguous_memory_block
cached	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct cached : boost::mpl::int_<1> {};$/;"	s	namespace:mtl::complexity_classes
calc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    void calc() {$/;"	f	class:mtl::mat::eigenvalue_solver
calc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    void calc() $/;"	f	class:mtl::mat::qr_givens_solver
camera_	CS207/SDLViewer.hpp	/^  GLCamera camera_;$/;"	m	class:CS207::SDLViewer
cap_	Examples/trivial_copy.cpp	/^  size_t cap_;$/;"	m	class:Vector	file:
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    enum c_t                                  category;$/;"	m	struct:mtl::detail::contiguous_memory_block	typeref:enum:mtl::detail::contiguous_memory_block::c_t
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    static const c_t category= own;$/;"	m	struct:mtl::detail::contiguous_memory_block
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mat::conj_view<Matrix> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mat::hermitian_view<mtl::mat::multi_vector<Vector> > >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::mat::banded_view<Matrix> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::mat::divide_by_view<Matrix,Divisor> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::mat::rscaled_view<Matrix,RScaling> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::mat::scaled_view<Scaling, Matrix> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::mat::transposed_view< mtl::mat::multi_vector<Vector> > >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::conj_view<Vector> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::dense_vector<T, Parameters> > $/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::divide_by_view<Vector,Divisor> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::map_view<Functor, Vector> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::mat_cvec_multiplier<Matrix, VectorIn> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::negate_view<Vector> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::rscaled_view<Vector,RScaling> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::scaled_view<Scaling, Vector> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::sparse_vector<T, Parameters> > $/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::strided_vector_ref<T, Parameters> > $/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< mtl::vec::vec_vec_pmop_expr<E1,E2, SFunctor> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category< std::vector<T> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<const T>$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<itl::pc::solver<PC, Vector, Adjoint> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::compressed2D<Elt, Parameters> > $/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::coordinate2D<Elt, Parameters> > $/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::dense2D<Value, Parameters> > $/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::element_structure<Value> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::ell_matrix<Value, Parameters> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::hilbert_matrix<Value> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::implicit_dense<Functor> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::indirect<Matrix> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::map_view<Functor, Matrix> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::morton_dense<Elt, BitMask, Parameters> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::multi_vector<Vector> > $/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::multi_vector_range<Vector> > $/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::ones_matrix<Value> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::outer_product_matrix<Vector1, Vector2> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::sparse_banded<Elt, Parameters> > $/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^struct category<mtl::mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^template <typename Collection> struct category $/;"	s	namespace:mtl::traits
category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^  struct category< vec_vec_asgn_expr<E1,E2> > $/;"	s	namespace:mtl::traits
cbegin	Point.hpp	/^  const_iterator cbegin() const { return elem; }$/;"	f	struct:Point
cend	Point.hpp	/^  const_iterator   cend() const { return elem+3; }$/;"	f	struct:Point
center_view	CS207/SDLViewer.hpp	/^  void center_view() {$/;"	f	class:CS207::SDLViewer
cg	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cg.hpp	/^int cg(const LinearOperator& A, HilbertSpaceX& x, const HilbertSpaceB& b, $/;"	f	namespace:itl
cg_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cg.hpp	/^    cg_solver(const LinearOperator& A, const Preconditioner& L) : A(A), L(L) $/;"	f	class:itl::cg_solver
cg_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cg.hpp	/^    explicit cg_solver(const LinearOperator& A) : A(A), L(A) $/;"	f	class:itl::cg_solver
cg_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cg.hpp	/^class cg_solver$/;"	c	namespace:itl
cgs	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cgs.hpp	/^int cgs(const LinearOperator &A, Vector &x, const Vector &b,$/;"	f	namespace:itl
cgs_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cgs.hpp	/^    cgs_solver(const LinearOperator& A, const Preconditioner& L) : A(A), L(L) $/;"	f	class:itl::cgs_solver
cgs_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cgs.hpp	/^    explicit cgs_solver(const LinearOperator& A) : A(A), L(A) $/;"	f	class:itl::cgs_solver
cgs_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cgs.hpp	/^class cgs_solver$/;"	c	namespace:itl
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    void change_dim(size_type r, size_type c) {	change_dim(r, c, static_bool()); }    $/;"	f	struct:mtl::mat::base_matrix
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    void change_dim(size_type r, size_type c, boost::mpl::false_) { dim= dim_type(r, c); }    $/;"	f	struct:mtl::mat::base_matrix
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    void change_dim(size_type r, size_type c, boost::mpl::true_) { check_dim(r, c); }    $/;"	f	struct:mtl::mat::base_matrix
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    void change_dim(fixed::dimensions<Rows, Cols> d) { check_dim(d.num_rows(), d.num_cols()); } $/;"	f	struct:mtl::mat::base_sub_matrix
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    void change_dim(non_fixed::dimensions d) { constructor_helper(d); }    $/;"	f	struct:mtl::mat::base_sub_matrix
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    void change_dim(size_type r, size_type c) {	change_dim(dim_type(r, c));  }    $/;"	f	struct:mtl::mat::base_sub_matrix
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void change_dim(size_type r, size_type c)$/;"	f	class:mtl::mat::compressed2D
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void change_dim(size_type r, size_type c, bool keep_data = false)$/;"	f	class:mtl::mat::dense2D
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void change_dim(size_type r, size_type c, bool keep_data, boost::mpl::false_)$/;"	f	class:mtl::mat::dense2D
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    void change_dim(size_type r, size_type c)$/;"	f	class:mtl::mat::ell_matrix
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    void change_dim(size_type num_rows, size_type num_cols)$/;"	f	class:mtl::mat::morton_dense
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    void change_dim(size_type r, size_type c)$/;"	f	class:mtl::mat::multi_vector
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    void change_dim(size_type r, size_type c, boost::mpl::false_)$/;"	f	class:mtl::mat::multi_vector
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    void change_dim(size_type r, size_type c, boost::mpl::true_)$/;"	f	class:mtl::mat::multi_vector
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    void change_dim(size_type r, size_type c) $/;"	f	class:mtl::mat::sparse_banded
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    void change_dim(size_type n) { this->realloc(n); } \/\/\/< Change dimension of vector$/;"	f	class:mtl::vec::dense_vector
change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    void change_dim(size_type d) { ref.change_dim(d); }$/;"	f	class:mtl::vec::unrolled1
change_from	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	/^template <class T> inline T change_from(c_index, T i) $/;"	f	namespace:mtl::index
change_from	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	/^template <class T> inline T change_from(f_index, T i) $/;"	f	namespace:mtl::index
change_resource	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    void change_resource(size_type n) { this->realloc(n); } \/\/\/< Change resource, like \\ref change_dim$/;"	f	class:mtl::vec::dense_vector
change_static_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit change_static_size(const char *s= "You try to change a fixed size (to another value).")$/;"	f	struct:mtl::change_static_size
change_static_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct change_static_size : public domain_error$/;"	s	namespace:mtl
change_to	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	/^template <class T> inline T change_to(c_index, T i) $/;"	f	namespace:mtl::index
change_to	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	/^template <class T> inline T change_to(f_index, T i) $/;"	f	namespace:mtl::index
check	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	inline void check(int res, $/;"	f	namespace:mtl::mat::umfpack
check	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void check() const { MTL_DEBUG_THROW_IF(inserting, access_during_insertion()); }$/;"	f	class:mtl::mat::compressed2D
check	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    void check() const { MTL_DEBUG_THROW_IF(inserting, access_during_insertion()); }$/;"	f	class:mtl::mat::sparse_banded
check	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	struct check$/;"	s	namespace:mtl::type_para
check	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	struct check<boost::mpl::pair<Key, none> > { typedef int type; };$/;"	s	namespace:mtl::type_para
check_consistent_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    void check_consistent_shape( vec_expr<E> const& ) const$/;"	f	class:mtl::vec::dense_vector
check_consistent_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    void check_consistent_shape( vec_expr<E> const& ) const$/;"	f	class:mtl::vec::strided_vector_ref
check_dummy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	    typedef typename check<boost::mpl::pair<kind, value> >::type    check_dummy;$/;"	t	struct:mtl::type_para::set_para
check_entry	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hessian_setup.hpp	/^    void inline check_entry(Matrix const& C, unsigned long r, unsigned long c, $/;"	f	namespace:mtl::mat::impl
check_gl_error	CS207/SDLViewer.hpp	/^  void check_gl_error(const char* context = nullptr) {$/;"	f	class:CS207::SDLViewer
check_hessian_matrix_product	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hessian_setup.hpp	/^void check_hessian_matrix_product(Matrix const& C, typename Matrix::size_type reduced_dim, double factor= 1.0)$/;"	f	namespace:mtl::mat
check_indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    bool check_indices(size_t r, size_t c) const$/;"	f	class:mtl::mat::dense2D
check_max	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool check_max()$/;"	f	class:itl::basic_iteration
check_odd	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^    struct check_odd$/;"	s	namespace:meta_math::impl
check_odd	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^    struct check_odd<x, true>$/;"	s	namespace:meta_math::impl
check_ready_resource	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    void check_ready_resource(const Src& src) const $/;"	f	struct:mtl::mat::crtp_matrix_assign
check_resource	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    void check_resource(const Src& src) const $/;"	f	struct:mtl::mat::crtp_matrix_assign
check_resource	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    void check_resource(const Src& src, tag::universe) const $/;"	f	struct:mtl::mat::crtp_matrix_assign
check_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    void check_shape() const {} \/\/ consistency of shapes depend on operation$/;"	f	struct:mtl::mat::mat_mat_op_expr
check_stream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void check_stream(const std::string& file_name= std::string()) \/\/ not const to delete new_stream$/;"	f	class:mtl::io::matrix_market_istream
checked_change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    void checked_change_dim(SizeType r, SizeType c)$/;"	f	struct:mtl::mat::crtp_matrix_assign
checked_change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    void checked_change_dim(SizeType s)$/;"	f	struct:mtl::vec::crtp_vector_assign
checked_change_dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    void checked_change_dim(size_type n) { check_dim(n); change_dim(n); } \/\/\/< Only change dim if it was empty before$/;"	f	class:mtl::vec::dense_vector
checked_change_resource	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    void checked_change_resource(const Src& src) $/;"	f	struct:mtl::mat::crtp_matrix_assign
checked_change_resource	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    void checked_change_resource(const Src1& src1, const Src2& src2)$/;"	f	struct:mtl::mat::crtp_matrix_assign
checked_change_resource	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    void checked_change_resource(const Src& src) $/;"	f	struct:mtl::vec::crtp_vector_assign
checked_change_resource_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    void checked_change_resource_aux(const Src1& src1, const Src2& src2, tag::universe) $/;"	f	struct:mtl::mat::crtp_matrix_assign
checked_change_resource_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    void checked_change_resource_aux(const Src& src, boost::mpl::false_) $/;"	f	struct:mtl::vec::crtp_vector_assign
cholesky	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void cholesky(Recursator recursator, Visitor vis)$/;"	f	namespace:mtl::mat::with_recursator
cholesky_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void cholesky_base (Matrix & matrix)$/;"	f	namespace:mtl::mat::with_bracket
cholesky_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void cholesky_base(Matrix & matrix) const$/;"	f	struct:mtl::mat::recursive_cholesky_visitor_t
cholesky_base_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    struct cholesky_base_t$/;"	s	namespace:mtl::mat::with_bracket
clean_carry	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    typedef masking<T, BitMask, Normalized>         clean_carry;$/;"	t	struct:mtl::dilated::dilated_int
clear	BoundingBox.hpp	/^  BoundingBox& clear() {$/;"	f	class:BoundingBox
clear	CS207/SDLViewer.hpp	/^  void clear() {$/;"	f	class:CS207::SDLViewer
clear	Graph.hpp	/^  void clear() {$/;"	f	class:Graph
clear	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    void clear() {$/;"	f	class:mtl::mat::element
clock	CS207/Util.hpp	/^  typedef std::chrono::high_resolution_clock clock;$/;"	t	class:CS207::Clock
clock	Examples/openmp.cpp	/^  CS207::Clock clock;$/;"	m	struct:Timer	file:
clone	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/clone.hpp	/^clone(const T& x) $/;"	f	namespace:mtl
clone_ctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    struct clone_ctor {};$/;"	s	namespace:mtl
cloned	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    bool        cloned;$/;"	m	class:mtl::vec::strided_vector_ref
close	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void close() { if (new_stream) new_stream->close(); }$/;"	f	class:mtl::io::matrix_market_istream
close	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void close() { if (new_stream) new_stream->close(); }$/;"	f	class:mtl::io::matrix_market_ostream
cmp_first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    struct cmp_first$/;"	s	namespace:mtl::mat::detail
code	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    int code;$/;"	m	struct:mtl::mat::umfpack::error
code	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^		static const unsigned code= mtl::traits::view_toggle_conj<mtl::traits::view_code<Matrix> >::value;$/;"	m	struct:mtl::mat::detail::conj_trait
code	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hermitian.hpp	/^		static const unsigned code= mtl::traits::view_toggle_hermitian<mtl::traits::view_code<Matrix> >::value;$/;"	m	struct:mtl::mat::detail::hermitian
code	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^	    static const unsigned code= (mtl::traits::view_code<Matrix>::value | IsConst) ^ 4;$/;"	m	struct:mtl::mat::detail::trans
coeff_	mass_spring.cpp	/^	scalar coeff_;$/;"	m	struct:DampingForce	file:
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    struct col<banded_view<Matrix> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^	size_type row, col;$/;"	m	struct:mtl::mat::coordinate2D_inserter::update_proxy
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_t col(const dense2D<Value, Parameters>& ma, $/;"	f	class:mtl::mat::dense2D_indexer
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_t col(size_t offset, size_t ldim, col_major) const $/;"	f	class:mtl::mat::dense2D_indexer
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_t col(size_t offset, size_t ldim, row_major) const $/;"	f	class:mtl::mat::dense2D_indexer
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^struct col< mtl::mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    struct col<mtl::mat::map_view<Functor, Matrix> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct col< mtl::mat::conj_view<Matrix> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct col< mtl::mat::divide_by_view<Matrix, Divisor> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct col< mtl::mat::rscaled_view<Matrix, RScaling> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct col< mtl::mat::scaled_view<Scaling, Matrix> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    size_type col() const$/;"	f	struct:mtl::mat::morton_dense_key
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    struct col<mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    SizeType   row, col;$/;"	m	struct:mtl::operations::update_proxy
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/glas_tag.hpp	/^struct col {};$/;"	s	namespace:glas::tag
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct col<mtl::mat::compressed2D<Elt, Parameters> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct col<mtl::mat::coordinate2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct col<mtl::mat::dense2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct col<mtl::mat::hilbert_matrix<Value> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct col<mtl::mat::implicit_dense<Functor> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct col<mtl::mat::indirect<Matrix> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct col<mtl::mat::morton_dense<Elt, BitMask, Parameters> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct col<mtl::mat::ones_matrix<Value> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct col<mtl::mat::outer_product_matrix<Vector1, Vector2> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct col<mtl::mat::sparse_banded<Value, Parameters> >$/;"	s	namespace:mtl::traits
col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^template <class Matrix> struct col {};$/;"	s	namespace:mtl::traits
col_a	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	typename mtl::traits::col<Matrix>::type          col_a; $/;"	m	struct:mtl::mat::detail::lower_trisolve_t
col_a	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	typename mtl::traits::col<Matrix>::type          col_a; $/;"	m	struct:mtl::mat::detail::upper_trisolve_t
col_in_element_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    col_in_element_key(const matrix_type&) {} $/;"	f	struct:mtl::detail::col_in_element_key
col_in_element_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct col_in_element_key$/;"	s	namespace:mtl::detail
col_in_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    col_in_key(const matrix_type&) {} $/;"	f	struct:mtl::detail::col_in_key
col_in_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct col_in_key$/;"	s	namespace:mtl::detail
col_init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void col_init(size_type, Cursor&, Cursor&, Value& rr, Value& res, tag::unit_diagonal) const$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
col_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct col_major {};$/;"	s	namespace:mtl
col_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct col_major {};$/;"	s	namespace:mtl::tag
col_major_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct col_major_mask$/;"	s	namespace:mtl
col_major_shark_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct col_major_shark_mask$/;"	s	namespace:mtl
col_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^inline col_map(const Matrix& A)$/;"	f	class:mtl::mat::mtl::traits::col
col_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^	size_type       row, col_offset;$/;"	m	struct:mtl::mat::shifted_inserter::bracket_proxy
col_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    size_type    row_offset, col_offset;$/;"	m	class:mtl::mat::shifted_inserter
col_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type col_split() const$/;"	f	struct:mtl::recursion::half_splitter
col_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type col_split() const$/;"	f	struct:mtl::recursion::max_dim_splitter
col_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type col_split() const$/;"	f	struct:mtl::recursion::outer_bound_splitter
col_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type col_split() const$/;"	f	struct:mtl::recursion::separate_dim_splitter
col_traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	typedef ColumnInMatrix<typename boost::remove_reference<Ref>::type> col_traits;$/;"	t	struct:mtl::operations::range_bracket_proxy
col_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct col_vector : virtual vector {};$/;"	s	namespace:mtl::tag
coll	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    const collection_type& coll;$/;"	m	struct:mtl::detail::index_from_offset
collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^	const Collection& collection;$/;"	m	struct:mtl::detail::with_format_t
collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct collection : virtual universe {};$/;"	s	namespace:mtl::tag
collection_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^	typedef mtl::vec::dense_vector<Value, Parameters>   collection_t;$/;"	t	struct:mtl::traits::range_generator
collection_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Collection                      collection_type;$/;"	t	struct:mtl::detail::index_from_offset
colors_	CS207/SDLViewer.hpp	/^  std::vector<Color> colors_;$/;"	m	class:CS207::SDLViewer
cols	Examples/expr_template.cpp	/^  unsigned cols() const {$/;"	f	struct:MatAdd
cols	Examples/expr_template.cpp	/^  unsigned cols() const {$/;"	f	struct:MatExpr
cols	Examples/expr_template.cpp	/^  unsigned cols() const {$/;"	f	struct:MatMult
cols	Examples/expr_template.cpp	/^  unsigned cols() const {$/;"	f	struct:MatScale
cols	Examples/expr_template.cpp	/^  unsigned cols() const {$/;"	f	struct:Matrix
cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    column_index_array_type   cols;$/;"	m	class:mtl::mat::coordinate2D
cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_array.hpp	/^    const Cols&  cols;$/;"	m	struct:mtl::mat::element_array_t
cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_matrix.hpp	/^    const Cols&    cols;$/;"	m	struct:mtl::mat::element_matrix_t
cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    iset          rows, cols;$/;"	m	struct:mtl::mat::indirect
cols_	Examples/expr_template.cpp	/^  unsigned rows_, cols_;$/;"	m	struct:Matrix	file:
cols_of	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^inline cols_of(const T& x)$/;"	f	class:mtl::mtl::traits
column_index_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    column_index_array_type const& column_index_array() const {	return cols; } \/\/\/< Array of columns (const)$/;"	f	class:mtl::mat::coordinate2D
column_index_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    column_index_array_type& column_index_array() { return cols; } \/\/\/< Array of columns  (mutable)$/;"	f	class:mtl::mat::coordinate2D
column_index_array_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef std::vector< size_type >                                    column_index_array_type ;$/;"	t	class:mtl::mat::coordinate2D
column_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct column_major {};$/;"	s	namespace:mtl
column_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^typedef col_major column_major;$/;"	t	namespace:mtl::tag
common_triangles	Mesh.hpp	/^	std::set<Triangle> common_triangles(vert_node n1, vert_node n2) const {$/;"	f	class:Mesh
comp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    std::size_t  comp;$/;"	m	struct:mtl::recursion::bound_test
comp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    std::size_t  comp;$/;"	m	struct:mtl::recursion::max_dim_test
comp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    std::size_t  comp;$/;"	m	struct:mtl::recursion::min_dim_test
comp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    std::size_t  comp;$/;"	m	struct:mtl::recursion::undivisible_min_dim_test
compact_heap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    value_type*         compact_heap; $/;"	m	class:mtl::mat::block_diagonal2D
compare	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/comparators.hpp	/^namespace compare {$/;"	n
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef Complexity                                       complexity;$/;"	t	struct:mtl::traits::detail::all_rows_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef Complexity          complexity;$/;"	t	struct:mtl::traits::detail::all_cols_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef Complexity          complexity;$/;"	t	struct:mtl::traits::detail::all_offsets_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef Complexity          complexity;$/;"	t	struct:mtl::traits::detail::dense_element_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef complexity_classes::linear                       complexity;$/;"	t	struct:mtl::traits::detail::all_cols_in_row_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef complexity_classes::linear                       complexity;$/;"	t	struct:mtl::traits::detail::all_rows_in_col_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef complexity_classes::linear  complexity;$/;"	t	struct:mtl::traits::detail::strided_element_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename RangeGenerator::complexity complexity;$/;"	t	struct:mtl::traits::detail::referred_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef complexity_classes::linear_cached                                     complexity;$/;"	t	struct:mtl::traits::range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef complexity_classes::linear_cached         complexity;$/;"	t	struct:mtl::traits::range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef complexity_classes::linear_cached            complexity;$/;"	t	struct:mtl::mat::coordinate_col_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef complexity_classes::linear_cached            complexity;$/;"	t	struct:mtl::mat::coordinate_row_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    >::type                                                                       complexity;$/;"	t	struct:mtl::traits::detail::dense2D_iterator_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	typedef typename detail::dense2D_cc<typename Parameters::orientation>::type   complexity;$/;"	t	struct:mtl::traits::range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	typedef typename detail::dense2D_rc<typename Parameters::orientation>::type   complexity;$/;"	t	struct:mtl::traits::range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    typedef complexity_classes::linear_cached                                     complexity;$/;"	t	struct:mtl::traits::detail::morton_dense_iterator_range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	typedef complexity_classes::linear_cached                        complexity;$/;"	t	struct:mtl::traits::range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	typedef complexity_classes::linear_cached             complexity;$/;"	t	struct:mtl::traits::range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	typedef complexity_classes::linear_cached                                              complexity;$/;"	t	struct:mtl::traits::range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    typedef typename generator::complexity   complexity;$/;"	t	struct:mtl::traits::detail::range_transposer_impl
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^    typedef typename cursor_range::complexity              complexity;$/;"	t	struct:mtl::traits::range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^	typedef complexity_classes::infinite  complexity;$/;"	t	struct:mtl::traits::range_generator
complexity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^	typedef complexity_classes::linear_cached complexity;$/;"	t	struct:mtl::traits::range_generator
complexity_classes	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace complexity_classes {}$/;"	n	namespace:mtl
complexity_classes	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^namespace complexity_classes {$/;"	n	namespace:mtl
compose	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct compose$/;"	s	namespace:mtl::sfunctor
compose_binary	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct compose_binary$/;"	s	namespace:mtl::sfunctor
compose_both	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct compose_both$/;"	s	namespace:mtl::sfunctor
compose_first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct compose_first$/;"	s	namespace:mtl::sfunctor
compose_second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct compose_second$/;"	s	namespace:mtl::sfunctor
compose_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^struct compose_view$/;"	s	namespace:mtl::traits
compress	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void compress(Updater up)$/;"	f	class:mtl::mat::coordinate2D
compressed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct compressed {};$/;"	s	namespace:mtl
compressed2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    compressed2D (size_type m, size_type n, size_type nnz, $/;"	f	class:mtl::mat::compressed2D
compressed2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    compressed2D(const self& src) $/;"	f	class:mtl::mat::compressed2D
compressed2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    compressed2D(self&& src)$/;"	f	class:mtl::mat::compressed2D
compressed2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    compressed2D(std::initializer_list<std::initializer_list<Value2> > values)$/;"	f	class:mtl::mat::compressed2D
compressed2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed2D () : inserting(false)$/;"	f	class:mtl::mat::compressed2D
compressed2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed2D (const MatrixSrc& src) : inserting(false)$/;"	f	class:mtl::mat::compressed2D
compressed2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed2D (mtl::non_fixed::dimensions d, size_t nnz = 0) $/;"	f	class:mtl::mat::compressed2D
compressed2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed2D (size_type num_rows, size_type num_cols, size_t nnz = 0) $/;"	f	class:mtl::mat::compressed2D
compressed2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^class compressed2D $/;"	c	namespace:mtl::mat
compressed2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct compressed2D $/;"	s	namespace:mtl::tag
compressed2D_indexer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^struct compressed2D_indexer $/;"	s	namespace:mtl::mat
compressed2D_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed2D_inserter(matrix_type& matrix, size_type slot_size = 5)$/;"	f	struct:mtl::mat::compressed2D_inserter
compressed2D_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^struct compressed2D_inserter$/;"	s	namespace:mtl::mat
compressed2D_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct compressed2D_view$/;"	s	namespace:mtl::tag
compressed_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    compressed_el_cursor(const compressed_el_cursor<Elt, Parameters>& other) $/;"	f	struct:mtl::mat::compressed_el_cursor
compressed_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed_el_cursor(compressed2D<Elt, Parameters> const& matrix, size_t offset) $/;"	f	struct:mtl::mat::compressed_el_cursor
compressed_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed_el_cursor(compressed2D<Elt, Parameters> const& matrix, size_t r, size_t c)$/;"	f	struct:mtl::mat::compressed_el_cursor
compressed_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^struct compressed_el_cursor $/;"	s	namespace:mtl::mat
compressed_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    compressed_key(compressed_key const& other) { offset= other.offset; major= other.major; }$/;"	f	struct:mtl::mat::compressed_key
compressed_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed_key(compressed2D<Elt, Parameters> const& matrix, size_t offset) : offset(offset)$/;"	f	struct:mtl::mat::compressed_key
compressed_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed_key(compressed2D<Elt, Parameters> const& matrix, size_t r, size_t c)$/;"	f	struct:mtl::mat::compressed_key
compressed_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^struct compressed_key$/;"	s	namespace:mtl::mat
compressed_linear_search_limit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t compressed_linear_search_limit= 10;$/;"	m	namespace:mtl::mat
compressed_linear_search_limit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t compressed_linear_search_limit= MTL_MATRIX_COMPRESSED_LINEAR_SEARCH_LIMIT;$/;"	m	namespace:mtl::mat
compressed_minor_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    compressed_minor_cursor(self const& other) : base(other), matrix(other.matrix) {}$/;"	f	struct:mtl::mat::compressed_minor_cursor
compressed_minor_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed_minor_cursor(mtl::mat::compressed2D<Elt, Parameters> const& matrix, size_t offset) $/;"	f	struct:mtl::mat::compressed_minor_cursor
compressed_minor_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    explicit compressed_minor_cursor(mtl::mat::compressed2D<Elt, Parameters> const& matrix, size_t r, size_t c)$/;"	f	struct:mtl::mat::compressed_minor_cursor
compressed_minor_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^struct compressed_minor_cursor $/;"	s	namespace:mtl::mat
compressed_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef compressed2D<Value, Parameters>   compressed_type;$/;"	t	struct:mtl::mat::ell_matrix_inserter
compute	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    inline static void compute(Tmps& tmps, Ptrs& ptrs, VPtr vp)$/;"	f	struct:mtl::mat::square_cvec_mult_cols
compute	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    inline static void compute(Tmps& tmps, Ptrs& ptrs, ValueIn vi)$/;"	f	struct:mtl::mat::square_cvec_mult_rows
compute	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    inline static void compute(Tmps&, Ptrs&, VPtr) {}$/;"	f	struct:mtl::mat::square_cvec_mult_cols
compute	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    inline static void compute(Tmps&, Ptrs&, ValueIn) {}$/;"	f	struct:mtl::mat::square_cvec_mult_rows
compute_factors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    compute_factors(const mat::mat_mat_ele_times_expr<E1, E2>& src) $/;"	f	struct:mtl::operation::compute_factors
compute_factors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    compute_factors(const mat::mat_mat_times_expr<E1, E2>& src) $/;"	f	struct:mtl::operation::compute_factors
compute_factors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^struct compute_factors {};$/;"	s	namespace:mtl::operation
compute_factors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^struct compute_factors<Result, mat::mat_mat_ele_times_expr<E1, E2> >$/;"	s	namespace:mtl::operation
compute_factors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^struct compute_factors<Result, mat::mat_mat_times_expr<E1, E2> >$/;"	s	namespace:mtl::operation
compute_one_factor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    compute_one_factor(const mat::mat_mat_ele_times_expr<E1, E2>& src) $/;"	f	struct:mtl::operation::compute_one_factor
compute_one_factor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    compute_one_factor(const mat::mat_mat_times_expr<E1, E2>& src) $/;"	f	struct:mtl::operation::compute_one_factor
compute_one_factor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    compute_one_factor(type src) : value(src) {}$/;"	f	struct:mtl::operation::compute_one_factor
compute_one_factor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^struct compute_one_factor $/;"	s	namespace:mtl::operation
compute_one_factor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^struct compute_one_factor<Result, mat::mat_mat_ele_times_expr<E1, E2> > $/;"	s	namespace:mtl::operation
compute_one_factor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^struct compute_one_factor<Result, mat::mat_mat_times_expr<E1, E2> > $/;"	s	namespace:mtl::operation
compute_summand	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^    compute_summand(const Expr& expr) : value(expr) {}$/;"	f	struct:mtl::operation::compute_summand
compute_summand	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^    compute_summand(const mat_cvec_times_expr<Matrix, CVector>& expr) $/;"	f	struct:mtl::operation::compute_summand
compute_summand	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^    compute_summand(const vec::mat_cvec_multiplier<Matrix, CVector>& expr) $/;"	f	struct:mtl::operation::compute_summand
compute_summand	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^struct compute_summand$/;"	s	namespace:mtl::operation
compute_summand	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^struct compute_summand< mat_cvec_times_expr<Matrix, CVector> >$/;"	s	namespace:mtl::operation
compute_summand	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^struct compute_summand< vec::mat_cvec_multiplier<Matrix, CVector> >$/;"	s	namespace:mtl::operation
compute_tables	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    void compute_tables() $/;"	f	struct:mtl::dilated::masked_dilation_tables
concat	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    concat(const Matrix& A, const PC1& pc1, const PC2& pc2) : A(A), pc1(pc1), pc2(pc2) {}$/;"	f	class:itl::pc::concat
concat	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    explicit concat(const Matrix& A) : A(A), pc1(A), pc2(A)$/;"	f	class:itl::pc::concat
concat	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^class concat$/;"	c	namespace:itl::pc
conj	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	double inline conj(double v) { return v; }$/;"	f	namespace:mtl::scalar
conj	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	float inline conj(float v) { return v; }$/;"	f	namespace:mtl::scalar
conj	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	inline conj(const Matrix& A)$/;"	f	class:mtl::mat::mtl::traits::lazy_enable_if_matrix
conj	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	inline conj(const Value& v)$/;"	f	class:mtl::scalar::mtl::traits::enable_if_scalar
conj	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	inline conj(const Vector& v)$/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
conj	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	long double inline conj(long double v) { return v; }$/;"	f	namespace:mtl::scalar
conj	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^    struct conj$/;"	s	namespace:mtl::sfunctor
conj_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    struct conj_aux<Matrix, tag::matrix>$/;"	s	namespace:mtl::sfunctor
conj_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^    struct conj_aux$/;"	s	namespace:mtl::sfunctor
conj_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^    struct conj_aux<std::complex<Value>, AlgebraicCategory>$/;"	s	namespace:mtl::sfunctor
conj_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    struct conj_aux<Vector, tag::vector>$/;"	s	namespace:mtl::sfunctor
conj_trait	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	    struct conj_trait$/;"	s	namespace:mtl::mat::detail
conj_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    conj_view (const self& that) : base(that) {}$/;"	f	struct:mtl::mat::conj_view
conj_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    conj_view (self&& that) : base(that) {}$/;"	f	struct:mtl::mat::conj_view
conj_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    conj_view(boost::shared_ptr<Matrix> p) : base(functor_type(), p) {}$/;"	f	struct:mtl::mat::conj_view
conj_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    conj_view(const Matrix& matrix) : base(functor_type(), matrix) {}$/;"	f	struct:mtl::mat::conj_view
conj_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct conj_view$/;"	s	namespace:mtl::mat
conj_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    conj_view (const self& that) : base(that) {}$/;"	f	struct:mtl::vec::conj_view
conj_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    conj_view (self&& that) : base(that) {}$/;"	f	struct:mtl::vec::conj_view
conj_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit conj_view(boost::shared_ptr<Vector> p)$/;"	f	struct:mtl::vec::conj_view
conj_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit conj_view(const Vector& vector)$/;"	f	struct:mtl::vec::conj_view
conj_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^struct conj_view$/;"	s	namespace:mtl::vec
const_crtp_base_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct const_crtp_base_matrix$/;"	s	namespace:mtl::mat
const_crtp_base_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct const_crtp_base_vector $/;"	s	namespace:mtl::vec
const_crtp_matrix_bracket	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct const_crtp_matrix_bracket$/;"	s	namespace:mtl::mat
const_dereference_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    typedef value_type                           const_dereference_type ;$/;"	t	struct:mtl::mat::mat_mat_op_expr
const_dereference_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^    typedef value_type const_dereference_type ;$/;"	t	class:mtl::vec::vec_vec_asgn_expr
const_dereference_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^    typedef value_type                           const_dereference_type ;$/;"	t	struct:mtl::vec::vec_const_ref_expr
const_dereference_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    typedef value_type                           const_dereference_type ;$/;"	t	struct:mtl::vec::vec_vec_op_expr
const_dereference_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    typedef typename SFunctor::result_type                        const_dereference_type;$/;"	t	struct:mtl::vec::vec_vec_pmop_expr
const_iter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^	namespace const_iter {}$/;"	n	namespace:mtl::tag
const_iter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^    namespace const_iter {$/;"	n	namespace:mtl::tag
const_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef mtl::strided_dense_el_const_iterator<Value>                              const_iterator;$/;"	t	class:mtl::vec::strided_vector_ref
const_iterator	Point.hpp	/^  typedef const double*   const_iterator;$/;"	t	struct:Point
const_iterator_adaptor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^    const_iterator_adaptor(PropertyMap map, Cursor cursor) $/;"	f	struct:mtl::utilities::const_iterator_adaptor
const_iterator_adaptor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^struct const_iterator_adaptor$/;"	s	namespace:mtl::utilities
const_iterator_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    const_iterator_proxy(PropertyMap map, Cursor cursor) $/;"	f	struct:mtl::utilities::detail::const_iterator_proxy
const_iterator_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^struct const_iterator_proxy$/;"	s	namespace:mtl::utilities::detail
const_pointer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef Value const*      const_pointer ;$/;"	t	class:mtl::vec::dense_vector
const_pointer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef Value const*                                                             const_pointer ;$/;"	t	class:mtl::vec::strided_vector_ref
const_pointer_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    typedef const value_type*                 const_pointer_type;$/;"	t	struct:mtl::detail::memory_crtp
const_pointer_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef const value_type*                 const_pointer_type;$/;"	t	class:mtl::mat::dense2D
const_pointer_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^    typedef const value_type*             const_pointer_type; \/\/ ?$/;"	t	struct:mtl::dense_el_cursor
const_pointer_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	/^    typedef const value_type*                            const_pointer_type;$/;"	t	struct:mtl::strided_dense_el_cursor
const_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    const_ref_type const_ref() const $/;"	f	struct:mtl::mat::hermitian_view
const_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    typedef const Matrix&                                          const_ref_type;$/;"	t	struct:mtl::mat::hermitian_view
const_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef const Matrix&                              const_ref_type;$/;"	t	struct:mtl::mat::map_view
const_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef const Matrix&                                    const_ref_type;$/;"	t	struct:mtl::mat::transposed_view
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef Value            	       const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef const Value&                                         const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef const Value&     const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef const value_type&                                     const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef const value_type&                   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef const value_type&     const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef const value_type& const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<Matrix>::const_reference          const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<Matrix>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::banded_view<Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::conj_view<Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::hilbert_matrix<Value>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::imag_view<Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::implicit_dense<Functor>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::negate_view<Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::ones_matrix<Value>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::outer_product_matrix<Vector1, Vector2>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::real_view<Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::rscaled_view<Coll,RScaling>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::scaled_view<Scaling, Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::multi_vector<Vector>::const_reference  const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::multi_vector_range<Vector>::const_reference  const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::transposed_view<Matrix>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename std::vector<Value>::const_reference const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::conj_view<Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::imag_view<Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::map_view<Functor, Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::negate_view<Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::real_view<Coll>::const_reference   const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef value_type                                            const_reference; \/\/ maybe change later$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef value_type                                            const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef value_type                              const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef value_type       const_reference;$/;"	t	struct:mtl::Collection
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef typename Matrix::const_reference           const_reference;$/;"	t	struct:mtl::mat::banded_view
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef value_type                               const_reference;$/;"	t	class:mtl::mat::compressed2D
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef Value const&                                                const_reference;$/;"	t	class:mtl::mat::coordinate2D
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef const value_type&                 const_reference;$/;"	t	class:mtl::mat::dense2D
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef value_type                                 const_reference;$/;"	t	class:mtl::mat::ell_matrix
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef typename Functor::result_type              const_reference;$/;"	t	class:mtl::mat::implicit_dense
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef typename Functor::result_type              const_reference;$/;"	t	struct:mtl::mat::map_view
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef const value_type&                 const_reference;$/;"	t	class:mtl::mat::morton_dense
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    typedef const value_type&                        const_reference;$/;"	t	class:mtl::mat::multi_vector
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    typedef const value_type&                        const_reference;$/;"	t	class:mtl::mat::multi_vector_range
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef typename Matrix::const_reference           const_reference;$/;"	t	struct:mtl::mat::transposed_view
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    typedef const Expr&           const_reference;$/;"	t	struct:mtl::operation::compute_one_factor
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    typedef const Result&         const_reference;$/;"	t	struct:mtl::operation::compute_one_factor
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^	    typedef const T&     const_reference;$/;"	t	struct:mtl::traits::impl::eval_self_ref
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    typedef const matrix_type&       const_reference;$/;"	t	struct:mtl::traits::eval
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef value_type const& const_reference ;$/;"	t	class:mtl::vec::dense_vector
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef typename Functor::result_type              const_reference;$/;"	t	struct:mtl::vec::map_view
const_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef Value const&                                                             const_reference ;$/;"	t	class:mtl::vec::strided_vector_ref
const_reference	Point.hpp	/^  typedef const double&   const_reference;$/;"	t	struct:Point
const_sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef mtl::mat::banded_view<ref_sub_type>                                     const_sub_matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
const_sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        typedef sub_matrix_type const           const_sub_matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
const_sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef mtl::mat::map_view<Functor, ref_sub_type>                               const_sub_matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
const_sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^        typedef matrix_type const               const_sub_matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
const_sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef transposed_view<typename sub_matrix_t<tmp_type>::const_sub_matrix_type> const_sub_matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
const_sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    typedef typename sub_matrix_t<Matrix>::const_sub_matrix_type  const_sub_matrix_type;$/;"	t	struct:mtl::mat::recursator
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    struct const_value<banded_view<Matrix> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^struct const_value< mtl::mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    struct const_value<mtl::mat::map_view<Functor, Matrix> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct const_value< mtl::mat::conj_view<Matrix> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct const_value< mtl::mat::divide_by_view<Matrix, Divisor> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct const_value< mtl::mat::rscaled_view<Matrix, RScaling> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct const_value< mtl::mat::scaled_view<Scaling, Matrix> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    struct const_value<mtl::mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::mat::compressed2D<Elt, Parameters> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::mat::coordinate2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::mat::dense2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::mat::hilbert_matrix<Value> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::mat::implicit_dense<Functor> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::mat::indirect<Matrix> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::mat::morton_dense<Elt, BitMask, Parameters> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::mat::ones_matrix<Value> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::mat::outer_product_matrix<Vector1, Vector2> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::mat::sparse_banded<Value, Parameters> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct const_value<mtl::vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^template <class Matrix> struct const_value {};$/;"	s	namespace:mtl::traits
const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    struct const_value<vec::map_view<Functor, Vector> >$/;"	s	namespace:mtl::traits
const_value_from_other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    explicit const_value_from_other(Matrix const& matrix) $/;"	f	struct:mtl::detail::const_value_from_other
const_value_from_other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^struct const_value_from_other$/;"	s	namespace:mtl::detail
const_value_in_element_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    const_value_in_element_key(const matrix_type&) {} $/;"	f	struct:mtl::detail::const_value_in_element_key
const_value_in_element_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct const_value_in_element_key$/;"	s	namespace:mtl::detail
const_value_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^inline const_value_map(const Matrix& A)$/;"	f	class:mtl::mat::mtl::traits::const_value
const_value_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^inline const_value_map(const Vector& A)$/;"	f	class:mtl::vec::mtl::traits::const_value
constant	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct constant : boost::mpl::int_<2> {};$/;"	s	namespace:mtl::complexity_classes
constraints_	mass_spring.cpp	/^	f_composition constraints_;$/;"	m	struct:Constraint	file:
constructor_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    void constructor_helper(const dim_type& dim)$/;"	f	struct:mtl::mat::base_sub_matrix
constructor_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    sub_matrix_type constructor_helper(MatrixType const& matrix)$/;"	f	struct:mtl::mat::recursator
constructor_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    sub_matrix_type constructor_helper(transposed_view<MatrixType> const& view)$/;"	f	struct:mtl::mat::recursator
consume	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    void consume(int total_elements, int total_vars, element_type* elements)$/;"	f	class:mtl::mat::element_structure
contains	BoundingBox.hpp	/^  bool contains(const BoundingBox& b) const {$/;"	f	class:BoundingBox
contains	BoundingBox.hpp	/^  bool contains(const point_type& p) const {$/;"	f	class:BoundingBox
contiguous_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct contiguous_dense : virtual dense, virtual contiguous_memory {};$/;"	s	namespace:mtl::tag
contiguous_memory	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct contiguous_memory : virtual universe {};$/;"	s	namespace:mtl::tag
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    contiguous_memory_block() : category(own), data(0) {}$/;"	f	struct:mtl::detail::contiguous_memory_block
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    contiguous_memory_block() {} \/\/ default constructor in release mode$/;"	f	struct:mtl::detail::contiguous_memory_block
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    contiguous_memory_block(const self& other) : size_base(other)$/;"	f	struct:mtl::detail::contiguous_memory_block
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    contiguous_memory_block(const self& other)$/;"	f	struct:mtl::detail::contiguous_memory_block
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    contiguous_memory_block(const self& other, clone_ctor)$/;"	f	struct:mtl::detail::contiguous_memory_block
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    explicit contiguous_memory_block(Value *data, std::size_t size, bool is_view= false) $/;"	f	struct:mtl::detail::contiguous_memory_block
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    explicit contiguous_memory_block(const contiguous_memory_block<Value2, OnStack2, Size2>& other)$/;"	f	struct:mtl::detail::contiguous_memory_block
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    explicit contiguous_memory_block(std::size_t size) : category(own)$/;"	f	struct:mtl::detail::contiguous_memory_block
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    explicit contiguous_memory_block(std::size_t size= Size)$/;"	f	struct:mtl::detail::contiguous_memory_block
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    explicit contiguous_memory_block(std::size_t) {}$/;"	f	struct:mtl::detail::contiguous_memory_block
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^struct contiguous_memory_block$/;"	s	namespace:mtl::detail
contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^struct contiguous_memory_block<Value, true, Size>$/;"	s	namespace:mtl::detail
converged	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool converged() const $/;"	f	class:itl::basic_iteration
converged	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool converged(const Real& r) { resid_= r; return converged(); }$/;"	f	class:itl::basic_iteration
convert	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^inline T convert(T const& value)$/;"	f	namespace:mtl::dilated
convert	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^inline T convert(T const& value, masked_dilation_tables<T, Mask1> const& tables1, $/;"	f	namespace:mtl::dilated
coordinate	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    enum sparsity {coordinate, array} my_sparsity;$/;"	e	enum:mtl::io::matrix_market_istream::sparsity
coordinate	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct coordinate {};$/;"	s	namespace:mtl
coordinate2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    explicit coordinate2D(size_type nrows, size_type ncols, size_type expected= 0)$/;"	f	class:mtl::mat::coordinate2D
coordinate2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^class coordinate2D $/;"	c	namespace:mtl::mat
coordinate2D_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    explicit coordinate2D_col(matrix_ref_type A) : A(A) {}$/;"	f	struct:mtl::detail::coordinate2D_col
coordinate2D_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^struct coordinate2D_col$/;"	s	namespace:mtl::detail
coordinate2D_const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    explicit coordinate2D_const_value(matrix_ref_type A) : A(A) {}$/;"	f	struct:mtl::detail::coordinate2D_const_value
coordinate2D_const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^struct coordinate2D_const_value$/;"	s	namespace:mtl::detail
coordinate2D_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    coordinate2D_inserter(matrix_type& matrix, size_type slot_size= 1) $/;"	f	struct:mtl::mat::coordinate2D_inserter
coordinate2D_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^struct coordinate2D_inserter$/;"	s	namespace:mtl::mat
coordinate2D_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    explicit coordinate2D_row(matrix_ref_type A) : A(A) {}$/;"	f	struct:mtl::detail::coordinate2D_row
coordinate2D_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^struct coordinate2D_row$/;"	s	namespace:mtl::detail
coordinate_col_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^struct coordinate_col_range_generator$/;"	s	namespace:mtl::mat
coordinate_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    explicit coordinate_key(size_t offset) : offset(offset) {}$/;"	f	struct:mtl::mat::coordinate_key
coordinate_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^struct coordinate_key$/;"	s	namespace:mtl::mat
coordinate_major_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    coordinate_major_cursor(matrix_ref_type ref, size_type major, size_type offset) $/;"	f	struct:mtl::mat::coordinate_major_cursor
coordinate_major_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^struct coordinate_major_cursor $/;"	s	namespace:mtl::mat
coordinate_minor_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    coordinate_minor_cursor(matrix_ref_type ref, size_type offset) $/;"	f	struct:mtl::mat::coordinate_minor_cursor
coordinate_minor_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^struct coordinate_minor_cursor $/;"	s	namespace:mtl::mat
coordinate_minor_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^struct coordinate_minor_range_generator$/;"	s	namespace:mtl::mat
coordinate_row_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^struct coordinate_row_range_generator$/;"	s	namespace:mtl::mat
coords_	CS207/SDLViewer.hpp	/^  std::vector<Point> coords_;$/;"	m	class:CS207::SDLViewer
copy	Examples/trivial_copy.cpp	/^OutputIter copy(InputIter first, InputIter last, OutputIter out) {$/;"	f	namespace:cris
copy	Examples/trivial_copy.cpp	/^OutputIter copy(InputIter first, InputIter last, OutputIter out, Trait) {$/;"	f	namespace:cris::detail
copy	Examples/trivial_copy.cpp	/^T* copy(T* first, T* last, T* out, std::true_type) {$/;"	f	namespace:cris::detail
copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void copy(const CollSrc& src, CollDest& dest)$/;"	f	namespace:mtl
copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void copy(const MatrixSrc& src, tag::flat<tag::matrix>, MatrixDest& dest, tag::flat<tag::matrix>)$/;"	f	namespace:mtl
copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void copy(const VectorSrc& src, tag::flat<tag::vector>, VectorDest& dest, tag::flat<tag::vector>)	$/;"	f	namespace:mtl
copy_assignment	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void copy_assignment(const Other& other)$/;"	f	struct:mtl::detail::contiguous_memory_block
copy_blocks_backward	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/shift_block_detail.hpp	/^inline void copy_blocks_backward(Size& i, Size blocks, Starts const& starts, NewStarts const& new_starts, $/;"	f	namespace:mtl::operations::detail
copy_blocks_forward	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/shift_block_detail.hpp	/^inline void copy_blocks_forward(Size& i, Size blocks, Starts const& starts, NewStarts const& new_starts, $/;"	f	namespace:mtl::operations::detail
copy_construction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void copy_construction(const Other& other)$/;"	f	struct:mtl::detail::contiguous_memory_block
copy_expression_const_ref_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^struct copy_expression_const_ref_container$/;"	s	namespace:mtl::traits
copy_expression_const_ref_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^struct copy_expression_const_ref_container< mtl::vec::conj_view<Vector> >$/;"	s	namespace:mtl::traits
copy_expression_const_ref_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^struct copy_expression_const_ref_container< mtl::vec::divide_by_view<Vector, Divisor> >$/;"	s	namespace:mtl::traits
copy_expression_const_ref_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^struct copy_expression_const_ref_container< mtl::vec::map_view<Functor, Vector> >$/;"	s	namespace:mtl::traits
copy_expression_const_ref_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^struct copy_expression_const_ref_container< mtl::vec::rscaled_view<Vector, RScaling> >$/;"	s	namespace:mtl::traits
copy_expression_const_ref_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^struct copy_expression_const_ref_container< mtl::vec::scaled_view<Scaling, Vector> >$/;"	s	namespace:mtl::traits
copy_expression_const_ref_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^struct copy_expression_const_ref_container< mtl::vec::vec_vec_aop_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl::traits
copy_expression_const_ref_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^struct copy_expression_const_ref_container< mtl::vec::vec_vec_pmop_expr<E1, E2, SFunctor> >$/;"	s	namespace:mtl::traits
copy_indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    static const bool copy_indices= sizeof(index_type) != sizeof(size_type),$/;"	m	class:mtl::mat::umfpack::solver
copy_inserter_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	struct copy_inserter_size< operations::update_store<Value> >$/;"	s	namespace:mtl::detail
copy_inserter_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	template <typename Updater> struct copy_inserter_size {};$/;"	s	namespace:mtl::detail
copy_inserter_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	template <typename Value> struct copy_inserter_size< operations::update_minus<Value> > : sum_of_sizes {};$/;"	s	namespace:mtl::detail
copy_inserter_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	template <typename Value> struct copy_inserter_size< operations::update_plus<Value> > : sum_of_sizes {};$/;"	s	namespace:mtl::detail
copy_pattern	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void copy_pattern(const Src& src)$/;"	f	class:mtl::mat::compressed2D
copy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef matrix_copy<compressed2D<Value, Parameters>, Value, typename Parameters::orientation> copy_type;$/;"	t	class:mtl::mat::umfpack::solver
copy_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void copy_view(const self& other)$/;"	f	struct:mtl::detail::contiguous_memory_block
copysign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copysign.hpp	/^    struct copysign$/;"	s	namespace:mtl::sfunctor
copysign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copysign.hpp	/^    struct copysign<std::complex<Value1>, Value2>$/;"	s	namespace:mtl::sfunctor
copysign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copysign.hpp	/^inline Value1 copysign(const Value1& v, const Value2& s)$/;"	f	namespace:mtl
correct_sub_matrix_indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sub_matrix.hpp	/^	inline void correct_sub_matrix_indices(Matrix const& matrix, $/;"	f	namespace:mtl::mat::impl
count_bits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    int count_bits(T t) $/;"	f	struct:mtl::dilated::masked_dilation_tables
count_entries	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    size_t count_entries() const$/;"	f	class:itl::pc::sub_matrix_pc
count_n_ones	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    int count_n_ones(T t) $/;"	f	struct:mtl::dilated::masked_dilation_tables
counter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^    static int counter;$/;"	m	struct:mtl::seed
counter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^int seed<T>::counter= 0;$/;"	m	class:mtl::seed
counter	poisson.cpp	/^		int counter;$/;"	m	class:itl::visual_iteration	file:
counters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    long_long *counters;$/;"	m	class:mtl::utility::papi_t
create_d	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    VectorOut& create_d(const VectorOut& y) const$/;"	f	class:itl::pc::concat
create_r	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    VectorOut& create_r(const VectorOut& y) const$/;"	f	class:itl::pc::concat
create_x0	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    VectorIn& create_x0(VectorIn) const$/;"	f	class:itl::pc::sub_matrix_pc
create_y0	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    VectorOut& create_y0(VectorOut) const$/;"	f	class:itl::pc::sub_matrix_pc
cris	Examples/distance_dispatch.cpp	/^namespace cris {$/;"	n	file:
cris	Examples/trivial_copy.cpp	/^namespace cris {$/;"	n	file:
crop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void crop()$/;"	f	class:mtl::mat::compressed2D
crop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void crop() {} \/\/\/< Delete structural zeros; only dummy here$/;"	f	class:mtl::mat::dense2D
crop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    void crop() {} \/\/\/< Delete structural zeros, only dummy here$/;"	f	class:mtl::mat::morton_dense
crop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/crop.hpp	/^	typename mtl::traits::enable_if_matrix<T, T&>::type inline crop(T& x)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
crop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/crop.hpp	/^	typename mtl::traits::enable_if_vector<T, T&>::type inline crop(T& x)$/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
crop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    void crop() {} \/\/\/< Delete structural zeros, only dummy here for completeness$/;"	f	class:mtl::vec::dense_vector
crop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    void crop(value_type threshold= value_type(0))$/;"	f	class:mtl::vec::sparse_vector
crop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    void crop() {} \/\/ Only dummy here$/;"	f	class:mtl::vec::strided_vector_ref
cross	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cross.hpp	/^inline cross(const Vector1& v1, const Vector2& v2)$/;"	f	class:mtl::vec::detail::cross_result
cross	Point.hpp	/^Point cross(const Point& a, const Point& b) {$/;"	f
cross_result	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cross.hpp	/^	struct cross_result$/;"	s	namespace:mtl::vec::detail
crs_cvec_mult_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^struct crs_cvec_mult_block$/;"	s	namespace:mtl::mat
crs_cvec_mult_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^struct crs_cvec_mult_block<BSize, BSize, SizeType>$/;"	s	namespace:mtl::mat
crs_cvec_mult_block_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t crs_cvec_mult_block_size= 4;$/;"	m	namespace:mtl::mat
crs_cvec_mult_block_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t crs_cvec_mult_block_size= MTL_CRS_CVEC_MULT_BLOCK_SIZE;$/;"	m	namespace:mtl::mat
crs_row_init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	template <typename Value> void crs_row_init(size_type, size_type&, size_type, Value&, tag::unit_diagonal) const {}$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    struct crtp_assign<std::initializer_list<std::initializer_list<Value2> >, Matrix>$/;"	s	namespace:mtl::mat
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_assign $/;"	s	namespace:mtl::mat
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_assign<Value[Rows][Cols], Matrix>$/;"	s	namespace:mtl::mat
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_assign<io::matrix_file<IFStream, OFStream>, Matrix>$/;"	s	namespace:mtl::mat
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_assign<mat_mat_ele_times_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_assign<mat_mat_minus_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_assign<mat_mat_plus_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_assign<mat_mat_times_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_assign<multi_vector<Vector>, Matrix>$/;"	s	namespace:mtl::mat
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_assign {};	$/;"	s	namespace:mtl::vec::detail
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_assign<Vector, Source, Cat, Cat>$/;"	s	namespace:mtl::vec::detail
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_assign<Vector, Source, VCat, ashape::scal>$/;"	s	namespace:mtl::vec::detail
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_assign $/;"	s	namespace:mtl::vec
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_assign<Vector, Value[Rows]>$/;"	s	namespace:mtl::vec
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_assign<Vector, mat_cvec_times_expr<E1, E2> >$/;"	s	namespace:mtl::vec
crtp_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_assign<Vector, rvec_mat_times_expr<E1, E2> >$/;"	s	namespace:mtl::vec
crtp_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    typedef memory_crtp<Value, OnStack, Size> crtp_base;$/;"	t	struct:mtl::detail::contiguous_memory_block
crtp_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef crtp_base_matrix< self, Value, std::size_t >      crtp_base;$/;"	t	class:mtl::mat::dense2D
crtp_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    typedef mat_expr< mat_mat_ele_times_expr<E1, E2> >                                                        crtp_base;$/;"	t	struct:mtl::mat::mat_mat_ele_times_expr
crtp_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    typedef mat_expr< mat_mat_minus_expr<E1, E2> >                                                       crtp_base;$/;"	t	struct:mtl::mat::mat_mat_minus_expr
crtp_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    typedef mat_expr< mat_mat_plus_expr<E1, E2> >                                                       crtp_base;$/;"	t	struct:mtl::mat::mat_mat_plus_expr
crtp_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef mat_expr< mat_mat_times_expr<E1, E2> >                                                       crtp_base;$/;"	t	struct:mtl::mat::mat_mat_times_expr
crtp_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef crtp_base_vector< self, Value, std::size_t >                             crtp_base;$/;"	t	class:mtl::vec::dense_vector
crtp_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef crtp_base_vector< self, Value, std::size_t >                             crtp_base;$/;"	t	class:mtl::vec::strided_vector_ref
crtp_base_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_base_matrix $/;"	s	namespace:mtl::mat
crtp_base_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_base_vector $/;"	s	namespace:mtl::vec
crtp_div_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_div_assign {};$/;"	s	namespace:mtl::vec::detail
crtp_div_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_div_assign<Vector, Source, Cat, Cat>$/;"	s	namespace:mtl::vec::detail
crtp_div_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_div_assign<Vector, Source, VCat, ashape::scal>$/;"	s	namespace:mtl::vec::detail
crtp_div_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_div_assign$/;"	s	namespace:mtl::vec
crtp_div_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_div_assign<Vector, mat_cvec_times_expr<E1, E2> >$/;"	s	namespace:mtl::vec
crtp_div_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_div_assign<Vector, rvec_mat_times_expr<E1, E2> >$/;"	s	namespace:mtl::vec
crtp_matrix_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_matrix_assign$/;"	s	namespace:mtl::mat
crtp_matrix_bracket	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_matrix_bracket $/;"	s	namespace:mtl::mat
crtp_matrix_lvalue	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_matrix_lvalue $/;"	s	namespace:mtl::mat
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_minus_assign $/;"	s	namespace:mtl::mat
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_minus_assign<mat_mat_ele_times_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_minus_assign<mat_mat_minus_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_minus_assign<mat_mat_plus_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_minus_assign<mat_mat_times_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_minus_assign {};	$/;"	s	namespace:mtl::vec::detail
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_minus_assign<Vector, Source, Cat, Cat>$/;"	s	namespace:mtl::vec::detail
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_minus_assign<Vector, Source, VCat, ashape::scal>$/;"	s	namespace:mtl::vec::detail
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_minus_assign $/;"	s	namespace:mtl::vec
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_minus_assign<Vector, mat_cvec_times_expr<E1, E2> >$/;"	s	namespace:mtl::vec
crtp_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_minus_assign<Vector, rvec_mat_times_expr<E1, E2> >$/;"	s	namespace:mtl::vec
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_plus_assign $/;"	s	namespace:mtl::mat
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_plus_assign<mat_mat_ele_times_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_plus_assign<mat_mat_minus_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_plus_assign<mat_mat_plus_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct crtp_plus_assign<mat_mat_times_expr<E1, E2>, Matrix> $/;"	s	namespace:mtl::mat
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_plus_assign {};	$/;"	s	namespace:mtl::vec::detail
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_plus_assign<Vector, Source, Cat, Cat>$/;"	s	namespace:mtl::vec::detail
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_plus_assign<Vector, Source, VCat, ashape::scal>$/;"	s	namespace:mtl::vec::detail
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_plus_assign $/;"	s	namespace:mtl::vec
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_plus_assign<Vector, mat_cvec_times_expr<E1, E2> >$/;"	s	namespace:mtl::vec
crtp_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_plus_assign<Vector, rvec_mat_times_expr<E1, E2> >$/;"	s	namespace:mtl::vec
crtp_times_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_times_assign {};$/;"	s	namespace:mtl::vec::detail
crtp_times_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_times_assign<Vector, Source, Cat, Cat>$/;"	s	namespace:mtl::vec::detail
crtp_times_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    struct crtp_times_assign<Vector, Source, VCat, ashape::scal>$/;"	s	namespace:mtl::vec::detail
crtp_times_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_times_assign$/;"	s	namespace:mtl::vec
crtp_times_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_times_assign<Vector, mat_cvec_times_expr<E1, E2> >$/;"	s	namespace:mtl::vec
crtp_times_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_times_assign<Vector, rvec_mat_times_expr<E1, E2> >$/;"	s	namespace:mtl::vec
crtp_vector_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct crtp_vector_assign$/;"	s	namespace:mtl::vec
ctor	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/INITLIST_CHECK.cpp	/^struct ctor {};$/;"	s	file:
cuppen	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cuppen.hpp	/^void inline cuppen(Matrix A, Matrix& Q, Vector& lambda)$/;"	f	namespace:mtl::mat
cuppen_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cuppen.hpp	/^void inline cuppen_inplace(Matrix& A, Matrix& Q, Vector& lambda)$/;"	f	namespace:mtl::mat
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef detail::sub_matrix_cursor<matrix_type, glas::tag::col, 2>             cursor;$/;"	t	struct:mtl::traits::range_generator
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef detail::sub_matrix_cursor<matrix_type, glas::tag::row, 2>             cursor;$/;"	t	struct:mtl::traits::range_generator
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    typedef detail::sub_matrix_cursor<matrix_type, OuterTag, 2>                   cursor;$/;"	t	struct:mtl::traits::detail::dense2D_iterator_range_generator
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	typedef detail::sub_matrix_cursor<matrix, glas::tag::col, 2>               cursor;	$/;"	t	struct:mtl::traits::range_generator
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	typedef detail::sub_matrix_cursor<matrix, glas::tag::row, 2>               cursor;$/;"	t	struct:mtl::traits::range_generator
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    typedef detail::sub_matrix_cursor<matrix_type, OuterTag, 2>                   cursor;$/;"	t	struct:mtl::traits::detail::morton_dense_iterator_range_generator
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	typedef detail::sub_matrix_cursor<matrix, glas::tag::col, 2>     cursor;$/;"	t	struct:mtl::traits::range_generator
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	typedef detail::sub_matrix_cursor<matrix, glas::tag::row, 2>     cursor;$/;"	t	struct:mtl::traits::range_generator
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^    Cursor                 cursor;$/;"	m	struct:mtl::utilities::const_iterator_adaptor
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^    Cursor           cursor;$/;"	m	struct:mtl::utilities::iterator_adaptor
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    Cursor                 cursor;$/;"	m	struct:mtl::utilities::detail::const_iterator_proxy
cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    Cursor                 cursor;$/;"	m	struct:mtl::utilities::detail::iterator_proxy
cursor_flatcat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct cursor_flatcat$/;"	s	namespace:mtl::traits
cursor_pseudo_dot	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	/^Value cursor_pseudo_dot(Cursor1 i1, Cursor1 end1, Prop1 prop1, Cursor2 i2, Prop2 prop2, Value)$/;"	f	namespace:mtl
cursor_pseudo_dot_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	/^    struct cursor_pseudo_dot_block$/;"	s	namespace:mtl::functor
cursor_pseudo_dot_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	/^    struct cursor_pseudo_dot_block<MaxDepth, Value, Cursor1, Prop1, Cursor2, Prop2, 1>$/;"	s	namespace:mtl::functor
cursor_pseudo_dot_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	/^    struct cursor_pseudo_dot_t$/;"	s	namespace:mtl::functor
cursor_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^    typedef range_generator<cursor_tag, Matrix>            cursor_range;$/;"	t	struct:mtl::traits::range_generator
cursor_tag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^    typedef typename glas::tag::nz                      cursor_tag;$/;"	t	struct:mtl::traits::range_generator
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef associated_type cursor_type;$/;"	t	struct:mtl::TraversableCollection
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef associated_type cursor_type;$/;"	t	struct:mtl::TraversableMutableCollection
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef detail::sub_matrix_cursor<compressed2D<Elt, Parameters>, glas::tag::col, 2> cursor_type;$/;"	t	struct:mtl::traits::range_generator
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef detail::sub_matrix_cursor<compressed2D<Elt, Parameters>, glas::tag::row, 2> cursor_type;$/;"	t	struct:mtl::traits::range_generator
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_col_cursor<mask>               cursor_type;$/;"	t	struct:mtl::mat::morton_dense_col_const_iterator
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_col_cursor<mask>               cursor_type;$/;"	t	struct:mtl::mat::morton_dense_col_iterator
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_row_cursor<mask>               cursor_type;$/;"	t	struct:mtl::mat::morton_dense_row_const_iterator
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_row_cursor<mask>               cursor_type;$/;"	t	struct:mtl::mat::morton_dense_row_iterator
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	typedef detail::sub_matrix_cursor<sparse_banded<Value, Parameters>, glas::tag::row, 2> cursor_type;$/;"	t	struct:mtl::traits::range_generator
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^	typedef detail::base_cursor<size_type> cursor_type;$/;"	t	class:mtl::irange
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^    typedef typename cursor_range::type                    cursor_type;$/;"	t	struct:mtl::traits::range_generator
cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef mtl::strided_dense_el_cursor<Value>                                      cursor_type;$/;"	t	class:mtl::vec::strided_vector_ref
cvec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^template <typename Value> struct cvec : nonscal {};$/;"	s	namespace:mtl::ashape
cvec_rvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct cvec_rvec_mult {}; \/\/ outer product$/;"	s	namespace:mtl::ashape
cvec_scal_div	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct cvec_scal_div {};$/;"	s	namespace:mtl::ashape
cvec_scal_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct cvec_scal_mult {};$/;"	s	namespace:mtl::ashape
cycle	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      int        cycle, last_print;$/;"	m	class:itl::cyclic_iteration
cycle	poisson.cpp	/^		int cycle;$/;"	m	class:itl::visual_iteration	file:
cyclic_iteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      cyclic_iteration(Real r0, int max_iter_, Real tol_, Real atol_ = Real(0), int cycle_ = 100,$/;"	f	class:itl::cyclic_iteration
cyclic_iteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      cyclic_iteration(const Vector& r0, int max_iter_, Real tol_, Real atol_ = Real(0), int cycle_ = 100,$/;"	f	class:itl::cyclic_iteration
cyclic_iteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^  class cyclic_iteration : public basic_iteration<Real> $/;"	c	namespace:itl
d	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^    Vector     z, d;$/;"	m	class:mtl::vec::secular_f
data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    Value                                     *data;$/;"	m	struct:mtl::detail::contiguous_memory_block
data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    Value    data[Size];$/;"	m	struct:mtl::detail::contiguous_memory_block
data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<value_type> data; $/;"	m	class:mtl::mat::compressed2D
data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    std::vector<value_type> data; $/;"	m	class:mtl::mat::ell_matrix
data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    mtl::dense_vector<Vector, mtl::vec::parameters<> >          data;$/;"	m	class:mtl::mat::multi_vector
data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    value_type*                    data;$/;"	m	class:mtl::mat::sparse_banded
data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy.hpp	/^    T& data;$/;"	m	struct:mtl::lazy_t
data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/sometimes_data.hpp	/^    T data;$/;"	m	struct:mtl::utility::sometimes_data
data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    vv_type     data;$/;"	m	class:mtl::vec::sparse_vector
data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    pointer     data;$/;"	m	class:mtl::vec::strided_vector_ref
data	Point.hpp	/^  const_iterator  data() const { return elem; }$/;"	f	struct:Point
data	Point.hpp	/^  iterator        data()       { return elem; }$/;"	f	struct:Point
data_	Graph.hpp	/^	edge_data data_() const {$/;"	f	class:Graph::Edge
data_	Mesh.hpp	/^		UserEdgeData data_;$/;"	m	struct:Mesh::link_data
data_	Mesh.hpp	/^		UserNodeData data_;$/;"	m	struct:Mesh::vertex_data
data_	Mesh.hpp	/^		UserTriData data_;$/;"	m	struct:Mesh::triangle_data
decrement_it	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/decrementer.hpp	/^    void decrement_it(Vector& tgt) const$/;"	f	struct:mtl::vec::decrementer
decrement_it	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^    void decrement_it(VectorOut& w) const$/;"	f	struct:mtl::vec::mat_cvec_multiplier
decrementer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/decrementer.hpp	/^struct decrementer : decrementer_base$/;"	s	namespace:mtl::vec
decrementer_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/decrementer.hpp	/^struct decrementer_base {};$/;"	s	namespace:mtl::vec
default_generator	CS207/Util.hpp	/^static std::mt19937 default_generator;$/;"	m	namespace:CS207
default_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    >                                            default_map;$/;"	t	struct:mtl::type_para::matrix_default_density
default_omega	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/relaxation_parameter.hpp	/^struct default_omega$/;"	s	namespace:itl
degree	Graph.hpp	/^	size_type degree() const {$/;"	f	class:Graph::Node
degree	Mesh.hpp	/^		size_type degree() const {$/;"	f	class:Mesh::Triangle
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    void delay_assign() const {}$/;"	f	struct:mtl::mat::mat_mat_op_expr
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    void delay_assign() const { delayed_assign= true; }    $/;"	f	struct:mtl::fused_expr
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy_assign.hpp	/^    void delay_assign() const {}    $/;"	f	struct:mtl::lazy_assign
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^    void delay_assign() { delayed_assign= true; }$/;"	f	class:mtl::vec::vec_vec_asgn_expr
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    void delay_assign() const {}$/;"	f	class:mtl::vec::dense_vector
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    void delay_assign() const {}$/;"	f	struct:mtl::vec::map_view
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^    void delay_assign() const { }$/;"	f	struct:mtl::vec::mat_cvec_multiplier
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    void delay_assign() const {}$/;"	f	class:mtl::vec::strided_vector_ref
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^    void delay_assign() const {}$/;"	f	struct:mtl::vec::vec_const_ref_expr
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    void delay_assign() const $/;"	f	struct:mtl::vec::vec_scal_aop_expr
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    void delay_assign() const { delayed_assign= true; }$/;"	f	struct:mtl::vec::vec_vec_aop_expr
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    void delay_assign() const {}$/;"	f	struct:mtl::vec::vec_vec_op_expr
delay_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    void delay_assign() const {}$/;"	f	struct:mtl::vec::vec_vec_pmop_expr
delayed_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    mutable bool                        delayed_assign;$/;"	m	struct:mtl::fused_expr
delayed_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^     bool                        delayed_assign;$/;"	m	class:mtl::vec::vec_vec_asgn_expr
delayed_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    mutable bool                 delayed_assign, with_comma;$/;"	m	struct:mtl::vec::vec_scal_aop_expr
delayed_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^     mutable bool                        delayed_assign;$/;"	m	struct:mtl::vec::vec_vec_aop_expr
delete_it	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void delete_it()$/;"	f	struct:mtl::detail::contiguous_memory_block
delim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/path.hpp	/^    const static char delim = '\\\\';$/;"	m	namespace:mtl::io
delta	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/armijo.hpp	/^    Value delta, gamma, beta1, beta;$/;"	m	class:itl::armijo
delta	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/wolf.hpp	/^    Value delta, gamma, beta1, beta2; $/;"	m	class:itl::wolf
dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct dense : virtual universe {};$/;"	s	namespace:mtl::tag
dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct dense {};$/;"	s	namespace:mtl
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    dense2D() : memory_base(dim_type().num_rows() * dim_type().num_cols())$/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    dense2D(MatrixSrc& matrix, dense2D_sub_ctor, $/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    dense2D(const self& m) $/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    dense2D(self&& src) : memory_base(dim_type().num_rows() * dim_type().num_cols())$/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    dense2D(std::initializer_list<std::initializer_list<Value2> > values)$/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    explicit dense2D(const MatrixSrc& src) $/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    explicit dense2D(const self& m, clone_ctor) $/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    explicit dense2D(mtl::non_fixed::dimensions d) $/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    explicit dense2D(mtl::non_fixed::dimensions d, value_type* a) $/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    explicit dense2D(size_type num_rows, size_type num_cols) $/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    explicit dense2D(size_type num_rows, size_type num_cols, value_type* a) $/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    explicit dense2D(value_type* a) $/;"	f	class:mtl::mat::dense2D
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^class dense2D $/;"	c	namespace:mtl::mat
dense2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct dense2D $/;"	s	namespace:mtl::tag
dense2D_array_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct dense2D_array_size {$/;"	s	namespace:mtl::mat::detail
dense2D_array_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct dense2D_array_size<Parameters, true>$/;"	s	namespace:mtl::mat::detail
dense2D_cc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	template <typename Orientation> struct dense2D_cc$/;"	s	namespace:mtl::traits::detail
dense2D_indexer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^class dense2D_indexer $/;"	c	namespace:mtl::mat
dense2D_iterator_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        struct dense2D_iterator_range_generator$/;"	s	namespace:mtl::traits::detail
dense2D_rc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	template <typename Orientation> struct dense2D_rc {};$/;"	s	namespace:mtl::traits::detail
dense2D_rc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	template<> struct dense2D_rc<col_major>$/;"	s	namespace:mtl::traits::detail
dense2D_rc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	template<> struct dense2D_rc<row_major>$/;"	s	namespace:mtl::traits::detail
dense2D_sub_ctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^struct dense2D_sub_ctor {};$/;"	s	namespace:mtl::mat
dense2D_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct dense2D_view $/;"	s	namespace:mtl::tag
dense_col_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct dense_col_vector$/;"	s	namespace:mtl::tag
dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^    dense_el_cursor () {} $/;"	f	struct:mtl::dense_el_cursor
dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^    dense_el_cursor (const_pointer_type me) : super(me) {}$/;"	f	struct:mtl::dense_el_cursor
dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^    dense_el_cursor (super s) : super(s) {}$/;"	f	struct:mtl::dense_el_cursor
dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^    dense_el_cursor(mtl::mat::dense2D<Value, Parameters> const& ma, size_t r, size_t c)$/;"	f	struct:mtl::dense_el_cursor
dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^struct dense_el_cursor : public detail::base_cursor<const Value*> $/;"	s	namespace:mtl
dense_element_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct dense_element_range_generator$/;"	s	namespace:mtl::traits::detail
dense_mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline dense_mat_cvec_mult(const dense2D<MValue, MPara>& A, const mtl::vec::dense_vector<ValueIn, ParaIn>& v, VectorOut& w, Assign, boost::mpl::false_)$/;"	f	class:mtl::mat::boost::enable_if
dense_mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void dense_mat_cvec_mult(const Matrix& A, const VectorIn& v, VectorOut& w, Assign, boost::mpl::false_)$/;"	f	namespace:mtl::mat
dense_mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void dense_mat_cvec_mult(const Matrix& A, const VectorIn& v, VectorOut& w, Assign, boost::mpl::true_)$/;"	f	namespace:mtl::mat
dense_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct dense_matrix : virtual dense, virtual matrix {};$/;"	s	namespace:mtl::tag
dense_non_recursive_product_limit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t dense_non_recursive_product_limit= MTL_MATRIX_DENSE_NON_RECURSIVE_PRODUCT_LIMIT;$/;"	m	namespace:mtl::mat
dense_row_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct dense_row_vector$/;"	s	namespace:mtl::tag
dense_rvec_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^inline void dense_rvec_mat_mult(const VectorIn& v, const Matrix& A, VectorOut& w, Assign, boost::mpl::false_)$/;"	f	namespace:mtl::vec
dense_rvec_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^inline void dense_rvec_mat_mult(const VectorIn& v, const Matrix& A, VectorOut& w, Assign, boost::mpl::true_)$/;"	f	namespace:mtl::vec
dense_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    dense_vector( ) : memory_base( Parameters::dimension::value ) {}$/;"	f	class:mtl::vec::dense_vector
dense_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    dense_vector( const self& src )$/;"	f	class:mtl::vec::dense_vector
dense_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    dense_vector( const self& src, clone_ctor )$/;"	f	class:mtl::vec::dense_vector
dense_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    dense_vector(std::initializer_list<Value2> values)$/;"	f	class:mtl::vec::dense_vector
dense_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    explicit dense_vector( size_type n ) : memory_base( n ) { static_check( n ); }$/;"	f	class:mtl::vec::dense_vector
dense_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    explicit dense_vector( size_type n, value_type *address )$/;"	f	class:mtl::vec::dense_vector
dense_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    explicit dense_vector( size_type n, value_type value )$/;"	f	class:mtl::vec::dense_vector
dense_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    explicit dense_vector(const VectorSrc& src,$/;"	f	class:mtl::vec::dense_vector
dense_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    explicit dense_vector(const std::vector<value_type>& src)$/;"	f	class:mtl::vec::dense_vector
dense_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^class dense_vector$/;"	c	namespace:mtl::vec
density	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct density {};$/;"	s	namespace:mtl::type_para
density_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& density_assign(const Source& src, boost::mpl::false_)$/;"	f	struct:mtl::mat::crtp_matrix_assign
density_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& density_assign(const Source& src, boost::mpl::true_)$/;"	f	struct:mtl::mat::crtp_matrix_assign
density_ele_rscale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& density_ele_rscale(const Factor& alpha, boost::mpl::false_)$/;"	f	struct:mtl::mat::crtp_matrix_assign
density_ele_rscale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& density_ele_rscale(const Source& src, boost::mpl::true_)$/;"	f	struct:mtl::mat::crtp_matrix_assign
density_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& density_minus_assign(const Source& src, boost::mpl::false_)$/;"	f	struct:mtl::mat::crtp_matrix_assign
density_minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& density_minus_assign(const Source& src, boost::mpl::true_)$/;"	f	struct:mtl::mat::crtp_matrix_assign
density_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& density_plus_assign(const Source& src, boost::mpl::false_)$/;"	f	struct:mtl::mat::crtp_matrix_assign
density_plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& density_plus_assign(const Source& src, boost::mpl::true_)$/;"	f	struct:mtl::mat::crtp_matrix_assign
dereference	Examples/iterator_adaptor_boost.cpp	/^  int dereference() const {$/;"	f	struct:my_transform_iterator	file:
dereference	Examples/iterator_adaptor_boost.cpp	/^  int& dereference() const {$/;"	f	struct:my_position_iterator	file:
derived	Examples/expr_template.cpp	/^  const E& derived() const {$/;"	f	struct:MatExpr
derived	Examples/iterator_adaptor.cpp	/^  const derived_type& derived() const {$/;"	f	class:iterator_adaptor	file:
derived	Examples/iterator_adaptor.cpp	/^  derived_type& derived() {$/;"	f	class:iterator_adaptor	file:
destroyBuffer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    const bool destroyBuffer;$/;"	m	class:mtl::vec::extracter
detail	Examples/distance_dispatch.cpp	/^namespace detail {$/;"	n	namespace:cris	file:
detail	Examples/trivial_copy.cpp	/^namespace detail {$/;"	n	namespace:cris	file:
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	/^namespace detail {$/;"	n	namespace:math
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^namespace mtl { namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^namespace mtl { namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^namespace mtl { namespace traits { namespace detail {$/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^namespace mtl { namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^namespace mtl { namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    namespace detail {$/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^namespace detail { $/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    namespace detail $/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    namespace detail {$/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^namespace detail $/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^namespace mtl { namespace traits { namespace detail {$/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    namespace detail {$/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^namespace mtl { namespace mat { namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    namespace detail {$/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    namespace detail {$/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    namespace detail$/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^	namespace detail {$/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjust_cursor.hpp	/^namespace mtl { namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cross.hpp	/^    namespace detail {$/;"	n	namespace:mtl::vec
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	namespace detail {$/;"	n	namespace:mtl::vec
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^namespace detail {$/;"	n	namespace:std
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hermitian.hpp	/^	namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^namespace detail {$/;"	n	namespace:mtl::assign
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_specialize.hpp	/^namespace mtl { namespace mat {namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	/^namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/shift_block_detail.hpp	/^namespace mtl { namespace operations { namespace detail {$/;"	n	namespace:mtl::operations
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/solve.hpp	/^    namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/swap_row.hpp	/^    namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^    namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^namespace detail {$/;"	n	namespace:mtl::mat
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^namespace detail {$/;"	n	namespace:mtl::traits
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^namespace detail$/;"	n	namespace:mtl::complexity_classes
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^namespace mtl { namespace utilities { namespace detail {$/;"	n	namespace:mtl::utilities
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^namespace mtl { namespace detail {$/;"	n	namespace:mtl
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^namespace detail {$/;"	n	namespace:mtl::vec
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    namespace detail {$/;"	n	namespace:mtl::vec
detail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^namespace mtl { namespace vec { namespace detail {$/;"	n	namespace:mtl::vec
dfp	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/dfp.hpp	/^struct dfp$/;"	s	namespace:itl
dgemm_alpha	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    double inline dgemm_alpha(assign::assign_sum) { return 1.0; }$/;"	f	namespace:mtl::detail
dgemm_alpha	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    double inline dgemm_alpha(assign::minus_sum) { return -1.0; }$/;"	f	namespace:mtl::detail
dgemm_alpha	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    double inline dgemm_alpha(assign::plus_sum) { return 1.0; } $/;"	f	namespace:mtl::detail
dgemm_beta	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    double inline dgemm_beta(assign::assign_sum) { return 0.0; }$/;"	f	namespace:mtl::detail
dgemm_beta	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    double inline dgemm_beta(assign::minus_sum) { return 1.0; }$/;"	f	namespace:mtl::detail
dgemm_beta	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    double inline dgemm_beta(assign::plus_sum) { return 1.0; }$/;"	f	namespace:mtl::detail
dia	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void crs_row_init(size_type MTL_DEBUG_ARG(r), size_type& j0, size_type MTL_DEBUG_ARG(cj1), Value& dia, tag::universe_diagonal) const$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
dia	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void row_init(size_type MTL_DEBUG_ARG(r), Cursor& aic, Cursor& MTL_DEBUG_ARG(aiend), Value& dia, tag::universe_diagonal) const$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
dia_inc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	int dia_inc(tag::unit_diagonal) { return 1; }$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
dia_inc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	template <typename Tag> int dia_inc(Tag) { return 0; }$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
dia_inc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	int dia_inc(tag::unit_diagonal) const { return 1; }$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
dia_inc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	template <typename Tag> int dia_inc(Tag) const { return 0; }$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
dia_inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^    mtl::dense_vector<Scalar>     dia_inv;$/;"	m	class:itl::gauss_seidel
dia_inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^    mtl::dense_vector<Scalar>  dia_inv;$/;"	m	class:itl::gauss_seidel
dia_inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^    mtl::dense_vector<Scalar>     dia_inv;$/;"	m	class:itl::jacobi
dia_inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^    mtl::dense_vector<Scalar>  dia_inv;$/;"	m	class:itl::jacobi
dia_inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^    mtl::dense_vector<Scalar>     dia_inv;$/;"	m	class:itl::jor
dia_inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^    mtl::dense_vector<Scalar>  dia_inv;$/;"	m	class:itl::jor
dia_inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^    mtl::dense_vector<Scalar>     dia_inv;$/;"	m	class:itl::sor
dia_inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^    mtl::dense_vector<Scalar>  dia_inv;$/;"	m	class:itl::sor
dia_pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^    mtl::dense_vector<size_type>  dia_pos;$/;"	m	class:itl::gauss_seidel
dia_pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^    mtl::dense_vector<size_type>  dia_pos;$/;"	m	class:itl::jacobi
dia_pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^    mtl::dense_vector<size_type>  dia_pos;$/;"	m	class:itl::jor
dia_pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^    mtl::dense_vector<size_type>  dia_pos;$/;"	m	class:itl::sor
diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^    explicit diagonal(const Matrix& A) : inv_diag(num_rows(A))$/;"	f	class:itl::pc::diagonal
diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^class diagonal$/;"	c	namespace:itl::pc
diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/diagonal.hpp	/^	inline diagonal(const Matrix& A)$/;"	f	class:mtl::mat::mtl::vec
diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/diagonal.hpp	/^	inline diagonal(const Vector& v)$/;"	f	class:mtl::vec::mtl::mat
diagonal_setup	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/diagonal_setup.hpp	/^inline void diagonal_setup(Matrix& matrix, const Value& value)$/;"	f	namespace:mtl::mat
diagonals	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    std::vector<std::vector<Value> >  diagonals;$/;"	m	struct:mtl::mat::sparse_banded_inserter
diff_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    typedef long                 diff_type;$/;"	t	struct:mtl::utility::zip_it
difference_type	Graph.hpp	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Graph::EdgeIterator
difference_type	Graph.hpp	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Graph::IncidentIterator
difference_type	Graph.hpp	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Graph::NodeIterator
difference_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^	typedef int                   difference_type;$/;"	t	struct:std::iterator_traits
difference_type	Mesh.hpp	/^			typedef std::ptrdiff_t difference_type;$/;"	t	class:Mesh::AdjacentIterator
difference_type	Mesh.hpp	/^			typedef std::ptrdiff_t difference_type;$/;"	t	class:Mesh::TriangleIterator
difference_type	Point.hpp	/^  typedef std::ptrdiff_t  difference_type;$/;"	t	struct:Point
difference_type	subgraph.cpp	/^  typedef typename std::iterator_traits<It>::difference_type   difference_type;$/;"	t	class:filter_iterator	file:
different_non_complex	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/different_non_complex.hpp	/^struct different_non_complex$/;"	s	namespace:mtl::traits
dilate	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    void dilate(T x)$/;"	f	struct:mtl::dilated::dilated_int
dilate_lut	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilation_table.hpp	/^static const unsigned short int dilate_lut[256] = {$/;"	m	namespace:mtl::dilated
dilated	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^namespace mtl { namespace dilated {$/;"	n	namespace:mtl
dilated	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilation_table.hpp	/^namespace mtl { namespace dilated {$/;"	n	namespace:mtl
dilated	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^namespace mtl { namespace dilated {$/;"	n	namespace:mtl
dilated_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    dilated_col_t                dilated_col; $/;"	m	struct:mtl::mat::morton_dense_key
dilated_col_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef dilated_int<std::size_t, ~BitMask, true>  dilated_col_t; $/;"	t	class:mtl::mat::morton_dense
dilated_col_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef dilated_int<std::size_t, ~BitMask, true>  dilated_col_t; $/;"	t	struct:mtl::mat::morton_dense_el_cursor
dilated_col_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef dilated_int<std::size_t, ~BitMask, true>  dilated_col_t; $/;"	t	struct:mtl::mat::morton_dense_key
dilated_int	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    dilated_int()$/;"	f	struct:mtl::dilated::dilated_int
dilated_int	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    explicit dilated_int(T x)$/;"	f	struct:mtl::dilated::dilated_int
dilated_int	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^struct dilated_int$/;"	s	namespace:mtl::dilated
dilated_one	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^			 dilated_one = dilated_zero + last_bit<T, bit_mask>::value;$/;"	m	struct:mtl::dilated::dilated_int
dilated_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    dilated_row_t                dilated_row;$/;"	m	struct:mtl::mat::morton_dense_key
dilated_row_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef dilated_int<std::size_t, BitMask, true>   dilated_row_t;$/;"	t	class:mtl::mat::morton_dense
dilated_row_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef dilated_int<std::size_t, BitMask, true>   dilated_row_t;$/;"	t	struct:mtl::mat::morton_dense_key
dilated_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    T dilated_value() const$/;"	f	struct:mtl::dilated::dilated_int
dilated_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^	                 dilated_zero = Normalized ? 0 : anti_mask,$/;"	m	struct:mtl::dilated::dilated_int
dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    dim_type                        dim;       \/\/\/< # of rows and columns$/;"	m	struct:mtl::mat::base_matrix
dim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct dim {};$/;"	s	namespace:mtl
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type dim1() const $/;"	f	struct:mtl::mat::base_matrix
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type dim1(col_major) const $/;"	f	struct:mtl::mat::base_matrix
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type dim1(row_major) const $/;"	f	struct:mtl::mat::base_matrix
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type dim1() const $/;"	f	struct:mtl::mat::base_sub_matrix
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type dim1(col_major) const $/;"	f	struct:mtl::mat::base_sub_matrix
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type dim1(row_major) const $/;"	f	struct:mtl::mat::base_sub_matrix
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    size_type dim1() const { return num_rows(my_functor); }$/;"	f	class:mtl::mat::implicit_dense
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    size_type dim1() const { return rows.size(); } \/\/\/< Dimension 1 is equal to number of rows$/;"	f	struct:mtl::mat::indirect
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    size_type dim1() const { return ref.dim1(); }$/;"	f	struct:mtl::mat::map_view
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    size_type dim1() const  {  return ref.dim2(); }$/;"	f	struct:mtl::mat::transposed_view
dim1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	    typedef typename boost::mpl::at<TypePara, dimensionality>::type         dim1;$/;"	t	struct:mtl::type_para::replace_defaults_common
dim2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type dim2() const $/;"	f	struct:mtl::mat::base_matrix
dim2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type dim2(col_major) const $/;"	f	struct:mtl::mat::base_matrix
dim2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type dim2(row_major) const $/;"	f	struct:mtl::mat::base_matrix
dim2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type dim2() const $/;"	f	struct:mtl::mat::base_sub_matrix
dim2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type dim2(col_major) const $/;"	f	struct:mtl::mat::base_sub_matrix
dim2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type dim2(row_major) const $/;"	f	struct:mtl::mat::base_sub_matrix
dim2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    size_type dim2() const { return num_cols(my_functor); }$/;"	f	class:mtl::mat::implicit_dense
dim2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    size_type dim2() const { return cols.size(); } \/\/\/< Dimension 2 is equal to number of columns$/;"	f	struct:mtl::mat::indirect
dim2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    size_type dim2() const { return ref.dim2(); }$/;"	f	struct:mtl::mat::map_view
dim2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    size_type dim2() const  {  return ref.dim1(); }$/;"	f	struct:mtl::mat::transposed_view
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef typename Matrix::dim_type                  dim_type;$/;"	t	struct:mtl::mat::banded_view
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    typedef typename Parameters::dimensions   dim_type;$/;"	t	struct:mtl::mat::base_matrix
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    typedef typename Parameters::dimensions   dim_type;$/;"	t	struct:mtl::mat::base_sub_matrix
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef typename Parameters::dimensions                             dim_type;$/;"	t	class:mtl::mat::coordinate2D
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef typename Parameters::dimensions   dim_type;$/;"	t	class:mtl::mat::dense2D
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef mtl::non_fixed::dimensions                 dim_type;$/;"	t	class:mtl::mat::implicit_dense
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef typename Matrix::dim_type                  dim_type;$/;"	t	struct:mtl::mat::map_view
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    typedef mtl::non_fixed::dimensions           dim_type;$/;"	t	struct:mtl::mat::mat_mat_ele_times_expr
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef mtl::non_fixed::dimensions           dim_type;$/;"	t	struct:mtl::mat::mat_mat_times_expr
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Parameters::dimensions   dim_type;$/;"	t	class:mtl::mat::morton_dense
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef typename Matrix::dim_type::transposed_type dim_type;$/;"	t	struct:mtl::mat::transposed_view
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    typedef typename set_matrix_dimensions<typename boost::mpl::at<TypePara, dimensionality>::type>::type dim_type;$/;"	t	struct:mtl::type_para::matrix_parameter_generator
dim_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	    typedef typename set_vector_dimensions<typename boost::mpl::at<TypePara, dimensionality>::type>::type dim_type;$/;"	t	struct:mtl::type_para::vector_parameter_generator
dimension	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^	dimension(size_type v= 0) : my_size(v) {} \/\/\/ Constructor with default zero$/;"	f	struct:mtl::vec::non_fixed::dimension
dimension	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^    struct dimension$/;"	s	namespace:mtl::vec::fixed
dimension	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^    struct dimension$/;"	s	namespace:mtl::vec::non_fixed
dimension	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/parameter.hpp	/^    typedef Dimension   dimension;$/;"	t	struct:mtl::vec::parameters
dimensionality	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct dimensionality {};$/;"	s	namespace:mtl::type_para
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef typename Parameters::dimensions          dimensions;$/;"	t	class:mtl::mat::compressed2D
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	typedef typename Parameters::dimensions   dimensions;$/;"	t	struct:mtl::mat::detail::dense2D_array_size
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	dimensions(size_type r= 0, size_type c= 0) : r(r), c(c) {}$/;"	f	struct:mtl::non_fixed::dimensions
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	explicit dimensions() {}$/;"	f	struct:mtl::fixed::dimensions
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	explicit dimensions(size_type r= Rows, size_type c= Cols) $/;"	f	struct:mtl::fixed::dimensions
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	explicit dimensions(size_type) {}$/;"	f	struct:mtl::fixed::dimensions
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	explicit dimensions(size_type, size_type) {}$/;"	f	struct:mtl::fixed::dimensions
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^    struct dimensions$/;"	s	namespace:mtl::fixed
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^    struct dimensions$/;"	s	namespace:mtl::non_fixed
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef typename Parameters::dimensions            dimensions;$/;"	t	class:mtl::mat::ell_matrix
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    dim_type dimensions() const { return ref.dimensions(); }$/;"	f	struct:mtl::mat::map_view
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/parameter.hpp	/^    typedef Dimensions  dimensions;$/;"	t	struct:mtl::mat::parameters
dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    dim_type dimensions() const $/;"	f	struct:mtl::mat::transposed_view
dings	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/DEFAULTIMPL_CHECK.cpp	/^struct dings$/;"	s	file:
dings	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/MOVE_CHECK.cpp	/^    dings(dings&&) {}$/;"	f	struct:dings
dings	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/MOVE_CHECK.cpp	/^struct dings$/;"	s	file:
dings	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/TEMPLATE_ALIAS_CHECK.cpp	/^struct dings {};$/;"	s	file:
direct_const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    direct_const_value(const Matrix&) {} \/\/ for compatibility$/;"	f	struct:mtl::detail::direct_const_value
direct_const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct direct_const_value$/;"	s	namespace:mtl::detail
direct_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    direct_value(const Matrix& ma) $/;"	f	struct:mtl::detail::direct_value
direct_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct direct_value $/;"	s	namespace:mtl::detail
directory_name	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/path.hpp	/^std::string inline directory_name(std::string s)$/;"	f	class:mtl::io::std
dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    type dispatch(cursor const& c, size_type row, size_type col, complexity_classes::linear) const$/;"	f	struct:mtl::traits::detail::dense2D_iterator_range_generator
dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    type dispatch(cursor const& c, size_type row, size_type col, complexity_classes::linear_cached) const$/;"	f	struct:mtl::traits::detail::dense2D_iterator_range_generator
dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	type dispatch(cursor const& c, size_type col, col_major) const$/;"	f	struct:mtl::traits::range_generator
dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	type dispatch(cursor const& c, size_type col, row_major) const$/;"	f	struct:mtl::traits::range_generator
dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	type dispatch(cursor const& c, size_type row, col_major) const$/;"	f	struct:mtl::traits::range_generator
dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	type dispatch(cursor const& c, size_type row, row_major) const$/;"	f	struct:mtl::traits::range_generator
dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    static inline Return dispatch(Ref& A, const irange& row_range, size_type col, boost::mpl::false_)$/;"	f	struct:mtl::ColumnInMatrix
dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    static inline Return dispatch(Ref& A, const irange& row_range, size_type col, boost::mpl::true_)$/;"	f	struct:mtl::ColumnInMatrix
dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    static inline Return dispatch(Ref& A, size_type row, const irange& col_range, boost::mpl::false_)$/;"	f	struct:mtl::RowInMatrix
dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    static inline Return dispatch(Ref& A, size_type row, const irange& col_range, boost::mpl::true_)$/;"	f	struct:mtl::RowInMatrix
display	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void display(size_type i)$/;"	f	struct:mtl::mat::compressed2D_inserter
dist	CS207/GLCamera.hpp	/^  float dist;$/;"	m	class:CS207::GLCamera
distance	Examples/distance_dispatch.cpp	/^distance(Iter first, Iter last) {$/;"	f	namespace:cris
distance	Examples/distance_dispatch.cpp	/^distance(Iter first, Iter last, std::input_iterator_tag) {$/;"	f	namespace:cris::detail
distance	Examples/distance_dispatch.cpp	/^distance(Iter first, Iter last, std::random_access_iterator_tag) {$/;"	f	namespace:cris::detail
distance	Point.hpp	/^float distance(const Point& a, const Point& b) {$/;"	f
div_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct div_op < mat<Value1>, scal >$/;"	s	namespace:mtl::ashape
div_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct div_op$/;"	s	namespace:mtl::ashape
div_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct div_op< cvec<Value1>, scal >$/;"	s	namespace:mtl::ashape
div_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct div_op< rvec<Value1>, scal >$/;"	s	namespace:mtl::ashape
div_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct div_op<scal,scal>$/;"	s	namespace:mtl::ashape
div_result	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/div_result.hpp	/^struct div_result $/;"	s	namespace:mtl::traits
div_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/div_result.hpp	/^struct div_result_aux < Op1, Op2, ::mtl::ashape::cvec_scal_div >$/;"	s	namespace:mtl::traits
div_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/div_result.hpp	/^struct div_result_aux < Op1, Op2, ::mtl::ashape::mat_scal_div >$/;"	s	namespace:mtl::traits
div_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/div_result.hpp	/^struct div_result_aux < Op1, Op2, ::mtl::ashape::rvec_scal_div >$/;"	s	namespace:mtl::traits
div_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/div_result.hpp	/^template < typename Op1, typename Op2, typename DivOp > struct div_result_aux {};$/;"	s	namespace:mtl::traits
div_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct div_shape < cvec<Value1>, scal >$/;"	s	namespace:mtl::ashape
div_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct div_shape < mat<Value1>, scal >$/;"	s	namespace:mtl::ashape
div_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct div_shape < rvec<Value1>, scal >$/;"	s	namespace:mtl::ashape
div_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct div_shape$/;"	s	namespace:mtl::ashape
div_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct div_shape<scal,scal>$/;"	s	namespace:mtl::ashape
divide	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct divide$/;"	s	namespace:mtl::sfunctor
divide_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct divide_assign$/;"	s	namespace:mtl::sfunctor
divide_by	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^	explicit divide_by(const Value2& v2) : v2(v2) {}$/;"	f	struct:mtl::tfunctor::divide_by
divide_by	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^    inline divide_by(const Value1& value1, const Value2& value2)$/;"	f	class:mtl::mat::tfunctor::divide_by
divide_by	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^    inline divide_by(const Value1& value1, const Value2& value2)$/;"	f	class:mtl::vec::tfunctor::divide_by
divide_by	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^    struct divide_by$/;"	s	namespace:mtl::tfunctor
divide_by	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^    struct divide_by<Matrix, Value2, tag::matrix>$/;"	s	namespace:mtl::tfunctor
divide_by	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^    struct divide_by<Vector, Value2, tag::vector>$/;"	s	namespace:mtl::tfunctor
divide_by_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by_inplace.hpp	/^	void divide_by_inplace(Coll& c, const Factor& alpha, tag::scalar)$/;"	f	namespace:mtl
divide_by_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by_inplace.hpp	/^	void divide_by_inplace(Collection& c, const Factor& alpha)$/;"	f	namespace:mtl
divide_by_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    divide_by_view (const self& that) : base(that) {}$/;"	f	struct:mtl::mat::divide_by_view
divide_by_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    divide_by_view (self&& that) : base(that) {}$/;"	f	struct:mtl::mat::divide_by_view
divide_by_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    divide_by_view(boost::shared_ptr<Matrix> p, const Divisor& div)$/;"	f	struct:mtl::mat::divide_by_view
divide_by_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    divide_by_view(const Matrix& matrix,const Divisor& div)$/;"	f	struct:mtl::mat::divide_by_view
divide_by_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct divide_by_view$/;"	s	namespace:mtl::mat
divide_by_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    divide_by_view (const self& that) : base(that) {}$/;"	f	struct:mtl::vec::divide_by_view
divide_by_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    divide_by_view (self&& that) : base(that) {}$/;"	f	struct:mtl::vec::divide_by_view
divide_by_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit divide_by_view(boost::shared_ptr<Vector> p, const Divisor& div)$/;"	f	struct:mtl::vec::divide_by_view
divide_by_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit divide_by_view(const Vector& vector, const Divisor& div)$/;"	f	struct:mtl::vec::divide_by_view
divide_by_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^struct divide_by_view$/;"	s	namespace:mtl::vec
divide_it	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^    void divide_it(VectorOut& w) const$/;"	f	struct:mtl::vec::mat_cvec_multiplier
divide_sum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^struct divide_sum$/;"	s	namespace:mtl::assign
division_by_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit division_by_zero(const char *s= "Division by zero") : runtime_error(s) {}$/;"	f	struct:mtl::division_by_zero
division_by_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct division_by_zero : mtl::runtime_error$/;"	s	namespace:mtl
dmat_dmat_mult_specialize	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_specialize.hpp	/^struct dmat_dmat_mult_specialize$/;"	s	namespace:mtl::mat::detail
dmat_dmat_mult_tiling1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_specialize.hpp	/^struct dmat_dmat_mult_tiling1$/;"	s	namespace:mtl::mat::detail
dmat_dmat_mult_tiling2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_specialize.hpp	/^struct dmat_dmat_mult_tiling2$/;"	s	namespace:mtl::mat::detail
dmat_dmat_plus_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    dmat_dmat_plus_expr( E1 const& v1, E2 const& v2 )$/;"	f	struct:mtl::mat::dmat_dmat_plus_expr
dmat_dmat_plus_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^struct dmat_dmat_plus_expr $/;"	s	namespace:mtl::mat
dmat_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_expr.hpp	/^struct dmat_expr$/;"	s	namespace:mtl::mat
domain	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/domain.hpp	/^struct domain$/;"	s	namespace:mtl::traits
domain_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/domain.hpp	/^struct domain_aux {};$/;"	s	namespace:mtl::traits
domain_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/domain.hpp	/^struct domain_aux<Matrix, true>$/;"	s	namespace:mtl::traits
domain_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit domain_error(const char *s= "MTL4 domain error.") : std::domain_error(s) {}$/;"	f	struct:mtl::domain_error
domain_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct domain_error : public std::domain_error$/;"	s	namespace:mtl
doppled_128_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_128_col_mask= generate_mask<true, 7, col_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_128_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_128_row_mask= generate_mask<true, 7, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_16_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_16_col_mask= generate_mask<true, 4, col_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_16_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_16_row_mask= generate_mask<true, 4, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_2_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_2_col_mask= generate_mask<true, 1, col_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_2_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_2_row_mask= generate_mask<true, 1, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_32_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_32_col_mask= generate_mask<true, 5, col_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_32_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_32_row_mask= generate_mask<true, 5, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_4_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_4_col_mask= generate_mask<true, 2, col_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_4_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_4_row_mask= generate_mask<true, 2, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_64_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_64_col_mask= generate_mask<true, 6, col_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_64_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_64_row_mask= generate_mask<true, 6, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_z_128_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_z_128_col_mask= generate_mask<false, 7, col_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_z_128_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_z_128_row_mask= generate_mask<false, 7, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_z_16_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_z_16_col_mask= generate_mask<false, 4, col_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_z_16_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_z_16_row_mask= generate_mask<false, 4, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_z_32_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_z_32_col_mask= generate_mask<false, 5, col_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_z_32_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_z_32_row_mask= generate_mask<false, 5, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_z_64_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_z_64_col_mask= generate_mask<false, 6, col_major, 0>::value,$/;"	m	namespace:mtl::recursion
doppled_z_64_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			doppled_z_64_row_mask= generate_mask<false, 6, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
dot	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    struct dot$/;"	s	namespace:mtl::vec::sfunctor
dot	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	inline dot(const Vector1& v1, const Vector2& v2)$/;"	f	class:mtl::vec::detail::dot_result
dot	Point.hpp	/^double dot(const Point& a, const Point& b) {$/;"	f
dot_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    struct dot_aux$/;"	s	namespace:mtl::vec::sfunctor
dot_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    struct dot_aux<Max0, Max0>$/;"	s	namespace:mtl::vec::sfunctor
dot_class	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    dot_class(const Vector1& v1, const Vector2& v2) : v1(v1), v2(v2) {}$/;"	f	struct:mtl::vec::dot_class
dot_class	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	struct dot_class$/;"	s	namespace:mtl::vec
dot_class	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	struct dot_class<1, Vector1, Vector2, ConjOpt>$/;"	s	namespace:mtl::vec
dot_index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^    dot_index_evaluator(Scalar& scalar, const Vector1& v1, const Vector2& v2) $/;"	f	struct:mtl::vec::dot_index_evaluator
dot_index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^struct dot_index_evaluator$/;"	s	namespace:mtl::vec
dot_real	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	inline dot_real(const Vector1& v1, const Vector2& v2)$/;"	f	class:mtl::vec::detail::dot_result
dot_result	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    struct dot_result$/;"	s	namespace:mtl::vec::detail
dot_simple	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	inline dot_simple(const Vector1& v1, const Vector2& v2, ConjOpt conj_opt)$/;"	f	class:mtl::vec::detail::dot_result
doubleShift	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    void doubleShift(irange r) $/;"	f	class:mtl::mat::eigenvalue_solver
draw_graph	CS207/SDLViewer.hpp	/^  void draw_graph(const G& g) {$/;"	f	class:CS207::SDLViewer
draw_graph_nodes	CS207/SDLViewer.hpp	/^  void draw_graph_nodes(const G& g) {$/;"	f	class:CS207::SDLViewer
dual_	Mesh.hpp	/^		tri_edge dual_;$/;"	m	struct:Mesh::edge_data
dual_	Mesh.hpp	/^		vert_edge dual_;$/;"	m	struct:Mesh::link_data
dumb_iterator	Examples/distance_dispatch.cpp	/^  dumb_iterator() {}$/;"	f	struct:dumb_iterator
dumb_iterator	Examples/distance_dispatch.cpp	/^  dumb_iterator(const Iter& it) : it_(it) {}$/;"	f	struct:dumb_iterator
dumb_iterator	Examples/distance_dispatch.cpp	/^struct dumb_iterator {$/;"	s	file:
dummy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    int *dummy;$/;"	m	class:mtl::mat::element
dummy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    struct dummy { typedef void type; };$/;"	s	struct:mtl::mat::map_view
dummy3	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct dummy3 {};$/;"	s	namespace:mtl::tag
dummy4	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct dummy4 {};$/;"	s	namespace:mtl::tag
dummy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    struct dummy_type {};$/;"	s	class:mtl::vec::dense_vector
dump	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	void dump(value_type node) {$/;"	f	class:utils::binary_heap
duration	CS207/Util.hpp	/^  typedef typename clock::duration           duration;$/;"	t	class:CS207::Clock
dynamic_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    void dynamic_assign(boost::mpl::false_) \/\/ Without unrolling$/;"	f	struct:mtl::vec::vec_vec_aop_expr
dynamic_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    void dynamic_assign(boost::mpl::true_) \/\/ With unrolling$/;"	f	struct:mtl::vec::vec_vec_aop_expr
dynamic_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef typename mult_assign_mode<FunctorDynamic, Assign>::type              dynamic_type;$/;"	t	struct:mtl::assign::mult_assign_mode
edge	Graph.hpp	/^  Edge edge(size_type i) const {$/;"	f	class:Graph
edge_begin	Graph.hpp	/^	IncidentIterator edge_begin() const {$/;"	f	class:Graph::Node
edge_begin	Graph.hpp	/^  EdgeIterator edge_begin() const {$/;"	f	class:Graph
edge_begin	Mesh.hpp	/^	edge_iterator edge_begin() const {$/;"	f	class:Mesh
edge_data	Graph.hpp	/^	edge_data(uid_type u, scalar len, edge_value_type ev) : uid(u), rest_length(len), v(ev) {$/;"	f	struct:Graph::edge_data
edge_data	Graph.hpp	/^  typedef struct edge_data {$/;"	s	class:Graph
edge_data	Graph.hpp	/^  } edge_data;$/;"	t	class:Graph	typeref:struct:Graph::edge_data
edge_data	Mesh.hpp	/^		edge_data() {std::cerr << "made empty edge data " << std::endl;};$/;"	f	struct:Mesh::edge_data
edge_data	Mesh.hpp	/^		edge_data(tri_edge dual) : dual_(dual) {}$/;"	f	struct:Mesh::edge_data
edge_data	Mesh.hpp	/^	typedef struct edge_data {$/;"	s	class:Mesh
edge_data	Mesh.hpp	/^	} edge_data;$/;"	t	class:Mesh	typeref:struct:Mesh::edge_data
edge_data	poisson.cpp	/^} edge_data;$/;"	t	typeref:struct:EdgeData	file:
edge_end	Graph.hpp	/^	IncidentIterator edge_end() const {$/;"	f	class:Graph::Node
edge_end	Graph.hpp	/^  EdgeIterator edge_end() const {$/;"	f	class:Graph
edge_end	Mesh.hpp	/^	edge_iterator edge_end() const {$/;"	f	class:Mesh
edge_idx_type	Graph.hpp	/^  typedef int edge_idx_type;$/;"	t	class:Graph
edge_iterator	Graph.hpp	/^  typedef EdgeIterator edge_iterator;$/;"	t	class:Graph
edge_iterator	Mesh.hpp	/^	typedef typename VertGraph::edge_iterator edge_iterator;$/;"	t	class:Mesh
edge_type	Graph.hpp	/^  typedef Edge edge_type;$/;"	t	class:Graph
edge_value_type	Graph.hpp	/^  typedef E edge_value_type;$/;"	t	class:Graph
edges_	CS207/SDLViewer.hpp	/^  std::vector<unsigned> edges_;$/;"	m	class:CS207::SDLViewer
edges_	Graph.hpp	/^	std::vector<adjacency_data> edges_;$/;"	m	class:Graph
eigenvalue_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    eigenvalue_solver(const Matrix& IN) : ncols(num_cols(IN)), nrows(num_rows(IN)) {$/;"	f	class:mtl::mat::eigenvalue_solver
eigenvalue_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^class eigenvalue_solver {$/;"	c	namespace:mtl::mat
eigenvalue_symmetric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue_symmetric.hpp	/^inline eigenvalue_symmetric(const Matrix& A)$/;"	f	class:mtl::mat::mtl::vec
eigenvalue_symmetric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue_symmetric.hpp	/^inline eigenvalue_symmetric(const Matrix& A, typename Collection<Matrix>::size_type itMax)$/;"	f	class:mtl::mat::mtl::vec
eigenvalue_symmetric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue_symmetric.hpp	/^inline eigenvalue_symmetric(const Matrix& A, typename Collection<Matrix>::size_type)$/;"	f	class:mtl::mat::mtl::vec
eigenvalues	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^inline eigenvalues(const Matrix& A)$/;"	f	namespace:mtl::mat
el_cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef dense_el_cursor<Value>            el_cursor_type;  $/;"	t	class:mtl::mat::dense2D
el_cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_el_cursor<BitMask>    el_cursor_type; $/;"	t	class:mtl::mat::morton_dense
elapsed	CS207/Util.hpp	/^  duration elapsed() const {$/;"	f	class:CS207::Clock
ele_prod	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/operators.hpp	/^ele_prod(const mat_expr<E1>& e1, const mat_expr<E2>& e2)$/;"	f	namespace:mtl::mat
ele_prod	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_ele_prod_expr.hpp	/^ele_prod(const vec_expr<E1>& e1, const vec_expr<E2>& e2)$/;"	f	namespace:mtl::vec
ele_quot	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_ele_quot_expr.hpp	/^ele_quot(const vec_expr<E1>& e1, const vec_expr<E2>& e2)$/;"	f	namespace:mtl::vec
ele_rscale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& ele_rscale(const Factor& alpha)$/;"	f	struct:mtl::mat::crtp_matrix_assign
elem	Point.hpp	/^    double elem[3];$/;"	m	union:Point::__anon1
element	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    element() $/;"	f	class:mtl::mat::element
element	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    element(const element_type& other) $/;"	f	class:mtl::mat::element
element	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    element(int p_sequence_number, const index_type& p_indices, const matrix_type& p_values) $/;"	f	class:mtl::mat::element
element	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^class element $/;"	c	namespace:mtl::mat
element_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_array.hpp	/^inline element_array(const Array& array, const Rows& rows)$/;"	f	namespace:mtl::mat
element_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_array.hpp	/^inline element_array(const Array& array, const Rows& rows, const Cols& cols)$/;"	f	namespace:mtl::mat
element_array_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_array.hpp	/^    explicit element_array_t(const Array& array, const Rows& rows, const Cols& cols)$/;"	f	struct:mtl::mat::element_array_t
element_array_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_array.hpp	/^struct element_array_t$/;"	s	namespace:mtl::mat
element_begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    element_iterator element_begin() const { return m_elements + 0;  }$/;"	f	class:mtl::mat::element_structure
element_end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    element_iterator element_end() const { return m_elements + this->get_total_elements();   }$/;"	f	class:mtl::mat::element_structure
element_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    typedef element_type* element_iterator;$/;"	t	class:mtl::mat::element_structure
element_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_matrix.hpp	/^inline element_matrix(const Matrix& matrix, const Rows& rows)$/;"	f	namespace:mtl::mat
element_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_matrix.hpp	/^inline element_matrix(const Matrix& matrix, const Rows& rows, const Cols& cols)$/;"	f	namespace:mtl::mat
element_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_matrix.hpp	/^    explicit element_matrix_t(const Matrix& matrix, const Rows& rows, const Cols& cols)$/;"	f	struct:mtl::mat::element_matrix_t
element_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_matrix.hpp	/^struct element_matrix_t$/;"	s	namespace:mtl::mat
element_structure	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    element_structure(int total_elements= 0, int total_vars= 0, element_type* elements= 0)$/;"	f	class:mtl::mat::element_structure
element_structure	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    element_structure(this_type const& other)$/;"	f	class:mtl::mat::element_structure
element_structure	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^class element_structure $/;"	c	namespace:mtl::mat
element_structure	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct element_structure$/;"	s	namespace:mtl::tag
element_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    typedef element<ValType> element_type;$/;"	t	class:mtl::mat::element
element_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    typedef element<value_type> element_type;$/;"	t	class:mtl::mat::element_structure
elements	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    const_pointer_type elements() const $/;"	f	struct:mtl::detail::memory_crtp
elements	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    pointer_type elements()$/;"	f	struct:mtl::detail::memory_crtp
elements	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<value_type>&            elements;$/;"	m	struct:mtl::mat::compressed2D_inserter
elements_	Examples/proxy_example.cpp	/^  internal_element* elements_;$/;"	m	class:SimpleSet	file:
ell	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^typedef ellpack ell;$/;"	t	namespace:mtl
ell_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    explicit ell_matrix ()$/;"	f	class:mtl::mat::ell_matrix
ell_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    explicit ell_matrix (size_type num_rows, size_type num_cols)$/;"	f	class:mtl::mat::ell_matrix
ell_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^class ell_matrix$/;"	c	namespace:mtl::mat
ell_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct ell_matrix$/;"	s	namespace:mtl::tag
ell_matrix_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    explicit ell_matrix_inserter(matrix_type& A, size_type slot_size = 5)$/;"	f	struct:mtl::mat::ell_matrix_inserter
ell_matrix_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^struct ell_matrix_inserter$/;"	s	namespace:mtl::mat
ellpack	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct ellpack {};$/;"	s	namespace:mtl
empty	BoundingBox.hpp	/^  bool empty() const {$/;"	f	class:BoundingBox
empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	bool empty() {$/;"	f	class:utils::binary_heap
empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        bool empty() const { return my_finish <= my_start; }$/;"	f	class:mtl::irange
empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    bool empty() const { return this->used_memory() == 0; } \/\/\/< Whether it is empty$/;"	f	class:mtl::vec::dense_vector
empty	Point.hpp	/^  static constexpr bool         empty() { return false; }$/;"	f	struct:Point
empty_	BoundingBox.hpp	/^  bool empty_;$/;"	m	class:BoundingBox
empty_node_map	CS207/SDLViewer.hpp	/^  std::map<typename G::node_type, unsigned> empty_node_map(const G&) const {$/;"	f	class:CS207::SDLViewer
emult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_op$/;"	s	namespace:mtl::ashape
emult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_op<cvec<Value1>, rvec<Value2> >$/;"	s	namespace:mtl::ashape
emult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_op<mat<Value1>, cvec<Value2> >$/;"	s	namespace:mtl::ashape
emult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_op<mat<Value1>, mat<Value2> >$/;"	s	namespace:mtl::ashape
emult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_op<rvec<Value1>, cvec<Value2> >$/;"	s	namespace:mtl::ashape
emult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_op<rvec<Value1>, mat<Value2> >$/;"	s	namespace:mtl::ashape
emult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_op<scal, scal>$/;"	s	namespace:mtl::ashape
emult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_shape$/;"	s	namespace:mtl::ashape
emult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_shape<cvec<Value1>, rvec<Value2> >$/;"	s	namespace:mtl::ashape
emult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_shape<mat<Value1>, cvec<Value2> >$/;"	s	namespace:mtl::ashape
emult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_shape<mat<Value1>, mat<Value2> >$/;"	s	namespace:mtl::ashape
emult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_shape<rvec<Value1>, cvec<Value2> >$/;"	s	namespace:mtl::ashape
emult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_shape<rvec<Value1>, mat<Value2> >$/;"	s	namespace:mtl::ashape
emult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct emult_shape<scal, scal>$/;"	s	namespace:mtl::ashape
enable_if_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/enable_if.hpp	/^struct enable_if_matrix$/;"	s	namespace:mtl::traits
enable_if_scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/enable_if.hpp	/^struct enable_if_scalar$/;"	s	namespace:mtl::traits
enable_if_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/enable_if.hpp	/^struct enable_if_vector$/;"	s	namespace:mtl::traits
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type end(Collection const& collection)$/;"	f	struct:mtl::traits::detail::dense_element_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type end(Cursor const& c) const { using mtl::num_cols; return type(c.ref, c.value(), num_cols(c.ref)); }$/;"	f	struct:mtl::traits::detail::all_cols_in_row_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type end(Cursor const& c) const { using mtl::num_rows; return type(c.ref, num_rows(c.ref), c.value()); }$/;"	f	struct:mtl::traits::detail::all_rows_in_col_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type end(Matrix const& c) const$/;"	f	struct:mtl::traits::detail::all_cols_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type end(Matrix const& c) const$/;"	f	struct:mtl::traits::detail::all_rows_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type end(Matrix const& matrix) const$/;"	f	struct:mtl::traits::detail::all_offsets_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type end(Ref& c)$/;"	f	struct:mtl::traits::detail::strided_element_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type end(const Coll& c)$/;"	f	struct:mtl::traits::detail::referred_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    bsize_type        begin, end;$/;"	m	struct:mtl::mat::banded_view
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	type end(cursor const& c)$/;"	f	struct:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	type end(cursor_type const& cursor) const$/;"	f	struct:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    type end(matrix_ref_type A) const { return type(A, num_cols(A), nnz(A)); }$/;"	f	struct:mtl::mat::coordinate_col_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    type end(matrix_ref_type A) const { return type(A, num_rows(A), nnz(A)); }$/;"	f	struct:mtl::mat::coordinate_row_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    type end(outer_cursor_type c) const { return type(c.ref, c.next_offset); }$/;"	f	struct:mtl::mat::coordinate_minor_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    type end(cursor const& c) const$/;"	f	struct:mtl::traits::detail::dense2D_iterator_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	type end(cursor const& c) const$/;"	f	struct:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    type end(cursor const& c)$/;"	f	struct:mtl::traits::detail::morton_dense_iterator_range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	type end(Matrix const& matrix)$/;"	f	struct:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	type end(cursor const& c) const$/;"	f	struct:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	type end(cursor const& c)$/;"	f	struct:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	type end(cursor_type const& cursor) const$/;"	f	struct:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^		type end(mtl::mat::transposed_view<Matrix> const& m)$/;"	f	struct:mtl::traits::detail::range_transposer_impl
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        cursor_type end() const { return my_finish; }$/;"	f	class:mtl::irange
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^    type end(const Matrix& matrix) const$/;"	f	struct:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^inline end(Collection const& c)$/;"	f	class:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^inline end(Collection& c)$/;"	f	class:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^    type end() const { return gen_type::end(c); } \/\/< nullary end$/;"	f	struct:mtl::traits::range_wrapper
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^	type end(collection_t& collection)$/;"	f	struct:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^	type end(const collection_t& collection) const$/;"	f	struct:mtl::traits::range_generator
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    const_pointer end() const { return this->elements() + this->used_memory(); }    $/;"	f	class:mtl::vec::dense_vector
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    pointer end() { return this->elements() + this->used_memory(); }$/;"	f	class:mtl::vec::dense_vector
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    const_iterator end() const { return const_iterator(data + my_size * my_stride, my_stride); }$/;"	f	class:mtl::vec::strided_vector_ref
end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    iterator end() { return iterator(data + my_size * my_stride, my_stride); }$/;"	f	class:mtl::vec::strided_vector_ref
end	Point.hpp	/^  const_iterator    end() const { return elem+3; }$/;"	f	struct:Point
end	Point.hpp	/^  iterator          end()       { return elem+3; }$/;"	f	struct:Point
end_	subgraph.cpp	/^  It end_;$/;"	m	class:filter_iterator	file:
end_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    index_vector_type  	start_block, end_block;$/;"	m	class:mtl::mat::block_diagonal2D
end_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type end_col() const $/;"	f	struct:mtl::mat::base_matrix
end_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type end_col() const $/;"	f	struct:mtl::mat::base_sub_matrix
end_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    size_type end_col() const {	return ref.end_col(); }$/;"	f	struct:mtl::mat::map_view
end_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    size_type end_col() const   { return ref.end_row();   }$/;"	f	struct:mtl::mat::transposed_view
end_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    type end_dispatch(cursor const& c, glas::tag::col) const$/;"	f	struct:mtl::traits::detail::dense2D_iterator_range_generator
end_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    type end_dispatch(cursor const& c, glas::tag::row) const$/;"	f	struct:mtl::traits::detail::dense2D_iterator_range_generator
end_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    type end_dispatch(cursor const& c, glas::tag::col)$/;"	f	struct:mtl::traits::detail::morton_dense_iterator_range_generator
end_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    type end_dispatch(cursor const& c, glas::tag::row)$/;"	f	struct:mtl::traits::detail::morton_dense_iterator_range_generator
end_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type end_row() const $/;"	f	struct:mtl::mat::base_matrix
end_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type end_row() const $/;"	f	struct:mtl::mat::base_sub_matrix
end_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    size_type end_row() const { return ref.end_row(); }$/;"	f	struct:mtl::mat::map_view
end_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    size_type end_row() const   { return ref.end_col();   }   $/;"	f	struct:mtl::mat::transposed_view
endl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^    inline mtl::io::test_ostream& endl(mtl::io::test_ostream& os) { os << '\\n'; os.flush(); return os; }$/;"	f	namespace:std
entry	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    std::pair<size_type, value_type> entry(size_type j) const$/;"	f	class:mtl::vec::sparse_vector
entry1D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry1D.hpp	/^	entry1D(Vector& v, typename Collection<Vector>::size_type i)$/;"	f	namespace:mtl::vec
entry1D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry1D.hpp	/^	entry1D(const Vector& v, typename Collection<Vector>::size_type i)$/;"	f	class:mtl::vec::Collection
entry1D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry1D.hpp	/^	inline Vector const& entry1D(const multi_vector<Vector>& A, typename Collection<Vector>::size_type i)$/;"	f	namespace:mtl::mat
entry1D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry1D.hpp	/^	inline Vector& entry1D(multi_vector<Vector>& A, typename Collection<Vector>::size_type i)$/;"	f	namespace:mtl::mat
entry_similar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry_similar.hpp	/^	bool inline entry_similar(const Matrix& A, typename Collection<Matrix>::size_type i, $/;"	f	namespace:mtl::mat
entry_similar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry_similar.hpp	/^	bool inline entry_similar(const Vector& x, typename Collection<Vector>::size_type i, $/;"	f	namespace:mtl::vec
entry_similar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry_similar.hpp	/^        bool inline entry_similar(const Matrix& A, typename Collection<Matrix>::size_type i, $/;"	f	namespace:mtl::mat
entry_similar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry_similar.hpp	/^        bool inline entry_similar(const Vector& x, typename Collection<Vector>::size_type i, $/;"	f	namespace:mtl::vec
eps	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    value_type zero, one, eps;$/;"	m	class:mtl::mat::eigenvalue_solver
eps	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    value_type c, s, eps;$/;"	m	class:mtl::mat::qr_givens_solver
equality_comparable	CS207/Util.hpp	/^struct equality_comparable {$/;"	s
equalize_depth	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^void inline equalize_depth(Recursator1& r1, Recursator2& r2)$/;"	f	namespace:mtl::mat
equalize_depth	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^void inline equalize_depth(Recursator1& r1, Recursator2& r2, Recursator3& r3)$/;"	f	namespace:mtl::mat
err_msg	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    std::string  err_msg;$/;"	m	class:itl::basic_iteration
error	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    int          error, i;$/;"	m	class:itl::basic_iteration
error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    error(const char *s, int code) : domain_error(s), code(code) {}$/;"	f	struct:mtl::mat::umfpack::error
error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	struct error : public domain_error$/;"	s	namespace:mtl::mat::umfpack
error_code	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    virtual int error_code() const { return error; }$/;"	f	class:itl::basic_iteration
error_code	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      int error_code() const $/;"	f	class:itl::cyclic_iteration
error_message	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	struct error_message$/;"	s	namespace:mtl::type_para
error_message_common	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct error_message_common$/;"	s	namespace:mtl::type_para
error_message_local	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_local.hpp	/^	struct error_message_local$/;"	s	namespace:mtl::type_para
ets	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/ets_concepts.hpp	/^namespace ets {$/;"	n
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    void eval(boost::mpl::false_, boost::mpl::false_)$/;"	f	struct:mtl::fused_expr
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    void eval(boost::mpl::false_, boost::mpl::true_)$/;"	f	struct:mtl::fused_expr
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    void eval(boost::mpl::true_, boost::mpl::bool_<B2>)$/;"	f	struct:mtl::fused_expr
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    eval(const mtl::mat::compressed2D<Value, Parameter>& ref)$/;"	f	struct:mtl::traits::eval
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    eval(const mtl::mat::dense2D<Value, Parameter>& ref)$/;"	f	struct:mtl::traits::eval
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    eval(const mtl::mat::mat_mat_ele_times_expr<E1, E2>& ref)$/;"	f	struct:mtl::traits::eval
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    eval(const mtl::mat::mat_mat_minus_expr<E1, E2>& ref)$/;"	f	struct:mtl::traits::eval
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    eval(const mtl::mat::mat_mat_plus_expr<E1, E2>& ref)$/;"	f	struct:mtl::traits::eval
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    eval(const mtl::mat::morton_dense<Value, Mask, Parameter>& ref)$/;"	f	struct:mtl::traits::eval
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    explicit eval(const mtl::mat::mat_mat_times_expr<E1, E2>& expr)$/;"	f	struct:mtl::traits::eval
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^struct eval {};$/;"	s	namespace:mtl::traits
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^struct eval< mtl::mat::compressed2D<Value, Parameter> >$/;"	s	namespace:mtl::traits
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^struct eval< mtl::mat::dense2D<Value, Parameter> >$/;"	s	namespace:mtl::traits
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^struct eval< mtl::mat::mat_mat_ele_times_expr<E1, E2> > $/;"	s	namespace:mtl::traits
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^struct eval< mtl::mat::mat_mat_minus_expr<E1, E2> > $/;"	s	namespace:mtl::traits
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^struct eval< mtl::mat::mat_mat_plus_expr<E1, E2> > $/;"	s	namespace:mtl::traits
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^struct eval< mtl::mat::mat_mat_times_expr<E1, E2> > $/;"	s	namespace:mtl::traits
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^struct eval< mtl::mat::morton_dense<Value, Mask, Parameter> >$/;"	s	namespace:mtl::traits
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^struct eval< mtl::mat::rscaled_view<Value1, Matrix> > $/;"	s	namespace:mtl::traits
eval	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^struct eval< mtl::mat::scaled_view<Value1, Matrix> > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense$/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::dense2D<Value, Parameter> >$/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::imag_view<Matrix > > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::map_view<Functor, Matrix > > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::mat_mat_asgn_expr<E1, E2> > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::mat_mat_ele_times_expr<E1, E2> > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::mat_mat_minus_expr<E1, E2> > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::mat_mat_plus_expr<E1, E2> > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::morton_dense<Value, Mask, Parameter> >$/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::negate_view<Matrix > > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::real_view<Matrix > > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::rscaled_view<Value1, Matrix> > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::mat::scaled_view<Value1, Matrix> > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::vec::dense_vector<Value, Parameter> >$/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::vec::rscaled_view<Value1, Vector> > $/;"	s	namespace:mtl::traits
eval_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^struct eval_dense< mtl::vec::scaled_view<Value1, Vector> > $/;"	s	namespace:mtl::traits
eval_self_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^	    explicit eval_self_ref(const T& ref) : ref(ref) {}$/;"	f	struct:mtl::traits::impl::eval_self_ref
eval_self_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^	struct eval_self_ref $/;"	s	namespace:mtl::traits::impl
evaluate	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^eval<T> inline evaluate(const T& ref)$/;"	f	namespace:mtl::traits
evaluate_lazy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/evaluate_lazy.hpp	/^void inline evaluate_lazy(lazy_assign<T, U, Assign>& lazy)$/;"	f	namespace:mtl
evaluate_lazy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/evaluate_lazy.hpp	/^void inline evaluate_lazy(lazy_assign<T, vec::lazy_reduction<Vector, Functor>, Assign>& lazy)$/;"	f	namespace:mtl
even_bits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^struct even_bits$/;"	s	namespace:mtl::dilated
event_loop	CS207/SDLViewer.hpp	/^  void event_loop() {$/;"	f	class:CS207::SDLViewer
event_loop_wrapper	CS207/SDLViewer.hpp	/^  static int event_loop_wrapper(void* _viewer_ptr) {$/;"	f	class:CS207::SDLViewer
event_set	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    int num_counters, event_set, active_events;$/;"	m	class:mtl::utility::papi_t
event_thread_	CS207/SDLViewer.hpp	/^  SDL_Thread* event_thread_;$/;"	m	class:CS207::SDLViewer
exchange	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	inline void exchange(value_type fst, value_type snd) {$/;"	f	class:utils::binary_heap
exists	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    static const bool exists= false;$/;"	m	struct:mtl::ColumnInMatrix
exists	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    static const bool exists= true;$/;"	m	struct:mtl::ColumnInMatrix
exists	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    static const bool exists= false;$/;"	m	struct:mtl::RowInMatrix
exists	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    static const bool exists= true;$/;"	m	struct:mtl::RowInMatrix
exists	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    bool exists(size_type i) const$/;"	f	class:mtl::vec::sparse_vector
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef mat_expr< self >                           expr_base;$/;"	t	struct:mtl::mat::banded_view
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef mat_expr< compressed2D<Elt, Parameters> >          expr_base;$/;"	t	class:mtl::mat::compressed2D
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef mat_expr< dense2D<Value, Parameters> >            expr_base;$/;"	t	class:mtl::mat::dense2D
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef mat_expr< ell_matrix<Value, Parameters> >  expr_base;$/;"	t	class:mtl::mat::ell_matrix
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef mat_expr< self >                           expr_base;$/;"	t	struct:mtl::mat::map_view
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef mat_expr< morton_dense<Elt, BitMask, Parameters> >         expr_base;$/;"	t	class:mtl::mat::morton_dense
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef mat_expr< self >              expr_base;$/;"	t	struct:mtl::mat::transposed_view
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef vec_expr<dense_vector<Value, Parameters> >                               expr_base;$/;"	t	class:mtl::vec::dense_vector
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef vec_expr< self >                           expr_base;$/;"	t	struct:mtl::vec::map_view
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef vec_expr<strided_vector_ref<Value, Parameters> >                         expr_base;$/;"	t	class:mtl::vec::strided_vector_ref
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    typedef vec_expr< vec_scal_aop_expr<E1, E2, SFunctor> >  expr_base;$/;"	t	struct:mtl::vec::vec_scal_aop_expr
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    typedef vec_expr< vec_vec_aop_expr<E1, E2, SFunctor> >  expr_base;$/;"	t	struct:mtl::vec::vec_vec_aop_expr
expr_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    typedef vec_expr< vec_vec_op_expr<E1, E2, SFunctor> > expr_base;$/;"	t	struct:mtl::vec::vec_vec_op_expr
extended_complex	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/extended_complex.hpp	/^struct extended_complex$/;"	s	namespace:mtl::traits
extended_complex_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/extended_complex.hpp	/^struct extended_complex_aux $/;"	s	namespace:mtl::traits
extended_complex_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/extended_complex.hpp	/^struct extended_complex_aux<T, U, true>$/;"	s	namespace:mtl::traits
external	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^	      external,    \/\/< Memory, complete memory block of other item, only reference $/;"	e	enum:mtl::detail::contiguous_memory_block::c_t
extract_hessenberg	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hessenberg.hpp	/^Matrix inline extract_hessenberg(const Matrix& H)$/;"	f	namespace:mtl::mat
extract_householder_hessenberg	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hessenberg.hpp	/^Matrix inline extract_householder_hessenberg(const Matrix& H)$/;"	f	namespace:mtl::mat
extracter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    extracter(buffer_type& buf):$/;"	f	class:mtl::vec::extracter
extracter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    extracter(const Vector& vec):$/;"	f	class:mtl::vec::extracter
extracter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^class extracter $/;"	c	namespace:mtl::vec
eyeV	CS207/GLCamera.hpp	/^  Point eyeV;$/;"	m	class:CS207::GLCamera
f	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    factorizer                   f;$/;"	m	class:itl::pc::ic_0
f	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    Factorizer                  f;$/;"	m	class:itl::pc::ilu
f	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^    value_type f(const value_type& lamb)$/;"	f	class:mtl::vec::secular_f
f_composition	mass_spring.cpp	/^	typedef typename std::list<Rule*> f_composition;$/;"	t	struct:Constraint	file:
f_composition	mass_spring.cpp	/^	typedef typename std::list<Stimulus*> f_composition;$/;"	t	struct:Force	file:
f_greater	Examples/func_params.cpp	/^bool f_greater(int a, int b) {$/;"	f
f_index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	/^struct f_index {};$/;"	s	namespace:mtl::index
f_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::sfunctor::minus<typename Collection<M1>::value_type, typename Collection<M2>::value_type> f_type;$/;"	t	struct:mtl::traits::root
f_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::sfunctor::plus<typename Collection<M1>::value_type, typename Collection<M2>::value_type> f_type;$/;"	t	struct:mtl::traits::root
f_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::sfunctor::times<typename Collection<M1>::value_type, typename Collection<M2>::value_type> f_type;$/;"	t	struct:mtl::traits::root
factor	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^void itl::pc::imf_preconditioner<ValType>::factor(const Mesh& mesh , const int maxlofi   $/;"	f	class:itl::pc::itl::pc::imf_preconditioner
factorize	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^	void factorize(const Matrix& A, UF& U, boost::mpl::true_, boost::mpl::false_)$/;"	f	struct:itl::pc::ic_0::factorizer
factorize	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^	void factorize(const Matrix& A, UF& U, boost::mpl::true_, boost::mpl::true_)$/;"	f	struct:itl::pc::ic_0::factorizer
factorize	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^	void factorize(const Matrix&, U_type&, boost::mpl::false_, T)$/;"	f	struct:itl::pc::ic_0::factorizer
factorize	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu_0.hpp	/^    void factorize(const Matrix& A, L_type& L, U_type& U, boost::mpl::true_)$/;"	f	struct:itl::pc::ilu_0_factorizer
factorize	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu_0.hpp	/^    void factorize(const Matrix&, L_type&, U_type&, boost::mpl::false_)$/;"	f	struct:itl::pc::ilu_0_factorizer
factorize	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilut.hpp	/^    void factorize(const Matrix &A, const Para& p, L_type& L, U_type& U, boost::mpl::bool_<B>)$/;"	f	struct:itl::pc::ilut_factorizer
factorize	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilut.hpp	/^    void factorize(const Matrix& A, const Para& p, L_type& L, U_type& U, boost::mpl::true_)$/;"	f	struct:itl::pc::ilut_factorizer
factorizer	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^	factorizer(const Matrix &A, U_type& U)$/;"	f	struct:itl::pc::ic_0::factorizer
factorizer	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    struct factorizer$/;"	s	class:itl::pc::ic_0
factorizer_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef Factorizer                                    factorizer_type;$/;"	t	class:itl::pc::ilu
fail	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    int fail(int err_code) { error = err_code; return error_code(); }$/;"	f	class:itl::basic_iteration
fail	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    int fail(int err_code, const std::string& msg)$/;"	f	class:itl::basic_iteration
fail_count	test_edges.cpp	/^static unsigned fail_count = 0;$/;"	v	file:
fail_count	test_nodes.cpp	/^static unsigned fail_count = 0;$/;"	v	file:
false_	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef boost::mpl::false_                        false_;$/;"	t	class:mtl::mat::umfpack::solver
fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^struct fast_multi_vector_expr$/;"	s	namespace:mtl::traits
fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^struct fast_multi_vector_expr< mtl::mat::map_view<Functor, Matrix> >$/;"	s	namespace:mtl::traits
fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^struct fast_multi_vector_expr< mtl::mat::mat_mat_minus_expr<E1, E2> > $/;"	s	namespace:mtl::traits
fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^struct fast_multi_vector_expr< mtl::mat::multi_vector<Vector> >$/;"	s	namespace:mtl::traits
fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^struct fast_multi_vector_expr< mtl::mat::mv_mv_plus_expr<E1, E2> > $/;"	s	namespace:mtl::traits
fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^struct fast_multi_vector_expr< mtl::mat::rscaled_view<Value1, Matrix> > $/;"	s	namespace:mtl::traits
fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^struct fast_multi_vector_expr< mtl::mat::scaled_view<Value1, Matrix> > $/;"	s	namespace:mtl::traits
fetch	Examples/proxy_example.cpp	/^    internal_element& fetch() const {$/;"	f	class:SimpleSet::SimpleElement	file:
file_name	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_file.hpp	/^    std::string file_name() const { return fname; }$/;"	f	class:mtl::io::matrix_file
file_name	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/path.hpp	/^std::string inline file_name(std::string s)$/;"	f	class:mtl::io::std
file_not_found	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit file_not_found(const char *s= "File not found") : io_error(s) {}$/;"	f	struct:mtl::file_not_found
file_not_found	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct file_not_found : public io_error$/;"	s	namespace:mtl
fill	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fill.hpp	/^void fill(Matrix& ma, typename Matrix::value_type value)$/;"	f	namespace:mtl
fill	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^inline void fill(dense_vector<Value, Parameters>& vector, const Value2& value)$/;"	f	namespace:mtl::vec
fill	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    template <typename Value2> friend void fill(self& vector, const Value2& value)$/;"	f	class:mtl::vec::strided_vector_ref
fill_matrix_for_cholesky	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^void fill_matrix_for_cholesky(Matrix& matrix)$/;"	f	namespace:mtl::mat
filter_iterator	subgraph.cpp	/^  filter_iterator(const Pred& p, const It& first, const It& last)$/;"	f	class:filter_iterator
filter_iterator	subgraph.cpp	/^class filter_iterator$/;"	c	file:
final_place	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^void compressed2D_inserter<Elt, Parameters, Updater>::final_place()$/;"	f	class:mtl::mat::compressed2D_inserter
find_dia	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    size_type find_dia(band_size_type dia) const$/;"	f	class:mtl::mat::sparse_banded
find_kind	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct find_kind$/;"	s	namespace:mtl::type_para
find_kind	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct find_kind<KindMap, as_size_type<Index> >$/;"	s	namespace:mtl::type_para
find_kind	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct find_kind<KindMap, dim<Values...> >$/;"	s	namespace:mtl::type_para
find_kind	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct find_kind<KindMap, mask<Values...> >$/;"	s	namespace:mtl::type_para
find_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    size_type find_major(const Matrix& ma, size_type offset) const$/;"	f	struct:mtl::mat::compressed2D_indexer
find_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    size_type find_major(size_type offset) const { return offset % bands.size(); }$/;"	f	class:mtl::mat::sparse_banded
find_next_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void find_next_offset() { find_next_offset(mtl::traits::is_row_major<Parameters>()); }$/;"	f	struct:mtl::mat::coordinate_major_cursor
find_next_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void find_next_offset(boost::mpl::false_)$/;"	f	struct:mtl::mat::coordinate_major_cursor
find_next_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void find_next_offset(boost::mpl::true_)$/;"	f	struct:mtl::mat::coordinate_major_cursor
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void finish()$/;"	f	struct:mtl::mat::compressed2D_inserter
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        size_type finish() const { return my_finish; }$/;"	f	class:mtl::irange
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    size_type finish() const { return my_finish; }$/;"	f	class:mtl::srange
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^	    static inline void finish(Value& tmp00, Value& tmp01, Value& tmp02, Value& tmp03, Value& tmp04, $/;"	f	struct:mtl::vec::impl::reduction
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^	    static inline void finish(Value&, Value&, Value&, Value&, Value&, Value&, Value&, Value&) {}$/;"	f	struct:mtl::vec::impl::reduction
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void finish(Value& value, const Value& value2)$/;"	f	struct:mtl::vec::infinity_norm_functor
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void finish(Value& value, const Value& value2)$/;"	f	struct:mtl::vec::max_functor
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void finish(Value& value, const Value& value2)$/;"	f	struct:mtl::vec::min_functor
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void finish(Value& value, const Value& value2)$/;"	f	struct:mtl::vec::one_norm_functor
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void finish(Value& value, const Value& value2)$/;"	f	struct:mtl::vec::product_functor
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void finish(Value& value, const Value& value2)$/;"	f	struct:mtl::vec::sum_functor
finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void finish(Value& value, const Value& value2)$/;"	f	struct:mtl::vec::two_norm_functor
finished	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool finished() const { return is_finished; }$/;"	f	class:itl::basic_iteration
finished	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool finished(const Real& r) $/;"	f	class:itl::basic_iteration
finished	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool finished(const Vector& r) $/;"	f	class:itl::basic_iteration
finished	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool finished(const std::complex<T>& r) $/;"	f	class:itl::basic_iteration
finished	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      bool finished() { return super::finished(); }$/;"	f	class:itl::cyclic_iteration
finished	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      bool finished(const T& r) $/;"	f	class:itl::cyclic_iteration
finished	poisson.cpp	/^			bool finished(const T& r) {$/;"	f	class:itl::visual_iteration
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool first() const { return i <= 1; }$/;"	f	class:itl::basic_iteration
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    first_argument_type const&  first ;$/;"	m	struct:mtl::mat::mat_mat_ele_times_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    first_argument_type const&  first ;$/;"	m	struct:mtl::mat::mat_mat_minus_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    first_argument_type const&  first ;$/;"	m	struct:mtl::mat::mat_mat_op_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    first_argument_type const&  first ;$/;"	m	struct:mtl::mat::mat_mat_plus_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    first_argument_type const&  first ;$/;"	m	struct:mtl::mat::mat_mat_times_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/bin_op_expr.hpp	/^    first_argument_type const&  first ;$/;"	m	struct:mtl::bin_op_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    const E1&                                                first;$/;"	m	struct:mtl::operation::compute_factors
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    typename compute_one_factor<Result, E1>::const_reference first;$/;"	m	struct:mtl::operation::compute_factors
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^    const Matrix&  first;$/;"	m	struct:mtl::operation::compute_summand
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    T& first;$/;"	m	struct:mtl::fused_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	/^    typename traits::index_evaluator<T>::type first;$/;"	m	struct:mtl::vec::fused_index_evaluator
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy_assign.hpp	/^    T&       first;$/;"	m	struct:mtl::lazy_assign
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^     first_argument_type&        first ;$/;"	m	class:mtl::vec::vec_vec_asgn_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    first_argument_type&         first ;$/;"	m	struct:mtl::vec::vec_scal_aop_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^     first_argument_type&                first ;$/;"	m	struct:mtl::vec::vec_vec_aop_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    first_argument_type const&  first ;$/;"	m	struct:mtl::vec::vec_vec_op_expr
first	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    operation::compute_summand<E1> first;$/;"	m	struct:mtl::vec::vec_vec_pmop_expr
first_address	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    const matrix_value_type* first_address() const$/;"	f	struct:mtl::mat::recursator
first_address	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    matrix_value_type* first_address()$/;"	f	struct:mtl::mat::recursator
first_argument	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    first_argument_type const& first_argument() const { return first; }$/;"	f	struct:mtl::vec::vec_vec_aop_expr
first_argument	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    operation::compute_summand<E1> const& first_argument() const { return first; }$/;"	f	class:mtl::vec::vec_vec_pmop_expr::operation
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    typedef E1                                   first_argument_type ;$/;"	t	struct:mtl::mat::mat_mat_ele_times_expr
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    typedef E1                                   first_argument_type ;$/;"	t	struct:mtl::mat::mat_mat_minus_expr
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    typedef E1                                   first_argument_type ;$/;"	t	struct:mtl::mat::mat_mat_op_expr
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    typedef E1                                   first_argument_type ;$/;"	t	struct:mtl::mat::mat_mat_plus_expr
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef E1                                   first_argument_type ;$/;"	t	struct:mtl::mat::mat_mat_times_expr
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/bin_op_expr.hpp	/^    typedef E1                                   first_argument_type ;$/;"	t	struct:mtl::bin_op_expr
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value1&                                       first_argument_type;$/;"	t	struct:mtl::sfunctor::assign
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value1&                                       first_argument_type;$/;"	t	struct:mtl::sfunctor::divide_assign
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value1&                                       first_argument_type;$/;"	t	struct:mtl::sfunctor::minus_assign
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value1&                                       first_argument_type;$/;"	t	struct:mtl::sfunctor::plus_assign
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value1&                                       first_argument_type;$/;"	t	struct:mtl::sfunctor::times_assign
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value1&                                 first_argument_type;$/;"	t	struct:mtl::sfunctor::divide
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value1&                                 first_argument_type;$/;"	t	struct:mtl::sfunctor::minus
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value1&                                 first_argument_type;$/;"	t	struct:mtl::sfunctor::plus
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value1&                                 first_argument_type;$/;"	t	struct:mtl::sfunctor::times
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticBinaryFunctor<F>::first_argument_type  first_argument_type;$/;"	t	struct:mtl::sfunctor::compose_second
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticBinaryFunctor<G>::first_argument_type  first_argument_type;$/;"	t	struct:mtl::sfunctor::compose_binary
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticUnaryFunctor<G>::argument_type         first_argument_type;$/;"	t	struct:mtl::sfunctor::compose_both
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticUnaryFunctor<G>::argument_type         first_argument_type;$/;"	t	struct:mtl::sfunctor::compose_first
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^    typedef E1 first_argument_type ;$/;"	t	class:mtl::vec::vec_vec_asgn_expr
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    typedef E1 first_argument_type ;$/;"	t	struct:mtl::vec::vec_scal_aop_expr
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    typedef E1 first_argument_type ;$/;"	t	struct:mtl::vec::vec_vec_aop_expr
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    typedef E1                                   first_argument_type ;$/;"	t	struct:mtl::vec::vec_vec_op_expr
first_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    typedef typename mtl::operation::compute_summand<E1>::type    first_argument_type;$/;"	t	struct:mtl::vec::vec_vec_pmop_expr
first_factor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    compute_one_factor<Result, E1> first_factor;$/;"	m	struct:mtl::operation::compute_factors
first_part	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/utility.hpp	/^std::size_t inline first_part(std::size_t n)$/;"	f	class:mtl::recursion::std
first_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void first_update(T& x, const U& y)$/;"	f	struct:mtl::assign::assign_sum
first_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void first_update(T& x, const U& y)$/;"	f	struct:mtl::assign::divide_sum
first_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void first_update(T& x, const U& y)$/;"	f	struct:mtl::assign::minus_sum
first_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void first_update(T& x, const U& y)$/;"	f	struct:mtl::assign::plus_sum
first_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void first_update(T& x, const U& y)$/;"	f	struct:mtl::assign::times_sum
first_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    void first_update(VectorOut& w, SizeType i, const TBlock& tmp, Assign as) const$/;"	f	struct:mtl::mat::crs_cvec_mult_block
first_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    void first_update(VectorOut& w, SizeType i, const TBlock& tmp, Assign) const$/;"	f	struct:mtl::mat::crs_cvec_mult_block
first_value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef typename Collection<E1>::value_type  first_value_type;$/;"	t	struct:mtl::mat::mat_mat_times_expr
fix	Graph.hpp	/^	void fix() {$/;"	f	class:Graph::EdgeIterator
fix	subgraph.cpp	/^  void fix() {$/;"	f	class:filter_iterator	file:
fixed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^namespace fixed$/;"	n	namespace:mtl
fixed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^	namespace fixed {$/;"	n	namespace:mtl::vec
fixed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace fixed {$/;"	n	namespace:mtl
fixed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^namespace fixed {$/;"	n	namespace:mtl::vec
flat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^template <typename T> struct flat : universe {};$/;"	s	namespace:mtl::tag
flatcat1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat1$/;"	s	namespace:mtl::traits
flatcat1_c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat1_c$/;"	s	namespace:mtl::traits
flatcat2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat2$/;"	s	namespace:mtl::traits
flatcat2_c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat2_c$/;"	s	namespace:mtl::traits
flatcat3	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat3$/;"	s	namespace:mtl::traits
flatcat3_c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat3_c$/;"	s	namespace:mtl::traits
flatcat4	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat4$/;"	s	namespace:mtl::traits
flatcat4_c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat4_c$/;"	s	namespace:mtl::traits
flatcat5	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat5$/;"	s	namespace:mtl::traits
flatcat5_c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat5_c$/;"	s	namespace:mtl::traits
flatcat6	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat6$/;"	s	namespace:mtl::traits
flatcat6_c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat6_c$/;"	s	namespace:mtl::traits
flatcat7	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat7$/;"	s	namespace:mtl::traits
flatcat7_c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct flatcat7_c$/;"	s	namespace:mtl::traits
flush	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^    void flush() { out.flush(); }$/;"	f	struct:mtl::io::test_ostream
fname	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_file.hpp	/^    std::string fname;$/;"	m	class:mtl::io::matrix_file
for_each	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/for_each.hpp	/^void for_each(mat::recursator<Matrix> const& recursator, Function const& f, BaseCaseTest const& is_base)$/;"	f	namespace:mtl::recursion
for_each	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/for_each.hpp	/^void for_each(mat::recursator<Matrix>& recursator, Function const& f, BaseCaseTest const& is_base)$/;"	f	namespace:mtl::recursion
for_i	Point.hpp	11;"	d
for_i	Point.hpp	239;"	d
forces_	mass_spring.cpp	/^	f_composition forces_;$/;"	m	struct:Force	file:
forward	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    typedef boost::mpl::and_<traits::forward_index_evaluatable<T>, traits::forward_index_evaluatable<U> >   forward;$/;"	t	struct:mtl::fused_expr
forward_eval_loop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    void forward_eval_loop(const TT& const_first_eval, const UU& const_second_eval, boost::mpl::false_)$/;"	f	struct:mtl::fused_expr
forward_eval_loop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    void forward_eval_loop(const TT& const_first_eval, const UU& const_second_eval, boost::mpl::true_)$/;"	f	struct:mtl::fused_expr
forward_index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct forward_index_evaluatable $/;"	s	namespace:mtl::traits
frobenius_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/frobenius_norm.hpp	/^inline frobenius_norm(const Matrix& matrix)$/;"	f	class:mtl::mat::RealMagnitude
from_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^	size_type from_range(size_type i) const$/;"	f	class:mtl::irange
from_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    size_type from_range(size_type i) const$/;"	f	class:mtl::srange
front	Point.hpp	/^  const_reference front() const { return elem[0]; }$/;"	f	struct:Point
front	Point.hpp	/^  reference       front()       { return elem[0]; }$/;"	f	struct:Point
fsm	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/fsm.hpp	/^int fsm(const LinearOperator& H, VectorSpace& phi, EigenValue eps, Damping alpha, Iteration& iter)$/;"	f	namespace:itl
ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<E1>::value_type                   ft;$/;"	t	struct:mtl::Collection
fully_unroll_dmat_dmat_mult_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct fully_unroll_dmat_dmat_mult_block$/;"	s	namespace:mtl
fully_unroll_dmat_dmat_mult_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct fully_unroll_dmat_dmat_mult_block<Max0, Max0, Max1, Max1, Max2, Max2, Assign>$/;"	s	namespace:mtl
fully_unroll_dmat_dmat_mult_init_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct fully_unroll_dmat_dmat_mult_init_block$/;"	s	namespace:mtl
fully_unroll_dmat_dmat_mult_init_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct fully_unroll_dmat_dmat_mult_init_block<Max0, Max0, Max1, Max1, Assign>$/;"	s	namespace:mtl
fully_unroll_dmat_dmat_mult_limit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t fully_unroll_dmat_dmat_mult_limit= 10;$/;"	m	namespace:mtl::mat
fully_unroll_dmat_dmat_mult_limit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t fully_unroll_dmat_dmat_mult_limit= MTL_FULLY_UNROLL_DMAT_DMAT_MULT_LIMIT;$/;"	m	namespace:mtl::mat
fully_unroll_fixed_size_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct fully_unroll_fixed_size_dmat_dmat_mult_t$/;"	s	namespace:mtl
fully_unroll_mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    struct fully_unroll_mat_cvec_mult$/;"	s	namespace:mtl::mat::impl
fully_unroll_mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    struct fully_unroll_mat_cvec_mult<Index0, Max0, Max1, Max1, Assign>$/;"	s	namespace:mtl::mat::impl
fully_unroll_mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    struct fully_unroll_mat_cvec_mult<Max0, Max0, Max1, Max1, Assign>$/;"	s	namespace:mtl::mat::impl
fully_unroll_rvec_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^    struct fully_unroll_rvec_mat_mult$/;"	s	namespace:mtl::vec::impl
fully_unroll_rvec_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^    struct fully_unroll_rvec_mat_mult<Max0, Max0, Max1, Max1, Assign>$/;"	s	namespace:mtl::vec::impl
function_f	poisson.cpp	/^double function_f(const Point& p) {$/;"	f
function_g	poisson.cpp	/^double function_g(const Point& p) {$/;"	f
functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Functor const& functor() const { return my_functor; }$/;"	f	class:mtl::mat::implicit_dense
functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Functor& functor() { return my_functor; }$/;"	f	class:mtl::mat::implicit_dense
functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    Functor           functor;$/;"	m	struct:mtl::mat::map_view
functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	/^namespace functor {$/;"	n	namespace:mtl
functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^namespace mtl { namespace functor {$/;"	n	namespace:mtl
functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    Functor           functor;$/;"	m	struct:mtl::vec::map_view
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::abs<Value>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::assign<Value1, Value2>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::conj<Value>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::divide<Value1, Value2>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::divide_assign<Value1, Value2>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::identity<Value>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::imag<Value>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::minus<Value1, Value2>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::minus_assign<Value1, Value2>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::negate<Value>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::plus<Value1, Value2>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::plus_assign<Value1, Value2>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::real<Value>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::sqrt<Value>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::square<Value>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::times<Value1, Value2>&)$/;"	f	namespace:mtl::io
functor_symbol	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^std::string functor_symbol(const sfunctor::times_assign<Value1, Value2>&)$/;"	f	namespace:mtl::io
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    typedef mtl::sfunctor::conj<typename Matrix::value_type>       functor_type;$/;"	t	struct:mtl::mat::hermitian_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef hilbert_functor<Value>            functor_type;$/;"	t	class:mtl::mat::hilbert_matrix
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef ones_functor<Value>                functor_type;$/;"	t	class:mtl::mat::ones_matrix
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef outer_product_functor<Vector1, Vector2>  functor_type;$/;"	t	class:mtl::mat::outer_product_matrix
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef mtl::sfunctor::conj<typename Matrix::value_type>            functor_type;$/;"	t	struct:mtl::mat::conj_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef mtl::sfunctor::imag<typename Matrix::value_type>            functor_type;$/;"	t	struct:mtl::mat::imag_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef mtl::sfunctor::negate<typename Matrix::value_type>            functor_type;$/;"	t	struct:mtl::mat::negate_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef mtl::sfunctor::real<typename Matrix::value_type>            functor_type;$/;"	t	struct:mtl::mat::real_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef tfunctor::divide_by<typename Matrix::value_type, Divisor>  functor_type;$/;"	t	struct:mtl::mat::divide_by_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef tfunctor::rscale<typename Matrix::value_type, RScaling>  functor_type;$/;"	t	struct:mtl::mat::rscaled_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef tfunctor::scale<Scaling, typename Matrix::value_type>  functor_type;$/;"	t	struct:mtl::mat::scaled_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef mtl::sfunctor::conj<typename Vector::value_type>            functor_type;$/;"	t	struct:mtl::vec::conj_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef mtl::sfunctor::imag<typename Vector::value_type>            functor_type;$/;"	t	struct:mtl::vec::imag_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef mtl::sfunctor::negate<typename Vector::value_type>            functor_type;$/;"	t	struct:mtl::vec::negate_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef mtl::sfunctor::real<typename Vector::value_type>            functor_type;$/;"	t	struct:mtl::vec::real_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef tfunctor::divide_by<typename Vector::value_type, Divisor>  functor_type;$/;"	t	struct:mtl::vec::divide_by_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef tfunctor::rscale<typename Vector::value_type, RScaling>  functor_type;$/;"	t	struct:mtl::vec::rscaled_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef tfunctor::scale<Scaling, typename Vector::value_type>  functor_type;$/;"	t	struct:mtl::vec::scaled_view
functor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    typedef SFunctor                                              functor_type;$/;"	t	struct:mtl::vec::vec_vec_pmop_expr
fuse	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fuse.hpp	/^fuse(const T& x, const U& y)$/;"	f	namespace:mtl
fused_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    fused_expr(T& first, U& second) $/;"	f	struct:mtl::fused_expr
fused_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^struct fused_expr$/;"	s	namespace:mtl
fused_index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	/^    fused_index_evaluator(T& first, U& second) $/;"	f	struct:mtl::vec::fused_index_evaluator
fused_index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	/^struct fused_index_evaluator$/;"	s	namespace:mtl::vec
future	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^template <typename Value> struct future : nonscal {};$/;"	s	namespace:mtl::ashape
g	CS207/Color.hpp	/^  value_type r, g, b;$/;"	m	struct:CS207::Color
g	poisson.cpp	/^		const GraphType* g;$/;"	m	class:GraphSymmetricMatrix	file:
gamma	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/armijo.hpp	/^    Value delta, gamma, beta1, beta;$/;"	m	class:itl::armijo
gamma	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/wolf.hpp	/^    Value delta, gamma, beta1, beta2; $/;"	m	class:itl::wolf
gauss_seidel	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^    gauss_seidel(const Matrix& A) $/;"	f	class:itl::gauss_seidel
gauss_seidel	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^    gauss_seidel(const Matrix& A) : A(A), dia_inv(num_rows(A)) $/;"	f	class:itl::gauss_seidel
gauss_seidel	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^class gauss_seidel$/;"	c	namespace:itl
gauss_seidel	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^class gauss_seidel<mtl::mat::compressed2D<Value, Parameters> >$/;"	c	namespace:itl
gen_blas_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_blas_dmat_dmat_mult_ft$/;"	s	namespace:mtl
gen_blas_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_blas_dmat_dmat_mult_ft<dense2D<double, ParaA>, dense2D<double, ParaB>, $/;"	s	namespace:mtl
gen_blas_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_blas_dmat_dmat_mult_ft<dense2D<float, ParaA>, dense2D<float, ParaB>, $/;"	s	namespace:mtl
gen_blas_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_blas_dmat_dmat_mult_ft<dense2D<std::complex<double>, ParaA>, dense2D<std::complex<double>, ParaB>, $/;"	s	namespace:mtl
gen_blas_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_blas_dmat_dmat_mult_ft<dense2D<std::complex<float>, ParaA>, dense2D<std::complex<float>, ParaB>, $/;"	s	namespace:mtl
gen_blas_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_blas_dmat_dmat_mult_t$/;"	s	namespace:mtl
gen_cursor_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_cursor_dmat_dmat_mult_ft$/;"	s	namespace:mtl
gen_cursor_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_cursor_dmat_dmat_mult_t$/;"	s	namespace:mtl
gen_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_dmat_dmat_mult_ft$/;"	s	namespace:mtl
gen_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    struct gen_dmat_dmat_mult_t$/;"	s	namespace:mtl::wrec
gen_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_dmat_dmat_mult_t$/;"	s	namespace:mtl
gen_matrix_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline gen_matrix_copy(const mat::banded_view<mtl::mat::compressed2D<ValueSrc, Para> >& src, mtl::mat::compressed2D<ValueDest, Para>& dest, bool)$/;"	f	class:mtl::boost::enable_if
gen_matrix_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void gen_matrix_copy(const MatrixSrc& src, MatrixDest& dest, bool with_reset)$/;"	f	namespace:mtl
gen_matrix_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void gen_matrix_copy(const MatrixSrc& src, mtl::mat::multi_vector<Vector>& dest, bool)$/;"	f	namespace:mtl
gen_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void gen_mult(const Matrix& A, const VectorIn& v, VectorOut& w, Assign, tag::flat<tag::matrix>, tag::flat<tag::col_vector>, tag::flat<tag::col_vector>)$/;"	f	namespace:mtl::mat
gen_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void gen_mult(const MatrixA& a, const MatrixB& b, MatrixC& c, Assign, tag::flat<tag::matrix>, tag::flat<tag::matrix>, tag::flat<tag::matrix>)$/;"	f	namespace:mtl::mat
gen_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void gen_mult(const VectorIn& v, const Matrix& A, VectorOut& w, Assign, tag::flat<tag::row_vector>, tag::flat<tag::matrix>, tag::flat<tag::row_vector>)$/;"	f	namespace:mtl::mat
gen_platform_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_platform_dmat_dmat_mult_ft$/;"	s	namespace:mtl
gen_platform_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	/^struct gen_platform_dmat_dmat_mult_ft<morton_dense<double, MaskA, PA>, morton_dense<double, MaskB, PB>, $/;"	s	namespace:mtl
gen_platform_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_platform_dmat_dmat_mult_t$/;"	s	namespace:mtl
gen_recursive_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_recursive_dmat_dmat_mult_t$/;"	s	namespace:mtl
gen_smat_dmat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^struct gen_smat_dmat_mult$/;"	s	namespace:mtl::functor
gen_tiling_22_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_tiling_22_dmat_dmat_mult_ft$/;"	s	namespace:mtl
gen_tiling_22_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_tiling_22_dmat_dmat_mult_t$/;"	s	namespace:mtl
gen_tiling_44_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_tiling_44_dmat_dmat_mult_ft$/;"	s	namespace:mtl
gen_tiling_44_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_tiling_44_dmat_dmat_mult_t$/;"	s	namespace:mtl
gen_tiling_dmat_dmat_mult_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_tiling_dmat_dmat_mult_block$/;"	s	namespace:mtl
gen_tiling_dmat_dmat_mult_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_tiling_dmat_dmat_mult_block<Max0, Max0, Max1, Max1, Assign>$/;"	s	namespace:mtl
gen_tiling_dmat_dmat_mult_ft	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_tiling_dmat_dmat_mult_ft$/;"	s	namespace:mtl
gen_tiling_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct gen_tiling_dmat_dmat_mult_t$/;"	s	namespace:mtl
gen_tiling_smat_dmat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^struct gen_tiling_smat_dmat_mult$/;"	s	namespace:mtl::functor
gen_tiling_smat_dmat_mult_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^struct gen_tiling_smat_dmat_mult_block$/;"	s	namespace:mtl::functor
gen_tiling_smat_dmat_mult_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^struct gen_tiling_smat_dmat_mult_block<Max0, Max0, Assign>$/;"	s	namespace:mtl::functor
gen_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^    typedef range_generator<Tag, Collection> gen_type;$/;"	t	struct:mtl::traits::range_wrapper
gen_vector_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void gen_vector_copy(const VectorSrc& src, VectorDest& dest, bool with_reset)$/;"	f	namespace:mtl
general	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    enum symmetry {general, symmetric, skew, Hermitian} my_symmetry;$/;"	e	enum:mtl::io::matrix_market_istream::symmetry
generate_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^class generate_mask$/;"	c	namespace:mtl
generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    typedef range_generator<UseTag, typename boost::remove_const<Matrix>::type>  generator;$/;"	t	struct:mtl::traits::detail::range_transposer_impl
generic_version	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	struct generic_version$/;"	s	struct:mtl::mat::detail::lower_trisolve_t
generic_version	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	struct generic_version$/;"	s	struct:mtl::mat::detail::upper_trisolve_t
get2x2EW	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    std::pair<value_type, value_type> get2x2EW(const size_type k) {$/;"	f	class:mtl::mat::eigenvalue_solver
getComplex2x2EW	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    std::complex<value_type> getComplex2x2EW(const size_type k) {$/;"	f	class:mtl::mat::eigenvalue_solver
getQ	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    Matrix& getQ() {$/;"	f	class:mtl::mat::qr_givens_solver
getR	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    Matrix& getR() {$/;"	f	class:mtl::mat::qr_givens_solver
get_L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    L_type get_L() { return L_type(L); }$/;"	f	class:itl::pc::ic_0
get_L	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    L_type get_L() { return L; }$/;"	f	class:itl::pc::ilu
get_U	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    U_type get_U() { return U; }$/;"	f	class:itl::pc::ic_0
get_U	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    U_type get_U() { return U; }$/;"	f	class:itl::pc::ilu
get_begin	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    bsize_type get_begin() const { return begin; }$/;"	f	struct:mtl::mat::banded_view
get_col_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    size_type get_col_offset() const { return col_offset; } \/\/\/< Get column offset$/;"	f	class:mtl::mat::shifted_inserter
get_dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    dim_type get_dimensions() const $/;"	f	struct:mtl::mat::base_matrix
get_dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    dim_type get_dimensions() const $/;"	f	struct:mtl::mat::base_sub_matrix
get_eigenvalues	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    dense_vector<std::complex<value_type> > get_eigenvalues() $/;"	f	class:mtl::mat::eigenvalue_solver
get_element	Examples/proxy_example.cpp	/^  SimpleElement get_element(size_type i) const {$/;"	f	class:SimpleSet
get_end	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    bsize_type get_end() const { return end; }$/;"	f	struct:mtl::mat::banded_view
get_f_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    static T get_f_mask(int n_bits) { return (1 << n_bits) - 1;   }$/;"	f	struct:mtl::dilated::masked_dilation_tables
get_id	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    inline int get_id() const {	return m_sequence_number; }$/;"	f	class:mtl::mat::element
get_id	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    inline int& get_id()      {return m_sequence_number; }$/;"	f	class:mtl::mat::element
get_incident_nodes	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    boost::unordered_set<int> get_incident_nodes() const $/;"	f	class:mtl::mat::element
get_indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    inline const index_type& get_indices() const { return m_indices; }$/;"	f	class:mtl::mat::element
get_indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    inline index_type& get_indices() {	return m_indices; }$/;"	f	class:mtl::mat::element
get_ldim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_type get_ldim() const$/;"	f	class:mtl::mat::dense2D
get_level_neighbors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    neighbor_set_type get_level_neighbors(const int level = 1) $/;"	f	class:mtl::mat::element
get_link	Mesh.hpp	/^	tri_edge get_link(Triangle t1, Triangle t2) const {$/;"	f	class:Mesh
get_nb_blocks	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	int get_nb_blocks() const { return m_nb_blocks; }$/;"	f	class:itl::pc::imf_preconditioner
get_nb_levels	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	int get_nb_levels() const { return m_levels; }$/;"	f	class:itl::pc::imf_preconditioner
get_nb_neighbors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    int get_nb_neighbors() const {	return int(m_neighbors.size()); }$/;"	f	class:mtl::mat::element
get_neighbors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    const neighbor_collection_type& get_neighbors() const { return m_neighbors; }$/;"	f	class:mtl::mat::element
get_neighbors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    neighbor_collection_type& get_neighbors() { return m_neighbors;	}$/;"	f	class:mtl::mat::element
get_row_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    size_type get_row_offset() const { return row_offset; } \/\/\/< Get row offset$/;"	f	class:mtl::mat::shifted_inserter
get_total_elements	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    int get_total_elements() const { return m_total_elements; }$/;"	f	class:mtl::mat::element_structure
get_total_nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    int get_total_nnz() const $/;"	f	class:mtl::mat::element_structure
get_total_vars	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    int get_total_vars() const { return m_total_vars;   }$/;"	f	class:mtl::mat::element_structure
get_tri_node	Mesh.hpp	/^	tri_node get_tri_node(Triangle t) const {$/;"	f	class:Mesh
get_triangle	Mesh.hpp	/^	Triangle get_triangle(vert_node n1, vert_node n2, vert_node n3) const {$/;"	f	class:Mesh
get_unused	Mesh.hpp	/^	tri_node get_unused(Triangle t, vert_edge e) const {$/;"	f	class:Mesh
get_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    sub_matrix_type get_value() const$/;"	f	struct:mtl::mat::recursator
get_value_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    sub_matrix_type get_value_dispatch(const SubMatrix& , $/;"	f	struct:mtl::mat::recursator
get_value_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    sub_matrix_type get_value_dispatch(transposed_view<SubMatrix> view, $/;"	f	struct:mtl::mat::recursator
get_values	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    inline const matrix_type& get_values() const { return m_values; }$/;"	f	class:mtl::mat::element
get_values	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    inline matrix_type& get_values() { return m_values; }$/;"	f	class:mtl::mat::element
getline_parsed	CS207/Util.hpp	/^std::istream& getline_parsed(std::istream& s, T& value)$/;"	f	namespace:CS207
givens	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    givens(Matrix& H, value_type a, value_type b) : H(H), G(2, 2)$/;"	f	class:mtl::mat::givens
givens	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    givens(Vector& v, value_type a, value_type b) : v(v), a(a), b(b)$/;"	f	class:mtl::vec::givens
givens	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^class givens$/;"	c	namespace:mtl::mat
givens	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^class givens$/;"	c	namespace:mtl::vec
glas	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/glas_tag.hpp	/^namespace glas { namespace tag {$/;"	n
gltype	CS207/SDLViewer.hpp	/^template <typename T> struct gltype {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<double>         : public gltype_v<GL_DOUBLE> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<float>          : public gltype_v<GL_FLOAT> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<int>            : public gltype_v<GL_INT> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<short>          : public gltype_v<GL_SHORT> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<unsigned char>  : public gltype_v<GL_UNSIGNED_BYTE> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<unsigned int>   : public gltype_v<GL_UNSIGNED_INT> {};$/;"	s	namespace:CS207
gltype	CS207/SDLViewer.hpp	/^template<> struct gltype<unsigned short> : public gltype_v<GL_UNSIGNED_SHORT> {};$/;"	s	namespace:CS207
gltype_v	CS207/SDLViewer.hpp	/^template <GLenum V> struct gltype_v {$/;"	s	namespace:CS207
gmres	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^int gmres(const Matrix &A, Vector &x, const Vector &b,$/;"	f	namespace:itl
gmres_full	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^int gmres_full(const Matrix &A, Vector &x, const Vector &b,$/;"	f	namespace:itl
gmres_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^    explicit gmres_solver(const LinearOperator& A, size_t restart= 8) $/;"	f	class:itl::gmres_solver
gmres_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^    gmres_solver(const LinearOperator& A, size_t restart, const Preconditioner& L) $/;"	f	class:itl::gmres_solver
gmres_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^    gmres_solver(const LinearOperator& A, size_t restart, const Preconditioner& L, const RightPreconditioner& R) $/;"	f	class:itl::gmres_solver
gmres_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^class gmres_solver$/;"	c	namespace:itl
grad_f	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^    value_type grad_f(const value_type& lamb)$/;"	f	class:mtl::vec::secular_f
gradient	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/gradient.hpp	/^struct gradient $/;"	s	namespace:mtl::traits
gradient	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/gradient.hpp	/^struct gradient<mtl::dense_vector<Value, Para> >$/;"	s	namespace:mtl::traits
graph	poisson.cpp	/^		const GraphType& graph;$/;"	m	class:itl::visual_iteration	file:
graph_	Graph.hpp	/^	const Graph* graph_;$/;"	m	class:Graph::Edge
graph_	Graph.hpp	/^	const Graph* graph_;$/;"	m	class:Graph::EdgeIterator
graph_	Graph.hpp	/^	const Graph* graph_;$/;"	m	class:Graph::IncidentIterator
graph_	Graph.hpp	/^	const Graph* graph_;$/;"	m	class:Graph::Node
graph_	Graph.hpp	/^	const Graph* graph_;$/;"	m	class:Graph::NodeIterator
graph_type	Graph.hpp	/^  typedef Graph graph_type;$/;"	t	class:Graph
grav	mass_spring.cpp	/^static constexpr double grav = 9.81;$/;"	v	file:
grav	shallow_water.cpp	/^static constexpr double grav = 9.80665;$/;"	v	file:
greater_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^struct greater_0$/;"	s	namespace:mtl::utility
greedy_extract_element_structure	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/element_structure_algorithms.hpp	/^void greedy_extract_element_structure(Element_struct& es,  Matrix& M , std::string& output) {$/;"	f	namespace:imf
h	shallow_water.cpp	/^  double h;   \/\/ Height of column$/;"	m	struct:QVar	file:
half_splitter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    explicit half_splitter(Matrix const& matrix) $/;"	f	struct:mtl::recursion::half_splitter
half_splitter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^struct half_splitter$/;"	s	namespace:mtl::recursion
handle_event	CS207/SDLViewer.hpp	/^  void handle_event(SDL_Event event) {$/;"	f	class:CS207::SDLViewer
has_1D_layout	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct has_1D_layout : virtual dense {};$/;"	s	namespace:mtl::tag
has_2D_layout	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct has_2D_layout : virtual dense {};$/;"	s	namespace:mtl::tag
has_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct has_cursor : virtual universe {};$/;"	s	namespace:mtl::tag
has_edge	Graph.hpp	/^   bool has_edge(const Node& a, const Node& b) const {$/;"	f	class:Graph
has_edge	Graph.hpp	/^   bool has_edge(const uid_type uid_a, const uid_type uid_b) const {$/;"	f	class:Graph
has_fast_ra_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct has_fast_ra_cursor : virtual has_ra_cursor {};$/;"	s	namespace:mtl::tag
has_fast_ra_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct has_fast_ra_iterator : virtual has_ra_iterator {};$/;"	s	namespace:mtl::tag
has_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct has_iterator : virtual universe {};$/;"	s	namespace:mtl::tag
has_iterator_flatcat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct has_iterator_flatcat$/;"	s	namespace:mtl::traits
has_node	Graph.hpp	/^  bool has_node(const Node& n) const {$/;"	f	class:Graph
has_ra_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct has_ra_cursor : virtual has_cursor {};$/;"	s	namespace:mtl::tag
has_ra_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct has_ra_iterator : virtual has_iterator {};$/;"	s	namespace:mtl::tag
has_strided_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    bool has_strided_data() const { return this->category != this->own; }$/;"	f	class:mtl::mat::dense2D
has_strided_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	bool has_strided_data(const Coll&) $/;"	f	namespace:mtl::impl
has_strided_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	bool has_strided_data(const mat::dense2D<Value, Parameter>& A)$/;"	f	namespace:mtl::impl
has_sub_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct has_sub_matrix : virtual universe {};$/;"	s	namespace:mtl::tag
has_triangle	Mesh.hpp	/^	bool has_triangle(vert_node n1, vert_node n2, vert_node n3) const {$/;"	f	class:Mesh
has_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^    bool has_value() const $/;"	f	struct:mtl::utilities::maybe
heap	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^namespace heap {$/;"	n	namespace:itl::pc
heap_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	> heap_type;$/;"	t	class:utils::binary_heap
hermitian	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hermitian.hpp	/^	    struct hermitian$/;"	s	namespace:mtl::mat::detail
hermitian	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hermitian.hpp	/^	inline hermitian(const Matrix& A)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
hermitian_multi_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct hermitian_multi_vector$/;"	s	namespace:mtl::tag
hermitian_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    hermitian_view(const Matrix& matrix) $/;"	f	struct:mtl::mat::hermitian_view
hermitian_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^struct hermitian_view $/;"	s	namespace:mtl::mat
hermitian_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^	mtl::mat::hermitian_view<matrix_type>,$/;"	t	class:mtl::traits::matrix_compose_view::mtl::mat
hessenberg	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hessenberg.hpp	/^Matrix inline hessenberg(const Matrix& A)$/;"	f	namespace:mtl::mat
hessenberg_factors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hessenberg.hpp	/^Matrix inline hessenberg_factors(const Matrix& A)$/;"	f	namespace:mtl::mat
hessenberg_q	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hessenberg.hpp	/^Matrix inline hessenberg_q(const Matrix& A)$/;"	f	namespace:mtl::mat
hessian_product_i_j	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hessian_setup.hpp	/^    double inline hessian_product_i_j (Value i, Value j, Value N)$/;"	f	namespace:mtl::mat::impl
hessian_setup	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hessian_setup.hpp	/^void hessian_setup(Matrix& A, Value factor)$/;"	f	namespace:mtl::mat
heterogeneous_add	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct heterogeneous_add $/;"	s	namespace:math
heterogeneous_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct heterogeneous_mult $/;"	s	namespace:math
hilbert_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    hilbert_functor(size_type nr, size_type nc) : nr(nr), nc(nc) {}$/;"	f	class:mtl::mat::hilbert_functor
hilbert_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^class hilbert_functor$/;"	c	namespace:mtl::mat
hilbert_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    hilbert_matrix(size_type r, size_type c) : base(functor_type(r, c)) {}$/;"	f	class:mtl::mat::hilbert_matrix
hilbert_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^class hilbert_matrix$/;"	c	namespace:mtl::mat
householder	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/householder.hpp	/^inline householder(Vector& y)$/;"	f	class:mtl::vec::std
householder_hessenberg	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hessenberg.hpp	/^Matrix inline householder_hessenberg(const Matrix& A)$/;"	f	namespace:mtl::mat
householder_s	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/householder.hpp	/^inline householder_s(Vector& y)$/;"	f	class:mtl::vec::mtl::vec
hx	shallow_water.cpp	/^  double hx;  \/\/ Height times average x velocity of column$/;"	m	struct:QVar	file:
hy	shallow_water.cpp	/^  double hy;  \/\/ Height times average y velocity of column$/;"	m	struct:QVar	file:
hyperbolic_step	shallow_water.cpp	/^double hyperbolic_step(MESH& m, FLUX& f, double t, double dt) {$/;"	f
i	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    int          error, i;$/;"	m	class:itl::basic_iteration
i	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    T i;$/;"	m	struct:mtl::dilated::dilated_int
i2u_	Graph.hpp	/^	uid_type i2u_(idx_type index) const { $/;"	f	class:Graph
i2u_vect_	Graph.hpp	/^	mutable std::vector<uid_type> i2u_vect_;$/;"	m	class:Graph
i_order_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct i_order_mask$/;"	s	namespace:mtl
i_order_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^template<> struct i_order_mask<0> : public lsb_mask<0> {};  \/\/ set to 0$/;"	s	namespace:mtl
ic_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    ic_0(const Matrix& A) : f(A, U), L(trans(U)), lower_solver(L), upper_solver(U) {}$/;"	f	class:itl::pc::ic_0
ic_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^class ic_0$/;"	c	namespace:itl::pc
ic_0_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    ic_0_evaluator(VectorOut& y, const Solver& s) $/;"	f	struct:itl::pc::ic_0_evaluator
ic_0_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^struct ic_0_evaluator$/;"	s	namespace:itl::pc
identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^    identity(const Matrix&) {}$/;"	f	class:itl::pc::identity
identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^class identity$/;"	c	namespace:itl::pc
identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^inline Element identity(const Operation& op, const Element& v)$/;"	f	namespace:math
identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^inline std::pair<First, Second> identity(const Operation<std::pair<First, Second> >&, const std::pair<First, Second>& v)$/;"	f	namespace:math
identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity.hpp	/^inline identity2D identity(std::size_t nrows)$/;"	f	namespace:mtl::mat
identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity.hpp	/^inline identity2D identity(std::size_t nrows, std::size_t ncols)$/;"	f	namespace:mtl::mat
identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct identity$/;"	s	namespace:mtl::sfunctor
identity2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^    identity2D(std::size_t m) : m(m), n(m) {}$/;"	f	struct:mtl::mat::identity2D
identity2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^    identity2D(std::size_t m, std::size_t n) : m(m), n(n) {}$/;"	f	struct:mtl::mat::identity2D
identity2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^struct identity2D$/;"	s	namespace:mtl::mat
identity_result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^        typedef associated_type identity_result_type; $/;"	t	struct:algebra::Monoid
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t {};$/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t< add<Element>, Element > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t< add<std::string>, std::string > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t< bitwise_and<Element>, Element > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t< bitwise_or<Element>, Element > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t< max<Element>, Element > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t< max<double>, double > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t< max<float>, float > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t< max<long double>, long double > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t< min<Element>, Element > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^struct identity_t< mult<Element>, Element > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/arprec.hpp	/^    struct identity_t< add<mp_complex>, mp_complex > $/;"	s	namespace:math
identity_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct identity_t< mult<mtl::mat::dense2D<Value, Parameters> >, mtl::mat::dense2D<Value, Parameters> >$/;"	s	namespace:math
idr_s	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^int idr_s(const LinearOperator &A, Vector &x, const Vector &b,$/;"	f	namespace:itl
idr_s_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^    explicit idr_s_solver(const LinearOperator& A, size_t s= 8) : A(A), s(s), L(A), R(A) {}$/;"	f	class:itl::idr_s_solver
idr_s_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^    idr_s_solver(const LinearOperator& A, size_t s, const Preconditioner& L) : A(A), s(s), L(L), R(A) {}$/;"	f	class:itl::idr_s_solver
idr_s_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^    idr_s_solver(const LinearOperator& A, size_t s, const Preconditioner& L, const RightPreconditioner& R) $/;"	f	class:itl::idr_s_solver
idr_s_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^class idr_s_solver$/;"	c	namespace:itl
idx	Graph.hpp	/^  	idx_type idx;$/;"	m	struct:Graph::node_data
idx_type	Graph.hpp	/^  typedef unsigned idx_type;$/;"	t	class:Graph
if_c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^	typename boost::mpl::if_c<$/;"	t	class:mtl::traits::matrix_compose_view::boost::mpl
if_c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^    typedef typename boost::mpl::if_c<$/;"	t	class:mtl::traits::matrix_compose_view::boost::mpl
ii_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    typedef typename Collection<index_type>::value_type ii_type;$/;"	t	class:mtl::mat::element_structure
ilu	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    explicit ilu(const Matrix& A) $/;"	f	class:itl::pc::ilu
ilu	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    ilu(const Matrix& A) : LU(A) { lu(LU, P); std::cout << "LU is\\n" << LU << "P is " << P << "\\n"; }$/;"	f	class:itl::pc::ilu
ilu	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    ilu(const Matrix& A, const FactPara& p) $/;"	f	class:itl::pc::ilu
ilu	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^class ilu$/;"	c	namespace:itl::pc
ilu	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^class ilu<mtl::mat::dense2D<Value, mtl::mat::parameters<> >, Factorizer, V2> \/\/ last 2 arguments are dummies$/;"	c	namespace:itl::pc
ilu_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu_0.hpp	/^    ilu_0(const Matrix& A) : base(A) {}$/;"	f	class:itl::pc::ilu_0
ilu_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu_0.hpp	/^class ilu_0$/;"	c	namespace:itl::pc
ilu_0_factorizer	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu_0.hpp	/^    ilu_0_factorizer(const Matrix &A, L_type& L, U_type& U)$/;"	f	struct:itl::pc::ilu_0_factorizer
ilu_0_factorizer	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu_0.hpp	/^struct ilu_0_factorizer$/;"	s	namespace:itl::pc
ilut	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilut.hpp	/^    ilut(const Matrix& A, std::size_t p, typename mtl::Collection<Matrix>::value_type tau) $/;"	f	class:itl::pc::ilut
ilut	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilut.hpp	/^class ilut$/;"	c	namespace:itl::pc
ilut_factorizer	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilut.hpp	/^    ilut_factorizer(const Matrix &A, const Para& p, L_type& L, U_type& U)$/;"	f	struct:itl::pc::ilut_factorizer
ilut_factorizer	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilut.hpp	/^struct ilut_factorizer$/;"	s	namespace:itl::pc
imag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^    inline imag(const Matrix& v)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
imag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^    inline imag(const Vector& v)$/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
imag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^    struct imag$/;"	s	namespace:mtl::sfunctor
imag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^    struct imag<std::complex<Value> >$/;"	s	namespace:mtl::sfunctor
imag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^inline imag(const Value& v)$/;"	f	class:mtl::mtl::traits::enable_if_scalar
imag_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    imag_view (const self& that) : base(that) {}$/;"	f	struct:mtl::mat::imag_view
imag_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    imag_view (self&& that) : base(that) {}$/;"	f	struct:mtl::mat::imag_view
imag_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    imag_view(boost::shared_ptr<Matrix> p) : base(functor_type(), p) {}$/;"	f	struct:mtl::mat::imag_view
imag_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    imag_view(const Matrix& matrix) : base(functor_type(), matrix) {}$/;"	f	struct:mtl::mat::imag_view
imag_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct imag_view$/;"	s	namespace:mtl::mat
imag_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit imag_view(boost::shared_ptr<Vector> p)$/;"	f	struct:mtl::vec::imag_view
imag_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit imag_view(const Vector& vector)$/;"	f	struct:mtl::vec::imag_view
imag_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    imag_view (const self& that) : base(that) {}$/;"	f	struct:mtl::vec::imag_view
imag_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    imag_view (self&& that) : base(that) {}$/;"	f	struct:mtl::vec::imag_view
imag_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^struct imag_view$/;"	s	namespace:mtl::vec
imap_idx_type	Graph.hpp	/^  typedef unsigned imap_idx_type;$/;"	t	class:Graph
imax	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^    const std::size_t imax= std::numeric_limits<std::size_t>::max();$/;"	m	namespace:mtl
imf	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/element_structure_algorithms.hpp	/^namespace imf {$/;"	n
imf_apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^Vector imf_preconditioner<ValType>::imf_apply(const Vector& rhs) const$/;"	f	class:itl::pc::imf_preconditioner
imf_preconditioner	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	imf_preconditioner($/;"	f	class:itl::pc::imf_preconditioner
imf_preconditioner	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^class imf_preconditioner {$/;"	c	namespace:itl::pc
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^namespace impl {$/;"	n	namespace:meta_math
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/sqrt.hpp	/^namespace impl {$/;"	n	namespace:meta_math
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hessian_setup.hpp	/^namespace impl {$/;"	n	namespace:mtl::mat
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/left_scale_inplace.hpp	/^    namespace impl {$/;"	n	namespace:mtl
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^namespace impl {$/;"	n	namespace:mtl::mat
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max.hpp	/^    namespace impl {$/;"	n	namespace:mtl::vec
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_of_sums.hpp	/^namespace mtl { namespace impl {$/;"	n	namespace:mtl
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min.hpp	/^    namespace impl {$/;"	n	namespace:mtl::vec
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^    namespace impl {$/;"	n	namespace:mtl::vec
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/product.hpp	/^	namespace impl {$/;"	n	namespace:mtl::vec
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^namespace impl {$/;"	n	namespace:mtl
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^namespace impl {$/;"	n	namespace:mtl::vec
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^    namespace impl {$/;"	n	namespace:mtl
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sub_matrix.hpp	/^    namespace impl {$/;"	n	namespace:mtl::mat
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sum.hpp	/^    namespace impl {$/;"	n	namespace:mtl
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/simplify_base_case_matrix.hpp	/^namespace impl {$/;"	n	namespace:mtl::recursion
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    namespace impl {$/;"	n	namespace:mtl::traits
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^    namespace impl {$/;"	n	namespace:mtl
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^    namespace impl {$/;"	n	namespace:mtl::vec
impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    namespace impl {$/;"	n	namespace:mtl::vec
implicit_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    explicit implicit_dense (const Functor& functor) : my_functor(functor) {}$/;"	f	class:mtl::mat::implicit_dense
implicit_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^class implicit_dense$/;"	c	namespace:mtl::mat
implicit_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct implicit_dense$/;"	s	namespace:mtl::tag
in_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef compressed2D<Value, Parameters>                  in_matrix_type;$/;"	t	struct:mtl::mat::umfpack::matrix_copy
in_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^	bool in_range(size_type i) const$/;"	f	class:mtl::irange
in_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    bool in_range(size_type i) const$/;"	f	class:mtl::srange
inc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    T inc(T i, T mask) { return ((i - mask) & mask);    }$/;"	f	struct:mtl::dilated::masked_dilation_tables
inc_wo_over	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	inline long inc_wo_over(long i) { return i == std::numeric_limits<long>::max() ? i : i+1; }$/;"	f	namespace:mtl::__anon3
incident_iterator	Graph.hpp	/^  typedef IncidentIterator incident_iterator;$/;"	t	class:Graph
incompatible_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit incompatible_shape(const char *s= "Arguments have incompatible shape.")$/;"	f	struct:mtl::incompatible_shape
incompatible_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct incompatible_shape : public domain_error$/;"	s	namespace:mtl
incompatible_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit incompatible_size(const char *s= "Arguments have incompatible size.")$/;"	f	struct:mtl::incompatible_size
incompatible_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct incompatible_size : public domain_error$/;"	s	namespace:mtl
increment	Examples/iterator_adaptor_boost.cpp	/^  void increment() {$/;"	f	struct:my_stride_iterator	file:
increment_it	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/incrementer.hpp	/^    void increment_it(Vector& tgt) const$/;"	f	struct:mtl::vec::incrementer
increment_it	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^    void increment_it(VectorOut& w) const$/;"	f	struct:mtl::vec::mat_cvec_multiplier
incrementer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/incrementer.hpp	/^struct incrementer : incrementer_base$/;"	s	namespace:mtl::vec
incrementer_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/incrementer.hpp	/^struct incrementer_base {};$/;"	s	namespace:mtl::vec
index	Graph.hpp	/^    idx_type index() const {$/;"	f	class:Graph::Node
index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	/^namespace mtl { namespace index {$/;"	n	namespace:mtl
index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template <typename Value> struct index $/;"	s	namespace:mtl::mat::umfpack
index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/parameter.hpp	/^    typedef Index       index;$/;"	t	struct:mtl::mat::parameters
index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace index {$/;"	n	namespace:mtl
index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct index<mtl::vec::dense_vector<Elt, Parameters> >$/;"	s	namespace:mtl::traits
index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct index<mtl::vec::strided_vector_ref<Elt, Parameters> >$/;"	s	namespace:mtl::traits
index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^template <class Vector> struct index {};$/;"	s	namespace:mtl::traits
index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    struct index<vec::map_view<Functor, Vector> >$/;"	s	namespace:mtl::traits
index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    size_type index(size_type j) const { check(j); return indices[j]; }$/;"	f	class:mtl::vec::sparse_vector
index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    size_type                    index;$/;"	m	struct:mtl::vec::vec_scal_aop_expr
index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop1.hpp	/^    static std::size_t const index0= Index0 - 1, next_index0= Index0 + 1;$/;"	m	class:meta_math::loop1::std
index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop1.hpp	/^    static std::size_t const index0= Max0 - 1;$/;"	m	class:meta_math::loop1::std
index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^    static const std::size_t index0= Index0 - 1, next_index0= Index0 + 1,$/;"	m	struct:meta_math::loop2
index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^    static const std::size_t index0= Index0 - 1, next_index0= Index0,$/;"	m	struct:meta_math::loop2
index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^    static const std::size_t index0= Max0 - 1,$/;"	m	struct:meta_math::loop2
index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^    static std::size_t const index0= Index0 - 1, next_index0= Index0 + 1,$/;"	m	class:meta_math::loop3::std
index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^    static std::size_t const index0= Index0 - 1, next_index0= Index0,$/;"	m	class:meta_math::loop3::std
index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^    static std::size_t const index0= Max0 - 1,$/;"	m	class:meta_math::loop3::std
index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^            	             index1= Index1 - 1, next_index1= Index1 + 1;$/;"	m	struct:meta_math::loop2
index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^            	             index1= Max1 - 1, next_index1= 1;$/;"	m	struct:meta_math::loop2
index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^            	             index1= Max1 - 1;$/;"	m	struct:meta_math::loop2
index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^	                     index1= Index1 - 1, next_index1= Index1 + 1,$/;"	m	struct:meta_math::loop3
index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^	                     index1= Index1 - 1, next_index1= Index1,$/;"	m	struct:meta_math::loop3
index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^	                     index1= Max1 - 1, next_index1= 1,$/;"	m	struct:meta_math::loop3
index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^	                     index1= Max1 - 1,$/;"	m	struct:meta_math::loop3
index2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^            	             index2= Index2 - 1, next_index2= Index2 + 1;$/;"	m	struct:meta_math::loop3
index2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^            	             index2= Max2 - 1, next_index2= 1;$/;"	m	struct:meta_math::loop3
index2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^            	             index2= Max2 - 1;$/;"	m	struct:meta_math::loop3
index_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template <bool Larger> struct index_aux   { typedef int     type; };$/;"	s	namespace:mtl::mat::umfpack
index_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct index_aux<true>         { typedef long type; };$/;"	s	namespace:mtl::mat::umfpack
index_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^        template<> struct index_aux<true>         { typedef UF_long type; };$/;"	s	namespace:mtl::mat::umfpack
index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct index_evaluatable : boost::mpl::false_ {};$/;"	s	namespace:mtl::traits
index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct index_evaluatable<fused_expr<T, U> > $/;"	s	namespace:mtl::traits
index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct index_evaluatable<lazy_assign<T, U, Assign> >$/;"	s	namespace:mtl::traits
index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct index_evaluatable<lazy_assign<V1, mtl::mat_cvec_times_expr<Matrix, V2>, Assign> >$/;"	s	namespace:mtl::traits
index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct index_evaluatable<lazy_assign<V1, mtl::vec::mat_cvec_multiplier<Matrix, V2>, Assign> >$/;"	s	namespace:mtl::traits
index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/index_evaluator.hpp	/^inline index_evaluator(lazy_assign<Scalar, mtl::vec::dot_class<Unroll, Vector1, Vector2, ConjOpt>, Assign>& lazy)$/;"	f	class:mtl::mtl::vec
index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/index_evaluator.hpp	/^inline index_evaluator(lazy_assign<Scalar, mtl::vec::lazy_reduction<Vector, Functor>, Assign>& lazy)$/;"	f	class:mtl::mtl::vec
index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/index_evaluator.hpp	/^inline index_evaluator(lazy_assign<T, U, Assign>& lazy)$/;"	f	class:mtl::boost::enable_if
index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/index_evaluator.hpp	/^inline index_evaluator(lazy_assign<V1, itl::pc::solver<itl::pc::ic_0<Matrix, Value>, V2, true>, assign::assign_sum>& lazy)$/;"	f	class:mtl::itl::pc
index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/index_evaluator.hpp	/^inline index_evaluator(lazy_assign<V1, itl::pc::solver<itl::pc::ilu<Matrix, Factorizer, Value>, V2, true>, assign::assign_sum>& lazy)$/;"	f	class:mtl::itl::pc
index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/index_evaluator.hpp	/^inline index_evaluator(lazy_assign<VectorOut, mtl::mat_cvec_times_expr<Matrix, VectorIn>, Assign>& lazy)$/;"	f	class:mtl::mtl::vec
index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/index_evaluator.hpp	/^inline mtl::vec::fused_index_evaluator<T, U> index_evaluator(fused_expr<T, U>& expr)$/;"	f	namespace:mtl
index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluator.hpp	/^struct index_evaluator {};$/;"	s	namespace:mtl::traits
index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluator.hpp	/^struct index_evaluator<fused_expr<T, U> >$/;"	s	namespace:mtl::traits
index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluator.hpp	/^struct index_evaluator<lazy_assign<T, U, Assign> >$/;"	s	namespace:mtl::traits
index_from_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    index_from_offset(const collection_type& coll) : coll(coll) {} $/;"	f	struct:mtl::detail::index_from_offset
index_from_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Collection> struct index_from_offset$/;"	s	namespace:mtl::detail
index_heap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    ii_type*      index_heap;$/;"	m	class:mtl::mat::element_structure
index_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^inline index_map(const Vector& A)$/;"	f	class:mtl::vec::mtl::traits::index
index_out_of_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit index_out_of_range(const char *s= "Index out of range") : std::out_of_range(s) {}$/;"	f	struct:mtl::index_out_of_range
index_out_of_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct index_out_of_range : public std::out_of_range$/;"	s	namespace:mtl
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	typedef mtl::dense_vector<int>  index_type;$/;"	t	class:itl::pc::imf_preconditioner
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef typename index<size_type>::type           index_type;$/;"	t	class:mtl::mat::umfpack::solver
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef typename Matrix::index_type                index_type;$/;"	t	struct:mtl::mat::banded_view
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    typedef typename Parameters::index        index_type;$/;"	t	struct:mtl::mat::base_matrix
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    typedef typename Parameters::index        index_type;$/;"	t	struct:mtl::mat::base_sub_matrix
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef typename Parameters::index               index_type;$/;"	t	class:mtl::mat::compressed2D
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef typename Parameters::index        index_type;$/;"	t	class:mtl::mat::dense2D
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    typedef mtl::dense_vector<int> index_type; $/;"	t	class:mtl::mat::element
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    typedef typename element_type::index_type index_type;$/;"	t	class:mtl::mat::element_structure
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef index::c_index                             index_type;$/;"	t	class:mtl::mat::implicit_dense
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef typename Matrix::index_type                index_type;$/;"	t	struct:mtl::mat::map_view
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Parameters::index        index_type;$/;"	t	class:mtl::mat::morton_dense
index_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef typename Matrix::index_type                index_type;$/;"	t	struct:mtl::mat::transposed_view
index_vector_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    typedef std::vector<size_type>    index_vector_type;$/;"	t	class:mtl::mat::block_diagonal2D
indexbuffer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    indexbuffer(const Vector& v) : vec(v) {}$/;"	f	struct:mtl::vec::indexbuffer
indexbuffer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^struct indexbuffer $/;"	s	namespace:mtl::vec
indexer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    indexer_type            indexer;$/;"	m	class:mtl::mat::compressed2D
indexer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    indexer_type  indexer;$/;"	m	class:mtl::mat::dense2D
indexer_col_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    indexer_col_ref(const matrix_type& ma) : ma(ma) {} $/;"	f	struct:mtl::detail::indexer_col_ref
indexer_col_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct indexer_col_ref$/;"	s	namespace:mtl::detail
indexer_minor_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    indexer_minor_ref(const matrix_type& ma) : ma(ma) {} $/;"	f	struct:mtl::detail::indexer_minor_ref
indexer_minor_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct indexer_minor_ref$/;"	s	namespace:mtl::detail
indexer_row_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    indexer_row_ref(const matrix_type& ma) : ma(ma) {} $/;"	f	struct:mtl::detail::indexer_row_ref
indexer_row_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct indexer_row_ref$/;"	s	namespace:mtl::detail
indexer_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef compressed2D_indexer<size_type>          indexer_type;$/;"	t	class:mtl::mat::compressed2D
indexer_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef dense2D_indexer                   indexer_type;$/;"	t	class:mtl::mat::dense2D
indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	size_type indices[2];$/;"	m	struct:mtl::traits::detail::matrix_element_cursor
indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	size_type indices[2];$/;"	m	struct:mtl::traits::detail::matrix_element_key
indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<size_type>  indices;$/;"	m	class:mtl::mat::compressed2D
indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<size_type>&             indices;$/;"	m	struct:mtl::mat::compressed2D_inserter
indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    std::vector<size_type>  indices;$/;"	m	class:mtl::mat::ell_matrix
indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	std::vector<size_type> indices;$/;"	m	class:mtl::iset
indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    sv_type     indices;$/;"	m	class:mtl::vec::sparse_vector
indices_	Graph.hpp	/^	std::vector<imap_idx_type> indices_;$/;"	m	class:Graph
indirect	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    indirect(const Matrix& ref, const iset& rows, const iset& cols) : ref(ref), rows(rows), cols(cols) {}$/;"	f	struct:mtl::mat::indirect
indirect	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^struct indirect$/;"	s	namespace:mtl::mat
induced_norm_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^struct induced_norm_t$/;"	s	namespace:math
infinite	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct infinite : boost::mpl::int_<1000> {};$/;"	s	namespace:mtl::complexity_classes
infinity_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/infinity_norm.hpp	/^	inline infinity_norm(const Matrix& matrix)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
infinity_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/infinity_norm.hpp	/^	inline infinity_norm(const Vector& vector)$/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
infinity_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/infinity_norm.hpp	/^	inline infinity_norm(const Vector& vector)$/;"	f	class:mtl::vec::traits::enable_if_vector
infinity_norm_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^struct infinity_norm_functor$/;"	s	namespace:mtl::vec
init	CS207/SDLViewer.hpp	/^  void init() {$/;"	f	class:CS207::SDLViewer
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    void init() $/;"	f	struct:mtl::dilated::masked_dilation_tables
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void init()$/;"	f	class:mtl::mat::umfpack::solver
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void init()$/;"	f	class:mtl::mat::dense2D
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    void init(size_type num_rows, size_type num_cols)$/;"	f	class:mtl::mat::morton_dense
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void init(T& v)$/;"	f	struct:mtl::assign::assign_sum
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void init(T&) {}$/;"	f	struct:mtl::assign::divide_sum
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void init(T&) {}$/;"	f	struct:mtl::assign::minus_sum
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void init(T&) {}$/;"	f	struct:mtl::assign::plus_sum
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void init(T&) {}$/;"	f	struct:mtl::assign::times_sum
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Element init(Value const& y)$/;"	f	struct:mtl::operations::update_adapter
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Element init(Value const& y)$/;"	f	struct:mtl::operations::update_minus
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Element init(Value const& y)$/;"	f	struct:mtl::operations::update_plus
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Element init(Value const& y)$/;"	f	struct:mtl::operations::update_store
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Element init(Value const& y)$/;"	f	struct:mtl::operations::update_times
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	typedef init_local        init;$/;"	t	namespace:mtl::type_para
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^	    static inline void init(Value& tmp00, Value& tmp01, Value& tmp02, Value& tmp03, Value& tmp04, $/;"	f	struct:mtl::vec::impl::reduction
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^	    static inline void init(Value& tmp00, Value&, Value&, Value&, Value&, Value&, Value&, Value&)$/;"	f	struct:mtl::vec::impl::reduction
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void init(Value& value)$/;"	f	struct:mtl::vec::infinity_norm_functor
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void init(Value& value)$/;"	f	struct:mtl::vec::max_functor
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void init(Value& value)$/;"	f	struct:mtl::vec::min_functor
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void init(Value& value)$/;"	f	struct:mtl::vec::one_norm_functor
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void init(Value& value)$/;"	f	struct:mtl::vec::product_functor
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void init(Value& value)$/;"	f	struct:mtl::vec::sum_functor
init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void init(Value& value)$/;"	f	struct:mtl::vec::two_norm_functor
init_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void init_aux(false_)$/;"	f	class:mtl::mat::umfpack::solver
init_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void init_aux(true_)$/;"	f	class:mtl::mat::umfpack::solver
init_carry	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    typedef masking<T, BitMask, !Normalized>        init_carry;$/;"	t	struct:mtl::dilated::dilated_int
init_common	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	>                            init_common;$/;"	t	namespace:mtl::type_para
init_density	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    typedef typename boost::mpl::at<TypePara, density>::type init_density;$/;"	t	struct:mtl::type_para::matrix_default_density
init_local	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_local.hpp	/^	typedef init_common     init_local;$/;"	t	namespace:mtl::type_para
init_papi	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    void init_papi()$/;"	f	class:mtl::utility::papi_t
init_ptrs	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^struct init_ptrs$/;"	s	namespace:mtl::mat
init_ptrs	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^struct init_ptrs<Size, Size>$/;"	s	namespace:mtl::mat
init_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static const bool init_to_zero= false;$/;"	m	struct:mtl::assign::divide_sum
init_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static const bool init_to_zero= false;$/;"	m	struct:mtl::assign::minus_sum
init_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static const bool init_to_zero= false;$/;"	m	struct:mtl::assign::plus_sum
init_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static const bool init_to_zero= false;$/;"	m	struct:mtl::assign::times_sum
init_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static const bool init_to_zero= true;$/;"	m	struct:mtl::assign::assign_sum
initialize	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void initialize()$/;"	f	class:mtl::mat::umfpack::solver
inner_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef coordinate_minor_cursor<Value, Parameters>   inner_cursor;$/;"	t	struct:mtl::mat::coordinate_major_cursor
inner_end_	Graph.hpp	/^	bool inner_end_() {$/;"	f	class:Graph::EdgeIterator
inner_it_type	Graph.hpp	/^	typedef incident_iterator inner_it_type;$/;"	t	class:Graph::EdgeIterator
inner_pos_	Graph.hpp	/^	inner_it_type inner_pos_;$/;"	m	class:Graph::EdgeIterator
inner_prod	Point.hpp	/^double inner_prod(const Point& a, const Point& b) {$/;"	f
ins	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^	inserter<Matrix> ins;$/;"	m	struct:mtl::mat::crtp_matrix_assign::scalar_assign
ins	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^    BaseInserter ins;$/;"	m	class:mtl::mat::mapped_inserter
ins	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    BaseInserter ins;$/;"	m	class:mtl::mat::shifted_inserter
ins	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Inserter&  ins;$/;"	m	struct:mtl::operations::update_proxy
ins	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    Inserter&  ins;$/;"	m	struct:mtl::vec::update_proxy
ins	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^    BaseInserter ins;$/;"	m	class:mtl::vec::mapped_inserter
insert	BoundingBox.hpp	/^  BoundingBox& insert(PointIter first, PointIter last) {$/;"	f	class:BoundingBox
insert	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	void insert(value_type node, key_type key) {$/;"	f	class:utils::binary_heap
insert	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    void insert(size_type start, size_type end, const block_type& A) $/;"	f	class:mtl::mat::block_diagonal2D
insert	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void insert(size_type r, size_type c, const_reference v) {	push_back(r, c, v); }$/;"	f	class:mtl::mat::coordinate2D
insert	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    void insert(size_type i, const value_type& v)$/;"	f	class:mtl::vec::sparse_vector
insert_dia	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    void insert_dia(size_type dia_band, band_size_type dia)$/;"	f	struct:mtl::mat::sparse_banded_inserter
insert_spare	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^void compressed2D_inserter<Elt, Parameters, Updater>::insert_spare()$/;"	f	class:mtl::mat::compressed2D_inserter
insert_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void insert_value(Inserter& ins, std::size_t r, std::size_t c, const Filter& filter, Value) $/;"	f	class:mtl::io::matrix_market_istream
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_filter.hpp	/^    const Inserter& inserter;$/;"	m	class:mtl::io::read_filter
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    explicit inserter(Matrix& matrix, size_type slot_size = 0) : base(matrix, slot_size) {}$/;"	f	struct:mtl::mat::inserter
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    explicit inserter(matrix_type& matrix, size_type slot_size = 5) : base(matrix, slot_size) {}$/;"	f	struct:mtl::mat::inserter
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    explicit inserter(matrix_type& matrix, size_type slot_size= 1) : base(matrix, slot_size) {}$/;"	f	struct:mtl::mat::inserter
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^struct inserter $/;"	s	namespace:mtl::mat
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^struct inserter<compressed2D<Value, Parameters>, Updater>$/;"	s	namespace:mtl::mat
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^struct inserter<coordinate2D<Value, Parameters>, Updater>$/;"	s	namespace:mtl::mat
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^struct inserter<ell_matrix<Value, Parameters>, Updater>$/;"	s	namespace:mtl::mat
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^struct inserter<sparse_banded<Value, Parameters>, Updater>$/;"	s	namespace:mtl::mat
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    explicit inserter(Vector& vector) : vector(vector) {}$/;"	f	struct:mtl::vec::inserter
inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^struct inserter $/;"	s	namespace:mtl::vec
inserting	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    bool                    inserting;$/;"	m	class:mtl::mat::compressed2D
inserting	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    bool                    inserting;$/;"	m	class:mtl::mat::ell_matrix
inserting	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    bool                           inserting;$/;"	m	class:mtl::mat::sparse_banded
instances	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    static int                         n_valid_table, instances;$/;"	m	struct:mtl::dilated::masked_dilation_tables
instances	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^int masked_dilation_tables<T, Mask>::instances= 0;$/;"	m	class:mtl::dilated::masked_dilation_tables
internal_element	Examples/proxy_example.cpp	/^  struct internal_element {$/;"	s	class:SimpleSet	file:
intersection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^    irange inline intersection(irange const& r1, irange const& r2)$/;"	f	namespace:mtl
intersects	BoundingBox.hpp	/^  bool intersects(const BoundingBox& b) const {$/;"	f	class:BoundingBox
inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^    struct inv$/;"	s	namespace:mtl::mat::traits
inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^inline inv(Matrix const& A)$/;"	f	class:mtl::mat::traits::inv
inv	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^inline void inv(Matrix const& A, MatrixOut& Inv)$/;"	f	namespace:mtl::mat
inv_diag	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^    mtl::dense_vector<value_type>    inv_diag;$/;"	m	class:itl::pc::diagonal
inv_lower	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^inline inv_lower(Matrix const& A)$/;"	f	class:mtl::mat::traits::inv
inv_upper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^inv_upper(Matrix const& A)$/;"	f	namespace:mtl::mat
inv_upper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^void inv_upper(Matrix const& A, MatrixOut& Inv)$/;"	f	namespace:mtl::mat
inverse	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/inverse.hpp	/^inline Element inverse(const Operation& op, const Element& v)$/;"	f	namespace:math
inverse_diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct inverse_diagonal : universe_diagonal {};$/;"	s	namespace:mtl::tag
inverse_lower_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^Vector inline inverse_lower_trisolve(const Matrix& A, const Vector& v)$/;"	f	namespace:mtl::mat
inverse_lower_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^inline void inverse_lower_trisolve(const Matrix& A, const VectorIn& v, VectorOut& w)$/;"	f	namespace:mtl::mat
inverse_result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/algebraic_concepts.hpp	/^        typedef associated_type inverse_result_type;$/;"	t	struct:algebra::Inversion
inverse_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/inverse.hpp	/^struct inverse_t {} ;$/;"	s	namespace:math
inverse_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/inverse.hpp	/^struct inverse_t< add<Element>, Element >$/;"	s	namespace:math
inverse_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/inverse.hpp	/^struct inverse_t< mult<Element>, Element >$/;"	s	namespace:math
inverse_upper_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^Vector inline inverse_upper_trisolve(const Matrix& A, const Vector& v)$/;"	f	namespace:mtl::mat
inverse_upper_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^void inline inverse_upper_trisolve(const Matrix& A, const VectorIn& v, VectorOut& w)$/;"	f	namespace:mtl::mat
invert_diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/invert_diagonal.hpp	/^inline void invert_diagonal(Matrix& A)$/;"	f	namespace:mtl::mat
invert_diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/invert_diagonal.hpp	/^inline void invert_diagonal(compressed2D<Value, Parameters>& A)$/;"	f	namespace:mtl::mat
io	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^namespace mtl { namespace io {$/;"	n	namespace:mtl
io	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_file.hpp	/^namespace mtl { namespace io {$/;"	n	namespace:mtl
io	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^namespace mtl { namespace io {$/;"	n	namespace:mtl
io	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/path.hpp	/^namespace mtl { namespace io {$/;"	n	namespace:mtl
io	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_filter.hpp	/^namespace mtl { namespace io {$/;"	n	namespace:mtl
io	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^namespace mtl { namespace io {$/;"	n	namespace:mtl
io	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast.hpp	/^namespace mtl { namespace io {$/;"	n	namespace:mtl
io	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^namespace mtl { namespace io {$/;"	n	namespace:mtl
io	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace io {$/;"	n	namespace:mtl
io_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit io_error(const char *s= "I\/O error") : std::runtime_error(s) {}$/;"	f	struct:mtl::io_error
io_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct io_error : public std::runtime_error$/;"	s	namespace:mtl
iota	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/iota.hpp	/^void iota(Vector& v, const typename Collection<Vector>::value_type offset= 0)$/;"	f	namespace:mtl::vec
irange	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        explicit irange(size_type finish) : my_start(0), my_finish(finish) {}$/;"	f	class:mtl::irange
irange	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        explicit irange(size_type start, size_type finish) : my_start(start), my_finish(finish) {}$/;"	f	class:mtl::irange
irange	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        irange() : my_start(0), my_finish(imax) {}$/;"	f	class:mtl::irange
irange	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^    class irange$/;"	c	namespace:mtl
isRealEW	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    bool isRealEW(size_type k) {$/;"	f	class:mtl::mat::eigenvalue_solver
is_32_base_case_col_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct is_32_base_case_col_major$/;"	s	namespace:mtl
is_32_base_case_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct is_32_base_case_row_major$/;"	s	namespace:mtl
is_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    bool is_base(const Recursator& recursator) const$/;"	f	struct:mtl::mat::recursive_cholesky_visitor_t
is_clonable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    struct is_clonable< detail::contiguous_memory_block<Value, OnStack, Size> > : boost::mpl::bool_<!OnStack> {};$/;"	s	namespace:mtl
is_clonable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct is_clonable< mtl::mat::dense2D<Value, Parameters> > : boost::mpl::true_ {};$/;"	s	namespace:mtl
is_clonable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct is_clonable< mat::morton_dense<Value, BitMask, Parameters> > : boost::mpl::true_ {};$/;"	s	namespace:mtl
is_clonable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/clone.hpp	/^struct is_clonable : boost::mpl::false_$/;"	s	namespace:mtl
is_clonable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    struct is_clonable< vec::dense_vector<Value, Parameters> > : boost::mpl::true_ {};$/;"	s	namespace:mtl
is_clonable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    struct is_clonable< vec::strided_vector_ref<Value, Parameters> > : boost::mpl::true_ {};$/;"	s	namespace:mtl
is_composable_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_composable_vector.hpp	/^struct is_composable_vector$/;"	s	namespace:mtl::traits
is_composable_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_composable_vector.hpp	/^struct is_composable_vector< mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::traits
is_converged	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool is_converged() const { return is_finished && error == 0; }$/;"	f	class:itl::basic_iteration
is_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_dense $/;"	s	namespace:mtl::traits
is_distributed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_distributed.hpp	/^struct is_distributed $/;"	s	namespace:mtl::traits
is_distributed_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_distributed.hpp	/^struct is_distributed_aux $/;"	s	namespace:mtl::traits
is_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    bool is_empty() const$/;"	f	struct:mtl::mat::recursator
is_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^bool inline is_empty(const recursator<Matrix>& rec)$/;"	f	namespace:mtl::mat
is_event_supported	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    bool is_event_supported(const char* name) const { return false;}$/;"	f	struct:mtl::utility::papi_t
is_event_supported	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    bool is_event_supported(const char* name) const$/;"	f	class:mtl::utility::papi_t
is_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_fast_multi_vector_expr$/;"	s	namespace:mtl::traits
is_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_fast_multi_vector_expr< mtl::mat::mat_mat_minus_expr<E1, E2> > $/;"	s	namespace:mtl::traits
is_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_fast_multi_vector_expr< mtl::mat::multi_vector<Vector> >$/;"	s	namespace:mtl::traits
is_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_fast_multi_vector_expr< mtl::mat::mv_mv_plus_expr<E1, E2> > $/;"	s	namespace:mtl::traits
is_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_fast_multi_vector_expr< mtl::mat::rscaled_view<Value1, Matrix> > $/;"	s	namespace:mtl::traits
is_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_fast_multi_vector_expr< mtl::mat::scaled_view<Value1, Matrix> > $/;"	s	namespace:mtl::traits
is_finished	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool         is_finished, my_quite, my_suppress;$/;"	m	class:itl::basic_iteration
is_full	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^bool inline is_full(const recursator<Matrix>& rec)$/;"	f	namespace:mtl::mat
is_identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/is_identity.hpp	/^bool is_identity(const PC&) $/;"	f	namespace:itl::pc
is_identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/is_identity.hpp	/^bool is_identity(const itl::pc::identity<Matrix, Value>&)$/;"	f	namespace:itl::pc
is_invertible	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	/^inline bool is_invertible(const Operation& op, const Element& v)$/;"	f	namespace:math
is_invertible_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	/^struct is_invertible_t$/;"	s	namespace:math
is_invertible_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	/^struct is_invertible_t< add<Element>, Element >$/;"	s	namespace:math
is_invertible_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	/^struct is_invertible_t< mult<Element>, Element >$/;"	s	namespace:math
is_k_power_base_case_col_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct is_k_power_base_case_col_major$/;"	s	namespace:mtl
is_k_power_base_case_col_major_t_shark	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct is_k_power_base_case_col_major_t_shark$/;"	s	namespace:mtl
is_k_power_base_case_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct is_k_power_base_case_row_major$/;"	s	namespace:mtl
is_k_power_base_case_row_major_t_shark	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct is_k_power_base_case_row_major_t_shark$/;"	s	namespace:mtl
is_lazy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_lazy.hpp	/^struct is_lazy : boost::mpl::false_ {};$/;"	s	namespace:mtl::traits
is_lazy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_lazy.hpp	/^struct is_lazy<fused_expr<T, U> > $/;"	s	namespace:mtl::traits
is_lazy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_lazy.hpp	/^struct is_lazy<lazy_assign<T, U, Assign> > : boost::mpl::true_ {};$/;"	s	namespace:mtl::traits
is_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_matrix $/;"	s	namespace:mtl::traits
is_matrix_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_matrix_aux $/;"	s	namespace:mtl::traits
is_matrix_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_matrix_aux<ashape::mat<Shape> > $/;"	s	namespace:mtl::traits
is_multi_print	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      bool is_multi_print() const { return multi_print; }$/;"	f	class:itl::cyclic_iteration
is_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_multi_vector_expr$/;"	s	namespace:mtl::traits
is_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_multi_vector_expr< mtl::mat::mat_mat_minus_expr<E1, E2> > $/;"	s	namespace:mtl::traits
is_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_multi_vector_expr< mtl::mat::multi_vector<Vector> >$/;"	s	namespace:mtl::traits
is_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_multi_vector_expr< mtl::mat::mv_mv_plus_expr<E1, E2> > $/;"	s	namespace:mtl::traits
is_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_multi_vector_expr< mtl::mat::rscaled_view<Value1, Matrix> > $/;"	s	namespace:mtl::traits
is_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^struct is_multi_vector_expr< mtl::mat::scaled_view<Value1, Matrix> > $/;"	s	namespace:mtl::traits
is_negative	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/is_negative.hpp	/^inline is_negative(T x) { return x < 0; }$/;"	f	class:mtl::boost::disable_if
is_negative	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/is_negative.hpp	/^inline is_negative(T) { return false; }$/;"	f	class:mtl::boost::enable_if
is_power_of_2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_power_of_2.hpp	/^struct is_power_of_2$/;"	s	namespace:meta_math
is_power_of_2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/utility.hpp	/^bool inline is_power_of_2(Integral x)$/;"	f	namespace:mtl::recursion
is_prime	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^struct is_prime$/;"	s	namespace:meta_math
is_prime	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^template <> struct is_prime<0> : mpl::false_ {};$/;"	s	namespace:meta_math
is_prime	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^template <> struct is_prime<1> : mpl::false_ {};$/;"	s	namespace:meta_math
is_prime	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^template <> struct is_prime<2> : mpl::true_ {};$/;"	s	namespace:meta_math
is_prime	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^template <> struct is_prime<3> : mpl::true_ {};$/;"	s	namespace:meta_math
is_prime	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^template <> struct is_prime<5> : mpl::true_ {};$/;"	s	namespace:meta_math
is_prime	primes.cpp	/^bool is_prime(int n)$/;"	f
is_prime_to_max_odd	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^    struct is_prime_to_max_odd$/;"	s	namespace:meta_math::impl
is_prime_to_max_odd	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^    template <long int x> struct is_prime_to_max_odd<x, 1> : mpl::true_ {};$/;"	s	namespace:meta_math::impl
is_quite	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool is_quite() const { return my_quite; }$/;"	f	class:itl::basic_iteration
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major {};$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<col_major>$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<const T>$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<mat::banded_view<Matrix> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<mat::parameters<col_major, Index, Dimension, OnStack, SizeType> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<mat::parameters<row_major, Index, Dimension, OnStack, SizeType> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<mtl::mat::compressed2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<mtl::mat::dense2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<mtl::mat::ell_matrix<Value, Parameters> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<mtl::mat::morton_dense<Value, Mask, Parameters> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<row_major>$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<vec::parameters<col_major, Dimension, OnStack, SizeType> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<vec::parameters<row_major, Dimension, OnStack, SizeType> >$/;"	s	namespace:mtl::traits
is_row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^    struct is_row_major<vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::traits
is_scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_scalar $/;"	s	namespace:mtl::traits
is_sorted	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    bool is_sorted() const { return my_is_sorted; }$/;"	f	class:mtl::mat::coordinate2D
is_sparse	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_sparse $/;"	s	namespace:mtl::traits
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	static bool const is_static= false;$/;"	m	struct:mtl::non_fixed::dimensions
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	static bool const is_static= true;$/;"	m	struct:mtl::fixed::dimensions
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_static.hpp	/^    template <std::size_t Rows, std::size_t Cols> struct is_static<mtl::fixed::dimensions<Rows, Cols> > : boost::mpl::true_ {};$/;"	s	namespace:mtl::traits
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_static.hpp	/^    template <std::size_t Size> struct is_static<mtl::vec::fixed::dimension<Size> > : boost::mpl::true_ {};$/;"	s	namespace:mtl::traits
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_static.hpp	/^    template <typename T> struct is_static : boost::mpl::false_ {};$/;"	s	namespace:mtl::traits
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_static.hpp	/^    template <typename V, std::size_t M, typename P> struct is_static<mtl::mat::morton_dense<V, M, P> > : is_static<typename P::dimensions> {};$/;"	s	namespace:mtl::traits
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_static.hpp	/^    template <typename V, typename P> struct is_static<mtl::mat::compressed2D<V, P> > : is_static<typename P::dimensions> {};$/;"	s	namespace:mtl::traits
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_static.hpp	/^    template <typename V, typename P> struct is_static<mtl::mat::dense2D<V, P> > : is_static<typename P::dimensions> {};$/;"	s	namespace:mtl::traits
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_static.hpp	/^    template <typename V, typename P> struct is_static<mtl::vec::dense_vector<V, P> > : is_static<typename P::dimension> {};$/;"	s	namespace:mtl::traits
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^	static bool const is_static= false;$/;"	m	struct:mtl::vec::non_fixed::dimension
is_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^	static bool const is_static= true;$/;"	m	struct:mtl::vec::fixed::dimension
is_symmetric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_symmetric$/;"	s	namespace:mtl::traits
is_unevaluated	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_unevaluated $/;"	s	namespace:mtl::traits
is_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_vector $/;"	s	namespace:mtl::traits
is_vector_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_vector_aux $/;"	s	namespace:mtl::traits
is_vector_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_vector_aux<ashape::cvec<Shape> > $/;"	s	namespace:mtl::traits
is_vector_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^struct is_vector_aux<ashape::rvec<Shape> > $/;"	s	namespace:mtl::traits
is_vector_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_vector_reduction.hpp	/^struct is_vector_reduction : boost::mpl::false_ {};$/;"	s	namespace:mtl::traits
is_vector_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_vector_reduction.hpp	/^struct is_vector_reduction<mtl::vec::dot_class<Unroll, Vector1, Vector2, ConjOpt> >$/;"	s	namespace:mtl::traits
is_vector_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_vector_reduction.hpp	/^struct is_vector_reduction<mtl::vec::lazy_reduction<Vector, Functor> >$/;"	s	namespace:mtl::traits
iset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	explicit iset(const std::vector<size_type>& src) : indices(src) {}$/;"	f	class:mtl::iset
iset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	explicit iset(std::vector<size_type>&& src) : indices(std::move(src)) {}$/;"	f	class:mtl::iset
iset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	iset() {} \/\/\/< Default constructor$/;"	f	class:mtl::iset
iset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^    class iset$/;"	c	namespace:mtl
it_	Examples/distance_dispatch.cpp	/^  Iter it_;$/;"	m	struct:dumb_iterator	file:
it_	Mesh.hpp	/^			tri_node_iterator& it_;$/;"	m	class:Mesh::TriangleIterator
it_	subgraph.cpp	/^  It it_;$/;"	m	class:filter_iterator	file:
it_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    typedef T                          it_type[n_bytes];  \/\/ why int ??? switch to T$/;"	t	struct:mtl::dilated::masked_dilation_tables
iter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^	namespace iter {}$/;"	n	namespace:mtl::tag
iter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^    namespace iter {$/;"	n	namespace:mtl::tag
iterations	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    int iterations() const { return i; }$/;"	f	class:itl::basic_iteration
iterator	Graph.hpp	/^	typedef std::vector<uid_type>::iterator iterator;$/;"	t	class:Graph::IncidentIterator
iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef mtl::strided_dense_el_iterator<Value>                                    iterator;$/;"	t	class:mtl::vec::strided_vector_ref
iterator	Point.hpp	/^  typedef double*         iterator;$/;"	t	struct:Point
iterator_adaptor	Examples/iterator_adaptor.cpp	/^  explicit iterator_adaptor(const base_type& b)$/;"	f	class:iterator_adaptor
iterator_adaptor	Examples/iterator_adaptor.cpp	/^  iterator_adaptor(const this_type& m)$/;"	f	class:iterator_adaptor
iterator_adaptor	Examples/iterator_adaptor.cpp	/^class iterator_adaptor {$/;"	c	file:
iterator_adaptor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^    iterator_adaptor(PropertyMap map, Cursor cursor) $/;"	f	struct:mtl::utilities::iterator_adaptor
iterator_adaptor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^struct iterator_adaptor$/;"	s	namespace:mtl::utilities
iterator_category	Graph.hpp	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:Graph::EdgeIterator
iterator_category	Graph.hpp	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:Graph::IncidentIterator
iterator_category	Graph.hpp	/^    typedef std::input_iterator_tag iterator_category;$/;"	t	class:Graph::NodeIterator
iterator_category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^	typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits
iterator_category	Mesh.hpp	/^			typedef std::input_iterator_tag iterator_category;$/;"	t	class:Mesh::AdjacentIterator
iterator_category	Mesh.hpp	/^			typedef std::input_iterator_tag iterator_category;$/;"	t	class:Mesh::TriangleIterator
iterator_category	subgraph.cpp	/^  typedef typename std::input_iterator_tag                     iterator_category;$/;"	t	class:filter_iterator	file:
iterator_flatcat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct iterator_flatcat$/;"	s	namespace:mtl::traits
iterator_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    iterator_proxy(PropertyMap map, Cursor cursor) $/;"	f	struct:mtl::utilities::detail::iterator_proxy
iterator_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^struct iterator_proxy$/;"	s	namespace:mtl::utilities::detail
iterator_traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    struct iterator_traits<mtl::utility::zip_it<T, U> >$/;"	s	namespace:std
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/noisy_iteration.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/itl_fwd.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicg.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_2.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cg.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cgs.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/fsm.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/repeating_solver.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/minimization/quasi_newton.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^namespace itl { namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^namespace itl { namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^namespace itl { namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^namespace itl { namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^namespace itl { namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu_0.hpp	/^namespace itl { namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilut.hpp	/^namespace itl { namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^namespace itl {   namespace pc { $/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^namespace itl {   namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/is_identity.hpp	/^namespace itl { namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	/^namespace itl { namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^namespace itl { namespace pc {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/relaxation_parameter.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/repeated.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/armijo.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/wolf.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/bfgs.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/broyden.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/dfp.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/psb.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/sr1.hpp	/^namespace itl {$/;"	n
itl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/utility/exception.hpp	/^namespace itl {$/;"	n
itl	poisson.cpp	/^namespace itl {$/;"	n	file:
its_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	    typename col<Matrix>::type         its_col;$/;"	m	struct:mtl::traits::detail::banded_value
its_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    typename col<Matrix>::type  its_col;$/;"	m	struct:mtl::traits::detail::mapped_col
its_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    typename col<typename boost::remove_const<Matrix>::type>::type  its_col;$/;"	m	struct:mtl::traits::detail::transposed_row
its_const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename traits::const_value<typename boost::remove_const<other>::type>::type  its_const_value;$/;"	m	struct:mtl::detail::const_value_from_other
its_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	    typename row<Matrix>::type         its_row;$/;"	m	struct:mtl::traits::detail::banded_value
its_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    typename row<Matrix>::type  its_row;$/;"	m	struct:mtl::traits::detail::mapped_row
its_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    typename row<typename boost::remove_const<Matrix>::type>::type  its_row;$/;"	m	struct:mtl::traits::detail::transposed_col
its_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	    typename const_value<Matrix>::type its_value;$/;"	m	struct:mtl::traits::detail::banded_value
its_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^		typename mtl::traits::const_value<Matrix>::type its_value;$/;"	m	struct:mtl::traits::detail::map_value
its_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename traits::value<other>::type  its_value;$/;"	m	struct:mtl::detail::value_from_other
its_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	    typename ::mtl::traits::const_value<Vector>::type its_value;$/;"	m	struct:mtl::vec::detail::map_value
j0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void crs_row_init(size_type MTL_DEBUG_ARG(r), size_type& j0, size_type MTL_DEBUG_ARG(cj1), Value& dia, tag::universe_diagonal) const$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
jacobi	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^    jacobi(const Matrix& A) $/;"	f	class:itl::jacobi
jacobi	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^    jacobi(const Matrix& A) : A(A), dia_inv(num_rows(A)) $/;"	f	class:itl::jacobi
jacobi	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^class jacobi$/;"	c	namespace:itl
jacobi	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^class jacobi<mtl::mat::compressed2D<Value, Parameters> >$/;"	c	namespace:itl
join	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/path.hpp	/^std::string inline join(std::string directory, std::string file)$/;"	f	class:mtl::io::std
join	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct join$/;"	s	namespace:mtl::tag
jor	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^    jor(const Matrix& A) $/;"	f	class:itl::jor
jor	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^    jor(const Matrix& A) : A(A), dia_inv(num_rows(A)) $/;"	f	class:itl::jor
jor	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^class jor$/;"	c	namespace:itl
jor	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^class jor<mtl::mat::compressed2D<Value, Parameters> , Omega>$/;"	c	namespace:itl
key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    key_type key;$/;"	m	class:mtl::detail::base_cursor
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	typedef KeyType key_type;$/;"	t	class:utils::binary_heap
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    typedef Key          key_type;$/;"	t	class:mtl::detail::base_cursor
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef matrix_element_key<Matrix>                       key_type;$/;"	t	struct:mtl::traits::detail::matrix_element_cursor
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    typedef Key                  key_type;$/;"	t	struct:mtl::detail::strided_base_cursor
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	    typedef typename Matrix::key_type              key_type;$/;"	t	struct:mtl::traits::detail::banded_value
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef typename Matrix::key_type                  key_type;$/;"	t	struct:mtl::mat::banded_view
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef compressed_key                           key_type;$/;"	t	class:mtl::mat::compressed2D
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef const_pointer_type                key_type;$/;"	t	class:mtl::mat::dense2D
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef mtl::traits::detail::matrix_element_key<self> key_type;$/;"	t	class:mtl::mat::implicit_dense
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    typedef typename Matrix::key_type                      key_type;$/;"	t	struct:mtl::traits::detail::map_value
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::traits::detail::mapped_col
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::traits::detail::mapped_row
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef typename Matrix::key_type                  key_type;$/;"	t	struct:mtl::mat::map_view
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    typedef typename E1::key_type                key_type;$/;"	t	struct:mtl::mat::mat_mat_ele_times_expr
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef typename E1::key_type                key_type;$/;"	t	struct:mtl::mat::mat_mat_times_expr
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef base                                      key_type;$/;"	t	struct:mtl::mat::morton_dense_col_cursor
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef base                                      key_type;$/;"	t	struct:mtl::mat::morton_dense_el_cursor
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef base                                      key_type;$/;"	t	struct:mtl::mat::morton_dense_row_cursor
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_key<BitMask>          key_type;$/;"	t	class:mtl::mat::morton_dense
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    typedef multi_vector_key                         key_type;$/;"	t	class:mtl::mat::multi_vector
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::traits::detail::transposed_col
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::traits::detail::transposed_row
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef typename Matrix::key_type                  key_type;$/;"	t	struct:mtl::mat::transposed_view
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::col_in_key
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::indexer_col_ref
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::indexer_minor_ref
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::indexer_row_ref
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::major_in_key
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::matrix_const_value_ref
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::matrix_offset_const_value
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::matrix_offset_value
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::matrix_value_ref
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::offset_from_key
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::key_type   key_type;$/;"	t	struct:mtl::detail::row_in_key
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename other::key_type   key_type;$/;"	t	struct:mtl::detail::const_value_from_other
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename other::key_type   key_type;$/;"	t	struct:mtl::detail::value_from_other
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    typedef Value*                                    key_type;$/;"	t	struct:mtl::strided_dense_el_iterator
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    typedef const Value*                              key_type;$/;"	t	struct:mtl::strided_dense_el_const_iterator
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef const_pointer     key_type;$/;"	t	class:mtl::vec::dense_vector
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	    typedef typename Vector::key_type                      key_type;$/;"	t	struct:mtl::vec::detail::map_value
key_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef const_pointer                                                            key_type;$/;"	t	class:mtl::vec::strided_vector_ref
kind	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	    typedef typename find_kind<kind_map, Value>::type       kind;$/;"	t	struct:mtl::type_para::set_para
kind_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	typedef kind_map_local    kind_map;$/;"	t	namespace:mtl::type_para
kind_map_common	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	>                            kind_map_common;$/;"	t	namespace:mtl::type_para
kind_map_local	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_local.hpp	/^	typedef kind_map_common kind_map_local;$/;"	t	namespace:mtl::type_para
l	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^    size_t                l;$/;"	m	class:itl::bicgstab_ell_solver
l_2_2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct l_2_2D$/;"	s	namespace:mtl::sfunctor
label_	CS207/SDLViewer.hpp	/^  std::string label_;$/;"	m	class:CS207::SDLViewer
laplacian_setup	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/laplacian_setup.hpp	/^inline void laplacian_setup(Matrix& A, unsigned m, unsigned n)$/;"	f	namespace:mtl::mat
large_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef typename mult_assign_mode<FunctorLarge, Assign>::type                large_type;$/;"	t	struct:mtl::assign::mult_assign_mode
largest	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    std::pair<size_type, value_type> largest(size_type j) const$/;"	f	class:mtl::vec::sparse_vector
last_bit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^struct last_bit$/;"	s	namespace:mtl::dilated
last_bit_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^struct last_bit_helper {$/;"	s	namespace:mtl::dilated
last_bit_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^struct last_bit_helper<T, BitMask, true> {$/;"	s	namespace:mtl::dilated
last_print	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      int        cycle, last_print;$/;"	m	class:itl::cyclic_iteration
launch	CS207/SDLViewer.hpp	/^  void launch() {$/;"	f	class:CS207::SDLViewer
layout	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct layout {};$/;"	s	namespace:mtl::type_para
layout_flatcat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct layout_flatcat$/;"	s	namespace:mtl::traits
lazy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy.hpp	/^inline lazy_t<T> lazy(T& x) $/;"	f	namespace:mtl
lazy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy.hpp	/^inline lazy_t<const T> lazy(const T& x) $/;"	f	namespace:mtl
lazy_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy_assign.hpp	/^    lazy_assign(T& first, const U& second) : first(first), second(second) {} $/;"	f	struct:mtl::lazy_assign
lazy_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy_assign.hpp	/^struct lazy_assign$/;"	s	namespace:mtl
lazy_dot	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	inline lazy_dot(const Vector1& v1, const Vector2& v2)$/;"	f	namespace:mtl::vec
lazy_dot_real	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	inline lazy_dot_real(const Vector1& v1, const Vector2& v2)$/;"	f	namespace:mtl::vec
lazy_enable_if_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/enable_if.hpp	/^struct lazy_enable_if_matrix$/;"	s	namespace:mtl::traits
lazy_enable_if_rvec_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct lazy_enable_if_rvec_cvec_mult $/;"	s	namespace:mtl::traits
lazy_enable_if_scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/enable_if.hpp	/^struct lazy_enable_if_scalar$/;"	s	namespace:mtl::traits
lazy_enable_if_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/enable_if.hpp	/^struct lazy_enable_if_vector$/;"	s	namespace:mtl::traits
lazy_infinity_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/infinity_norm.hpp	/^	lazy_reduction<Vector, infinity_norm_functor> inline lazy_infinity_norm(const Vector& v)$/;"	f	namespace:mtl::vec
lazy_one_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/one_norm.hpp	/^	lazy_reduction<Vector, one_norm_functor> inline lazy_one_norm(const Vector& v)$/;"	f	namespace:mtl::vec
lazy_product	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/product.hpp	/^	lazy_reduction<Vector, product_functor> inline lazy_product(const Vector& v)$/;"	f	namespace:mtl::vec
lazy_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/lazy_reduction.hpp	/^    lazy_reduction(const Vector& v) : v(v) {}$/;"	f	struct:mtl::vec::lazy_reduction
lazy_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/lazy_reduction.hpp	/^struct lazy_reduction$/;"	s	namespace:mtl::vec
lazy_sum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sum.hpp	/^	lazy_reduction<Vector, sum_functor> inline lazy_sum(const Vector& v)$/;"	f	namespace:mtl::vec
lazy_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy.hpp	/^    lazy_t(T& data) : data(data) {}$/;"	f	struct:mtl::lazy_t
lazy_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy.hpp	/^struct lazy_t$/;"	s	namespace:mtl
lazy_two_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/two_norm.hpp	/^	lazy_reduction<Vector, two_norm_functor> inline lazy_two_norm(const Vector& v)$/;"	f	namespace:mtl::vec
lazy_unary_dot	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/unary_dot.hpp	/^	lazy_reduction<Vector, unary_dot_functor> inline lazy_unary_dot(const Vector& v)$/;"	f	namespace:mtl::vec
ldim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_type     ldim; $/;"	m	class:mtl::mat::dense2D
least_significant_one_bit	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/least_significant_one_bit.hpp	/^struct least_significant_one_bit$/;"	s	namespace:meta_math
least_significant_one_bit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/utility.hpp	/^Integral inline least_significant_one_bit(Integral x)$/;"	f	namespace:mtl::recursion
left_max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    explicit left_max(const Value1& v1) : v1(v1) {}$/;"	f	struct:mtl::tfunctor::left_max
left_max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^struct left_max$/;"	s	namespace:mtl::tfunctor
left_min	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    explicit left_min(const Value1& v1) : v1(v1) {}$/;"	f	struct:mtl::tfunctor::left_min
left_min	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^struct left_min$/;"	s	namespace:mtl::tfunctor
left_minus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    explicit left_minus(const Value1& v1) : v1(v1) {}$/;"	f	struct:mtl::tfunctor::left_minus
left_minus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^struct left_minus$/;"	s	namespace:mtl::tfunctor
left_plus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    explicit left_plus(const Value1& v1) : v1(v1) {}$/;"	f	struct:mtl::tfunctor::left_plus
left_plus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^struct left_plus$/;"	s	namespace:mtl::tfunctor
left_scale_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/left_scale_inplace.hpp	/^	inline Coll& left_scale_inplace(const Factor& alpha, tag::scalar, Coll& c)$/;"	f	namespace:mtl::impl
left_scale_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/left_scale_inplace.hpp	/^	inline Collection& left_scale_inplace(const Factor& alpha, tag::matrix, Collection& c)$/;"	f	namespace:mtl::impl
left_scale_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/left_scale_inplace.hpp	/^	inline left_scale_inplace(const Factor& alpha, Matrix& A)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
left_scale_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/left_scale_inplace.hpp	/^	inline left_scale_inplace(const Factor& alpha, Vector& v)$/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
length	Graph.hpp	/^	scalar length() const {$/;"	f	class:Graph::Edge
length	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^	static const std::size_t                                 length= 1;$/;"	m	struct:mtl::static_vector
length	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^	static const std::size_t                                 length= sizeof...(Values) + 1;$/;"	m	struct:mtl::static_vector
length	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/VARIADIC_TEMPLATE_CHECK.cpp	/^    static const std::size_t length= sizeof...(Values) + 1;$/;"	m	struct:static_vector	file:
less_0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^struct less_0$/;"	s	namespace:mtl::utility
less_than_comparable	CS207/Util.hpp	/^struct less_than_comparable {$/;"	s
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	static int const                                         level = 1;$/;"	m	struct:mtl::traits::detail::all_cols_in_row_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	static int const                                         level = Level;$/;"	m	struct:mtl::traits::detail::all_rows_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	static int const                            level = RangeGenerator::level;$/;"	m	struct:mtl::traits::detail::referred_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	static int const                         level = Level;$/;"	m	struct:mtl::traits::detail::sub_matrix_cursor
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	static int const                    level = 1;$/;"	m	struct:mtl::traits::detail::strided_element_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	static int const            level = 1;$/;"	m	struct:mtl::traits::detail::all_offsets_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	static int const            level = 1;$/;"	m	struct:mtl::traits::detail::all_rows_in_col_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	static int const            level = 1;$/;"	m	struct:mtl::traits::detail::dense_element_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	static int const            level = 2;$/;"	m	struct:mtl::traits::detail::matrix_element_cursor
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	static int const            level = Level;$/;"	m	struct:mtl::traits::detail::all_cols_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	static int const                                                              level = 1;$/;"	m	struct:mtl::traits::range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	static int const                                  level = 1;$/;"	m	struct:mtl::traits::range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    static const int                                     level= 1;$/;"	m	struct:mtl::mat::coordinate_col_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    static const int                                     level= 1;$/;"	m	struct:mtl::mat::coordinate_row_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    static const int                                     level= 2;$/;"	m	struct:mtl::mat::coordinate_major_cursor
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    static const int                                     level= 2;$/;"	m	struct:mtl::mat::coordinate_minor_cursor
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    static const int                                     level= 2;$/;"	m	struct:mtl::mat::coordinate_minor_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    static int const                                                              level = 1;$/;"	m	struct:mtl::traits::detail::dense2D_iterator_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	static int const                                                              level = 1;$/;"	m	struct:mtl::traits::range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    static int const                                                              level = 1;$/;"	m	struct:mtl::traits::detail::morton_dense_iterator_range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	static int const                                                 level = 1;$/;"	m	struct:mtl::traits::range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	static int const                                      level = 1;$/;"	m	struct:mtl::traits::range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	static int const                                                                       level = 1;$/;"	m	struct:mtl::traits::range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    static int const                         level = generator::level;$/;"	m	struct:mtl::traits::detail::range_transposer_impl
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^    static int const                                       level = cursor_range::level;$/;"	m	struct:mtl::traits::range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^	static int const             level = 0;$/;"	m	struct:mtl::traits::range_generator
level	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^	static int const                          level = 1;$/;"	m	struct:mtl::traits::range_generator
linear	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct linear : boost::mpl::int_<22> {};$/;"	s	namespace:mtl::complexity_classes
linear_cached	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct linear_cached : boost::mpl::int_<21> {};$/;"	s	namespace:mtl::complexity_classes
linear_operator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/linear_operator.hpp	/^struct linear_operator {};	$/;"	s	namespace:mtl::traits
linear_operator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/linear_operator.hpp	/^struct linear_operator<mtl::dense_vector<Value1, Para1>, mtl::dense_vector<Value2, Para2> >$/;"	s	namespace:mtl::traits
link_data	Mesh.hpp	/^		link_data() {std::cerr << "made empty link data " << std::endl;}$/;"	f	struct:Mesh::link_data
link_data	Mesh.hpp	/^		link_data(vert_edge dual, UserEdgeData data = UserEdgeData()) : dual_(dual), data_(data) {}$/;"	f	struct:Mesh::link_data
link_data	Mesh.hpp	/^	typedef struct link_data {$/;"	s	class:Mesh
link_data	Mesh.hpp	/^	} link_data;$/;"	t	class:Mesh	typeref:struct:Mesh::link_data
list_events	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    void list_events()$/;"	f	class:mtl::utility::papi_t
list_it_type	Graph.hpp	/^	typedef typename std::list<edge_data>::iterator list_it_type;$/;"	t	class:Graph::IncidentIterator
loc1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	    typedef typename boost::mpl::at<TypePara, location>::type               loc1;$/;"	t	struct:mtl::type_para::replace_defaults_common
loc2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^		loc1>::type                                                         loc2;		      $/;"	t	struct:mtl::type_para::replace_defaults_common
location	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct location {};$/;"	s	namespace:mtl::type_para
lock_	CS207/SDLViewer.hpp	/^  SDL_mutex* lock_;$/;"	m	class:CS207::SDLViewer
log_2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/log_2.hpp	/^struct log_2$/;"	s	namespace:meta_math
log_2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/log_2.hpp	/^template <> struct log_2<0>$/;"	s	namespace:meta_math
log_2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/log_2.hpp	/^template <> struct log_2<1>$/;"	s	namespace:meta_math
log_n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct log_n : boost::mpl::int_<4> {};$/;"	s	namespace:mtl::complexity_classes
logic_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit logic_error(const char *s= "Logic error") : std::logic_error(s) {}$/;"	f	struct:mtl::logic_error
logic_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct logic_error : public std::logic_error$/;"	s	namespace:mtl
long_indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^		              long_indices= use_long<size_type>::value;$/;"	m	class:mtl::mat::umfpack::solver
look_at_each_nonzero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/look_at_each_nonzero.hpp	/^	inline void look_at_each_nonzero(const Matrix& A, Functor& f)$/;"	f	namespace:mtl::mat
look_at_each_nonzero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/look_at_each_nonzero.hpp	/^	inline void look_at_each_nonzero(const Vector& v, Functor& f)$/;"	f	namespace:mtl::vec
look_at_each_nonzero_pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/look_at_each_nonzero.hpp	/^	inline look_at_each_nonzero_pos(const Matrix& A, Functor& f)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
look_at_each_nonzero_pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/look_at_each_nonzero.hpp	/^	inline look_at_each_nonzero_pos(const Vector& v, Functor& f)$/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
lookup_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    typedef T                          lookup_type[n_bytes][256];$/;"	t	struct:mtl::dilated::masked_dilation_tables
loop1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop1.hpp	/^struct loop1$/;"	s	namespace:meta_math
loop1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop1.hpp	/^struct loop1<Max0, Max0>$/;"	s	namespace:meta_math
loop2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^struct loop2$/;"	s	namespace:meta_math
loop2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^struct loop2<Index0, Max0, Max1, Max1>$/;"	s	namespace:meta_math
loop2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^struct loop2<Max0, Max0, Max1, Max1>$/;"	s	namespace:meta_math
loop3	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^struct loop3$/;"	s	namespace:meta_math
loop3	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^struct loop3<Index0, Max0, Index1, Max1, Max2, Max2>$/;"	s	namespace:meta_math
loop3	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^struct loop3<Index0, Max0, Max1, Max1, Max2, Max2>$/;"	s	namespace:meta_math
loop3	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^struct loop3<Max0, Max0, Max1, Max1, Max2, Max2>$/;"	s	namespace:meta_math
lower	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/lower.hpp	/^    struct lower$/;"	s	namespace:mtl::mat::traits
lower	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/lower.hpp	/^inline lower(const Matrix& A)$/;"	f	class:mtl::mat::traits::lower
lower_bound	Examples/func_params.cpp	/^int lower_bound(const T* a, int low, int high, const T& v, Comp comp = Comp()) {$/;"	f
lower_bound	Examples/func_params.cpp	/^int lower_bound(const T* a, int n, const T& v, Comp comp = Comp()) {$/;"	f
lower_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type lower_bound(Cursor const& c, size_type position) const$/;"	f	struct:mtl::traits::detail::all_cols_in_row_range_generator
lower_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type lower_bound(Cursor const& c, size_type position) const$/;"	f	struct:mtl::traits::detail::all_rows_in_col_range_generator
lower_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type lower_bound(Matrix const& c, size_type position) const$/;"	f	struct:mtl::traits::detail::all_cols_range_generator
lower_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type lower_bound(Matrix const& c, size_type position) const$/;"	f	struct:mtl::traits::detail::all_rows_range_generator
lower_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	type lower_bound(const Coll& c, size_type position)$/;"	f	struct:mtl::traits::detail::referred_range_generator
lower_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	type lower_bound(cursor_type const& cursor, size_type position) const$/;"	f	struct:mtl::traits::range_generator
lower_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	type lower_bound(cursor const& c, size_type position) const$/;"	f	struct:mtl::traits::range_generator
lower_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	type lower_bound(cursor const& c, size_type position) const$/;"	f	struct:mtl::traits::range_generator
lower_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^inline lower_bound(Coll const& c, typename Collection<Coll>::size_type position)$/;"	f	class:mtl::traits::range_generator
lower_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^inline lower_bound(Coll& c, typename Collection<Coll>::size_type position)$/;"	f	class:mtl::traits::range_generator
lower_matrix_coll_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	typedef std::vector<mtl::mat::compressed2D<value_type> > lower_matrix_coll_type;$/;"	t	class:itl::pc::imf_preconditioner
lower_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    lower_solver_t               lower_solver;$/;"	m	class:itl::pc::ic_0
lower_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    lower_solver_t              lower_solver;$/;"	m	class:itl::pc::ilu
lower_solver_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef mtl::mat::detail::lower_trisolve_t<L_type, mtl::tag::inverse_diagonal, true> lower_solver_t;$/;"	t	class:itl::pc::ic_0
lower_solver_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef mtl::mat::detail::lower_trisolve_t<L_type, mtl::tag::unit_diagonal, true>    lower_solver_t;$/;"	t	class:itl::pc::ilu
lower_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^Vector inline lower_trisolve(const Matrix& A, const Vector& v)$/;"	f	namespace:mtl::mat
lower_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^Vector inline lower_trisolve(const Matrix& A, const Vector& v, DiaTag)$/;"	f	namespace:mtl::mat
lower_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^inline void lower_trisolve(const Matrix& A, const VectorIn& v, VectorOut& w)$/;"	f	namespace:mtl::mat
lower_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^inline void lower_trisolve(const Matrix& A, const VectorIn& v, VectorOut& w, DiaTag)$/;"	f	namespace:mtl::mat
lower_trisolve_diavalue	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	Value inline lower_trisolve_diavalue(const Value& v, tag::regular_diagonal) const$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
lower_trisolve_diavalue	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	Value lower_trisolve_diavalue(const Value& v, tag::inverse_diagonal) const$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
lower_trisolve_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	lower_trisolve_t(const Matrix& A) : A(A), value_a(A), col_a(A), row_a(A)$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
lower_trisolve_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^    struct lower_trisolve_t$/;"	s	namespace:mtl::mat::detail
lp_	shortest_path.cpp	/^	int lp_;$/;"	m	struct:MyColorFunc	file:
lsb_bits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct lsb_bits$/;"	s	namespace:mtl
lsb_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct lsb_mask$/;"	s	namespace:mtl
lsb_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct lsb_mask<0>$/;"	s	namespace:mtl
lshift	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    self& lshift (Value const& val, value_shape)$/;"	f	struct:mtl::operations::update_proxy
lshift	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    self& lshift (const MatrixSrc& src, matrix_shape)$/;"	f	struct:mtl::operations::update_proxy
lu	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^void inline lu(Matrix& A, PermuationVector& P, double eps= 0)$/;"	f	namespace:mtl::mat
lu	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^void inline lu(Matrix& LU, double eps= 0)$/;"	f	namespace:mtl::mat
lu_adjoint_apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^Vector inline lu_adjoint_apply(const Matrix& LU, const PermVector& P, const Vector& b)$/;"	f	namespace:mtl::mat
lu_adjoint_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^Vector inline lu_adjoint_solve(const Matrix& A, const Vector& b, double eps= 0)$/;"	f	namespace:mtl::mat
lu_apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^Vector inline lu_apply(const Matrix& LU, const PermVector& P, const Vector& b)$/;"	f	namespace:mtl::mat
lu_f	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^Matrix inline lu_f(const Matrix& A, double eps= 0)$/;"	f	namespace:mtl::mat
lu_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/lu_matrix_type.hpp	/^struct lu_matrix_type$/;"	s	namespace:mtl::traits
lu_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/lu_matrix_type.hpp	/^struct lu_matrix_type<mat::compressed2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
lu_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^Vector inline lu_solve(const Matrix& A, const Vector& b, double eps= 0)$/;"	f	namespace:mtl::mat
lu_solve_apply	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^Vector inline lu_solve_apply(const Matrix& LU, const Vector& b)$/;"	f	namespace:mtl::mat
lu_solve_straight	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^Vector inline lu_solve_straight(const Matrix& A, const Vector& b, double eps= 0)$/;"	f	namespace:mtl::mat
lu_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^    explicit lu_solver(const Matrix& A, double eps= 0) $/;"	f	class:mtl::mat::lu_solver
lu_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^class lu_solver$/;"	c	namespace:mtl::mat
lvalue	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    value_type& lvalue(size_type row, size_type col)$/;"	f	class:mtl::mat::compressed2D
lvalue	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    ValueType& lvalue(SizeType row, SizeType col)$/;"	f	struct:mtl::mat::crtp_matrix_lvalue
lvalue	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    value_type& lvalue(size_type r, size_type c) $/;"	f	class:mtl::mat::sparse_banded
m	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^    std::size_t m, n;$/;"	m	struct:mtl::mat::identity2D
m	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^    int m, n, s;$/;"	m	struct:mtl::mat::poisson2D_dirichlet
m	mtl_test.cpp	/^	int m;$/;"	m	struct:IdentityMatrix	file:
m_compare_keys	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	KeyComparator m_compare_keys;$/;"	m	class:utils::binary_heap
m_diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	block_type* m_diagonal;$/;"	m	class:itl::pc::imf_preconditioner
m_diagonal_index	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	int* m_diagonal_index;$/;"	m	class:itl::pc::imf_preconditioner
m_elements	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    element_type* m_elements; \/\/\/< The elements of the grid, stored consecutively.$/;"	m	class:mtl::mat::element_structure
m_indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    index_type m_indices;$/;"	m	class:mtl::mat::element
m_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	GetKey m_key;$/;"	m	class:utils::binary_heap
m_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	Key m_key;$/;"	m	struct:itl::pc::heap::HeapInformation
m_last	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	ValueType m_last;$/;"	m	class:utils::binary_heap
m_left_child	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	GetLeft m_left_child;$/;"	m	class:utils::binary_heap
m_left_child	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	Element* m_left_child;$/;"	m	struct:itl::pc::heap::HeapInformation
m_levels	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	int m_levels;$/;"	m	class:itl::pc::imf_preconditioner
m_lower	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	lower_matrix_coll_type m_lower;$/;"	m	class:itl::pc::imf_preconditioner
m_nb_blocks	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	unsigned int m_nb_blocks;$/;"	m	class:itl::pc::imf_preconditioner
m_nb_vars	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	unsigned int m_nb_vars;$/;"	m	class:itl::pc::imf_preconditioner
m_neighbors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    neighbor_collection_type m_neighbors;$/;"	m	class:mtl::mat::element
m_ordering	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	index_type m_ordering;$/;"	m	class:itl::pc::imf_preconditioner
m_parent	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	GetParent m_parent;$/;"	m	class:utils::binary_heap
m_parent	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	Element* m_parent;$/;"	m	struct:itl::pc::heap::HeapInformation
m_right_child	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	GetRight m_right_child;$/;"	m	class:utils::binary_heap
m_right_child	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	Element* m_right_child;$/;"	m	struct:itl::pc::heap::HeapInformation
m_root	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	ValueType m_root;$/;"	m	class:utils::binary_heap
m_sequence_number	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    int m_sequence_number;$/;"	m	class:mtl::mat::element
m_status	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	const StatusVector& m_status;$/;"	m	struct:itl::pc::IsRemoved
m_total_elements	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    int           m_total_elements; \/\/\/< The total number of elements.$/;"	m	class:mtl::mat::element_structure
m_total_vars	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    int           m_total_vars; \/\/\/< The total number of variables.$/;"	m	class:mtl::mat::element_structure
m_upper	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	upper_matrix_coll_type m_upper;$/;"	m	class:itl::pc::imf_preconditioner
m_values	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    matrix_type m_values;$/;"	m	class:mtl::mat::element
ma	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    const matrix_type& ma;$/;"	m	struct:mtl::detail::indexer_col_ref
ma	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    const matrix_type& ma;$/;"	m	struct:mtl::detail::indexer_minor_ref
ma	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    const matrix_type& ma;$/;"	m	struct:mtl::detail::indexer_row_ref
ma	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    const matrix_type& ma;$/;"	m	struct:mtl::detail::matrix_const_value_ref
ma	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    const matrix_type& ma;$/;"	m	struct:mtl::detail::matrix_offset_const_value
ma	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_type& ma;$/;"	m	struct:mtl::detail::matrix_offset_value
ma	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_type& ma;$/;"	m	struct:mtl::detail::matrix_value_ref
magnitude_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    typedef associated_type magnitude_type;$/;"	t	struct:math::Norm
magnitude_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    typename associated_type magnitude_type;$/;"	m	struct:math::InnerProduct
magnitude_type_trait	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^struct magnitude_type_trait$/;"	s	namespace:math
magnitude_type_trait	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^struct magnitude_type_trait< std::complex<T> >$/;"	s	namespace:math
main	Examples/distance_dispatch.cpp	/^int main()$/;"	f
main	Examples/expr_template.cpp	/^int main() {$/;"	f
main	Examples/func_params.cpp	/^int main()$/;"	f
main	Examples/iterator_adaptor.cpp	/^int main() {$/;"	f
main	Examples/iterator_adaptor_boost.cpp	/^int main() {$/;"	f
main	Examples/openmp.cpp	/^int main()$/;"	f
main	Examples/proxy_example.cpp	/^int main() {$/;"	f
main	Examples/test_metrics.cpp	/^int main()$/;"	f
main	Examples/trivial_copy.cpp	/^int main()$/;"	f
main	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/AUTO_CHECK.cpp	/^int main()$/;"	f
main	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/DEFAULTIMPL_CHECK.cpp	/^int main()$/;"	f
main	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/INITLIST_CHECK.cpp	/^int main() $/;"	f
main	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/MOVE_CHECK.cpp	/^int main()$/;"	f
main	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/RANGEDFOR_CHECK.cpp	/^int main()$/;"	f
main	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/STATICASSERT_CHECK.cpp	/^int main()$/;"	f
main	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/TEMPLATE_ALIAS_CHECK.cpp	/^int main()$/;"	f
main	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/VARIADIC_TEMPLATE_CHECK.cpp	/^int main()$/;"	f
main	mass_spring.cpp	/^int main(int argc, char** argv) {$/;"	f
main	mtl_test.cpp	/^int main()$/;"	f
main	poisson.cpp	/^int main(int argc, char** argv)$/;"	f
main	primes.cpp	/^int main()$/;"	f
main	shallow_water.cpp	/^int main(int argc, char* argv[])$/;"	f
main	shortest_path.cpp	/^int main(int argc, char** argv)$/;"	f
main	subgraph.cpp	/^int main(int argc, char** argv)$/;"	f
main	test_edges.cpp	/^int main()$/;"	f
main	test_nodes.cpp	/^int main()$/;"	f
main	viewer.cpp	/^int main(int argc, char** argv)$/;"	f
major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    size_t       major;$/;"	m	struct:mtl::mat::compressed_key
major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	54;"	d
major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    size_type       major, offset, next_offset;$/;"	m	struct:mtl::mat::coordinate_major_cursor
major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/glas_tag.hpp	/^struct major {};$/;"	s	namespace:glas::tag
major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/glas_tag.hpp	16;"	d
major_	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type major_(size_type r, size_type c) const$/;"	f	struct:mtl::mat::base_matrix
major_	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type major_(size_type r, size_type, row_major) const$/;"	f	struct:mtl::mat::base_matrix
major_	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type major_(size_type, size_type c, col_major) const$/;"	f	struct:mtl::mat::base_matrix
major_	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type major_(size_type r, size_type c) const$/;"	f	struct:mtl::mat::base_sub_matrix
major_	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type major_(size_type r, size_type, row_major) const$/;"	f	struct:mtl::mat::base_sub_matrix
major_	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type major_(size_type, size_type c, col_major) const$/;"	f	struct:mtl::mat::base_sub_matrix
major_in_element_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    major_in_element_key(const matrix_type&) {} $/;"	f	struct:mtl::detail::major_in_element_key
major_in_element_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct major_in_element_key$/;"	s	namespace:mtl::detail
major_in_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    major_in_key(const matrix_type&) {} $/;"	f	struct:mtl::detail::major_in_key
major_in_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct major_in_key$/;"	s	namespace:mtl::detail
major_minor_c	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    size_pair major_minor_c(const Matrix& ma, size_type row, size_type col) const$/;"	f	struct:mtl::mat::compressed2D_indexer
major_of	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^inline major_of(const T& x)$/;"	f	class:mtl::mtl::traits
major_traversal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        struct major_traversal$/;"	s	namespace:mtl::traits::detail
major_traversal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        template <> struct major_traversal<glas::tag::col, col_major>$/;"	s	namespace:mtl::traits::detail
major_traversal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        template <> struct major_traversal<glas::tag::row, row_major>$/;"	s	namespace:mtl::traits::detail
make_compact	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    void make_compact() { make_compact(boost::is_same<typename mtl::traits::category<block_type>::type, tag::dense2D>()); }$/;"	f	class:mtl::mat::block_diagonal2D
make_compact	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    void make_compact(boost::mpl::false_) {}$/;"	f	class:mtl::mat::block_diagonal2D
make_compact	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    void make_compact(boost::mpl::true_)$/;"	f	class:mtl::mat::block_diagonal2D
make_compact	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    void make_compact()$/;"	f	class:mtl::mat::element_structure
make_dumb	Examples/distance_dispatch.cpp	/^dumb_iterator<Iter> make_dumb(const Iter& it) {$/;"	f
make_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void make_empty()$/;"	f	class:mtl::mat::compressed2D
make_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void make_empty(size_type i)$/;"	f	struct:mtl::mat::compressed2D_inserter
make_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void make_empty()$/;"	f	class:mtl::mat::coordinate2D
make_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    void make_empty()$/;"	f	class:mtl::mat::ell_matrix
make_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    void make_empty() \/\/\/< Delete all entries$/;"	f	class:mtl::mat::sparse_banded
make_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    void make_empty() { data.resize(0); indices.resize(0); }$/;"	f	class:mtl::vec::sparse_vector
make_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/make_fast_multi_vector_expr.hpp	/^inline make_fast_multi_vector_expr(const map_view<Functor, Matrix>& expr)$/;"	f	class:mtl::mat::mtl::traits::fast_multi_vector_expr
make_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/make_fast_multi_vector_expr.hpp	/^inline make_fast_multi_vector_expr(const mv_mv_minus_expr<E1, E2>& expr)$/;"	f	class:mtl::mat::mtl::traits::fast_multi_vector_expr
make_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/make_fast_multi_vector_expr.hpp	/^inline make_fast_multi_vector_expr(const mv_mv_plus_expr<E1, E2>& expr)$/;"	f	class:mtl::mat::mtl::traits::fast_multi_vector_expr
make_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/make_fast_multi_vector_expr.hpp	/^inline make_fast_multi_vector_expr(const rscaled_view<Value1, Matrix>& expr)$/;"	f	class:mtl::mat::mtl::traits::fast_multi_vector_expr
make_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/make_fast_multi_vector_expr.hpp	/^inline make_fast_multi_vector_expr(const scaled_view<Value1, Matrix>& expr)$/;"	f	class:mtl::mat::mtl::traits::fast_multi_vector_expr
make_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    inline friend Vector& make_fast_multi_vector_expr(self& mv) { assert(mv.master); return *mv.master; }$/;"	f	class:mtl::mat::multi_vector
make_fast_multi_vector_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    inline friend const Vector& make_fast_multi_vector_expr(const self& mv) { assert(mv.master); return *mv.master; }$/;"	f	class:mtl::mat::multi_vector
make_filtered	subgraph.cpp	/^filter_iterator<Pred,Iter> make_filtered(const Iter& it, const Iter& end,$/;"	f
make_heat	CS207/Color.hpp	/^  static Color make_heat(float v) {$/;"	f	struct:CS207::Color
make_hsv	CS207/Color.hpp	/^  static Color make_hsv(float h, float s, float v) {$/;"	f	struct:CS207::Color
make_in_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    explicit make_in_copy_or_reference(const Source& src) : value(src) {}$/;"	f	struct:mtl::make_in_copy_or_reference
make_in_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    explicit make_in_copy_or_reference(const Target& src) : value(src) {}$/;"	f	struct:mtl::make_in_copy_or_reference
make_in_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^struct make_in_copy_or_reference$/;"	s	namespace:mtl
make_in_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^struct make_in_copy_or_reference<Target, Target>$/;"	s	namespace:mtl
make_in_out_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    explicit make_in_out_copy_or_reference(Source& src) : value(src), src(src) {}$/;"	f	struct:mtl::make_in_out_copy_or_reference
make_in_out_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    explicit make_in_out_copy_or_reference(Target& src) : value(src) {}$/;"	f	struct:mtl::make_in_out_copy_or_reference
make_in_out_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^struct make_in_out_copy_or_reference$/;"	s	namespace:mtl
make_in_out_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^struct make_in_out_copy_or_reference<Target, Target>$/;"	s	namespace:mtl
make_out_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    explicit make_out_copy_or_reference(Source& src) : src(src) {}$/;"	f	struct:mtl::make_out_copy_or_reference
make_out_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    explicit make_out_copy_or_reference(Target& src) : value(src) {}$/;"	f	struct:mtl::make_out_copy_or_reference
make_out_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^struct make_out_copy_or_reference$/;"	s	namespace:mtl
make_out_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^struct make_out_copy_or_reference<Target, Target>$/;"	s	namespace:mtl
make_rgb	CS207/Color.hpp	/^  static Color make_rgb(float r, float g, float b) {$/;"	f	struct:CS207::Color
make_sparse	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	/^inline mat::compressed2D<double> make_sparse(std::size_t m, std::size_t n)$/;"	f	namespace:mtl::vec
make_sparse	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	/^make_sparse(const SizeVector1& rows, const SizeVector2& cols, const ValueVector& values)$/;"	f	namespace:mtl::vec
make_sparse	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	/^make_sparse(const SizeVector1& rows, const SizeVector2& cols, const ValueVector& values,$/;"	f	namespace:mtl::vec
make_sparse_trait	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	/^struct make_sparse_trait$/;"	s	namespace:mtl::vec
make_symmetric_pattern	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void make_symmetric_pattern()$/;"	f	class:mtl::mat::compressed2D
make_tag_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_tag_vector.hpp	/^    make_tag_vector(std::size_t n, const Range& r)$/;"	f	namespace:mtl
malloc_address	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^	char*                                     malloc_address;$/;"	m	struct:mtl::detail::alignment_helper
map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^        Mapper&         map;$/;"	m	struct:mtl::mat::mapped_inserter::bracket_proxy
map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^    Mapper&     map;$/;"	m	class:mtl::mat::mapped_inserter
map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^    PropertyMap            map;$/;"	m	struct:mtl::utilities::const_iterator_adaptor
map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^    PropertyMap      map;$/;"	m	struct:mtl::utilities::iterator_adaptor
map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    PropertyMap            map;$/;"	m	struct:mtl::utilities::detail::const_iterator_proxy
map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    PropertyMap           map;$/;"	m	struct:mtl::utilities::detail::iterator_proxy
map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^    Mapper&     map;$/;"	m	class:mtl::vec::mapped_inserter
map_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    mtl::mat::map_view<Functor, Matrix> const&        map_matrix;$/;"	m	class:mtl::traits::detail::map_value::mtl::mat
map_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef std::map<size_pair, value_type>   map_type;$/;"	t	struct:mtl::mat::compressed2D_inserter
map_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename mtl::traits::const_value<Matrix>::type  map_type;$/;"	t	struct:mtl::mat::morton_dense_col_const_iterator
map_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename mtl::traits::const_value<Matrix>::type  map_type;$/;"	t	struct:mtl::mat::morton_dense_row_const_iterator
map_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename mtl::traits::value<Matrix>::type   map_type;$/;"	t	struct:mtl::mat::morton_dense_col_iterator
map_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename mtl::traits::value<Matrix>::type   map_type;$/;"	t	struct:mtl::mat::morton_dense_row_iterator
map_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^    typedef typename traits::const_value<Matrix>::type     map_type;$/;"	t	struct:mtl::traits::range_generator
map_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    map_value(mtl::mat::map_view<Functor, Matrix> const& map_matrix) $/;"	f	struct:mtl::traits::detail::map_value
map_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	struct map_value$/;"	s	namespace:mtl::traits::detail
map_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	    map_value(vec::map_view<Functor, Vector> const& map_vector) $/;"	f	struct:mtl::vec::detail::map_value
map_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	struct map_value$/;"	s	namespace:mtl::vec::detail
map_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    struct map_vector<Functor, mtl::mat::multi_vector<Vector> >$/;"	s	namespace:mtl::mat::detail
map_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    template <typename Functor, typename Matrix> struct map_vector {}; \/\/ not defined in general$/;"	s	namespace:mtl::mat::detail
map_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	    vec::map_view<Functor, Vector> const&   map_vector;$/;"	m	class:mtl::vec::detail::map_value::vec
map_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    map_view (const Functor& functor, boost::shared_ptr<Matrix> p) $/;"	f	struct:mtl::mat::map_view
map_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    map_view (const Functor& functor, const other& ref) : functor(functor), ref(ref) {}$/;"	f	struct:mtl::mat::map_view
map_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^  map_view (const self& that) : functor(that.functor), ref(that.ref) { assert(that.my_copy.use_count() == 0); }$/;"	f	struct:mtl::mat::map_view
map_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^  map_view (self&& that) : functor(that.functor), my_copy(std::move(that.my_copy)), ref(that.ref) {}$/;"	f	struct:mtl::mat::map_view
map_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct map_view $/;"	s	namespace:mtl::mat
map_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    map_view (const Functor& functor, boost::shared_ptr<Vector> p) $/;"	f	struct:mtl::vec::map_view
map_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    map_view (const Functor& functor, const other& ref) $/;"	f	struct:mtl::vec::map_view
map_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^  map_view (const self& that) : functor(that.functor), ref(that.ref) { assert(that.my_copy.use_count() == 0); }$/;"	f	struct:mtl::vec::map_view
map_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^  map_view (self&& that) : functor(that.functor), my_copy(std::move(that.my_copy)), ref(that.ref) {}$/;"	f	struct:mtl::vec::map_view
map_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^struct map_view $/;"	s	namespace:mtl::vec
mapped_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    mapped_col(const mtl::mat::banded_view<Matrix>& view) : its_col(view.ref) {}$/;"	f	struct:mtl::traits::detail::mapped_col
mapped_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    mapped_col(const mtl::mat::map_view<Functor, Matrix>& view) : its_col(view.ref) {}$/;"	f	struct:mtl::traits::detail::mapped_col
mapped_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^        struct mapped_col$/;"	s	namespace:mtl::traits::detail
mapped_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^    mapped_inserter(matrix_type& A, Mapper& map, size_type slot_size= 0)$/;"	f	class:mtl::mat::mapped_inserter
mapped_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^class mapped_inserter$/;"	c	namespace:mtl::mat
mapped_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^    mapped_inserter(BaseInserter& A, Mapper& map)$/;"	f	class:mtl::vec::mapped_inserter
mapped_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^class mapped_inserter$/;"	c	namespace:mtl::vec
mapped_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^		explicit mapped_row(const mtl::mat::banded_view<Matrix>& view) : its_row(view.ref) {}$/;"	f	struct:mtl::traits::detail::mapped_row
mapped_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^		explicit mapped_row(const mtl::mat::map_view<Functor, Matrix>& view) : its_row(view.ref) {}$/;"	f	struct:mtl::traits::detail::mapped_row
mapped_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	struct mapped_row$/;"	s	namespace:mtl::traits::detail
mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    const static T                     mask= Mask;$/;"	m	struct:mtl::dilated::masked_dilation_tables
mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^inline T mask(T const& value)$/;"	f	namespace:mtl::dilated
mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^inline T mask(T const& value, masked_dilation_tables<T, Mask> tables)$/;"	f	namespace:mtl::dilated
mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    const static std::size_t                  mask= BitMask;$/;"	m	class:mtl::mat::morton_dense
mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    static const std::size_t                          mask= Matrix::mask;$/;"	m	struct:mtl::mat::morton_dense_col_const_iterator
mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    static const std::size_t                          mask= Matrix::mask;$/;"	m	struct:mtl::mat::morton_dense_col_iterator
mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    static const std::size_t                          mask= Matrix::mask;$/;"	m	struct:mtl::mat::morton_dense_row_const_iterator
mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    static const std::size_t                          mask= Matrix::mask;$/;"	m	struct:mtl::mat::morton_dense_row_iterator
mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct mask {};$/;"	s	namespace:mtl
mask_lut	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    lookup_type& mask_lut()   { return *my_mask_lut; }$/;"	f	struct:mtl::dilated::masked_dilation_tables
mask_piece	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    mp_type& mask_piece()     { return *my_mask_piece; }$/;"	f	struct:mtl::dilated::masked_dilation_tables
mask_shift_table	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    it_type& mask_shift_table() { return *my_mask_shift_table; }$/;"	f	struct:mtl::dilated::masked_dilation_tables
mask_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    it_type& mask_size()      {	return *my_mask_size;  }$/;"	f	struct:mtl::dilated::masked_dilation_tables
masked_dilation_tables	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    masked_dilation_tables()$/;"	f	struct:mtl::dilated::masked_dilation_tables
masked_dilation_tables	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^struct masked_dilation_tables$/;"	s	namespace:mtl::dilated
masking	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^struct masking$/;"	s	namespace:mtl::dilated
masking	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^struct masking<T, BitMask, false>$/;"	s	namespace:mtl::dilated
masking	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct masking {};$/;"	s	namespace:mtl::type_para
mass	mass_spring.cpp	/^  double mass;     \/\/< Node mass$/;"	m	struct:NodeData	file:
master	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    Vector*                                                                master;$/;"	m	class:mtl::mat::multi_vector
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/matrix_algorithms.hpp	/^namespace mtl {  namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_el_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/bands.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^  namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^namespace mtl {  namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/diagonal_setup.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_array.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hessian_setup.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/laplacian_setup.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/lower.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/make_fast_multi_vector_expr.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^namespace mtl { namespace mat { namespace detail {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_expr.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_asgn_expr.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^namespace mtl {namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_negate_expr.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/operators.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/parameter.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/permutation.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder_matrix_rows.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder_ref.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_lower.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_upper.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/upper.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/view_ref.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjoint.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_each_nonzero.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/crop.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cuppen.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/diagonal.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue_symmetric.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry1D.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry_similar.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/frobenius_norm.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hermitian.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hessenberg.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/infinity_norm.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/invert_diagonal.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/left_scale_inplace.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/look_at_each_nonzero.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_abs_pos.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/merge_complex_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_specialize.hpp	/^namespace mtl { namespace mat {namespace detail {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/one_norm.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/ones.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_size.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rank_one_update.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rank_two_update.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/resource.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^    namespace mat { $/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size1D.hpp	/^    namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/solve.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sub_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/svd.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/swap_row.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trace.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^template <typename Value> struct mat : nonscal {};$/;"	s	namespace:mtl::ashape
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^namespace mtl { namespace mat {$/;"	n	namespace:mtl
mat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^namespace mat {$/;"	n	namespace:mtl
mat_cvec_flatcat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct mat_cvec_flatcat$/;"	s	namespace:mtl::traits
mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void mat_cvec_mult(const HermitianMatrix& A, const VectorIn& v, VectorOut& w, Assign, tag::flat<tag::hermitian_multi_vector>)$/;"	f	namespace:mtl::mat
mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void mat_cvec_mult(const Matrix& A, const VectorIn& v, VectorOut& w, Assign, tag::flat<tag::dense>)$/;"	f	namespace:mtl::mat
mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void mat_cvec_mult(const Matrix& A, const VectorIn& v, VectorOut& w, Assign, tag::flat<tag::element_structure>)$/;"	f	namespace:mtl::mat
mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void mat_cvec_mult(const Matrix& A, const VectorIn& v, VectorOut& w, Assign, tag::flat<tag::multi_vector>)$/;"	f	namespace:mtl::mat
mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void mat_cvec_mult(const Matrix& A, const VectorIn& v, VectorOut& w, Assign, tag::flat<tag::sparse>)$/;"	f	namespace:mtl::mat
mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void mat_cvec_mult(const TransposedMatrix& A, const VectorIn& v, VectorOut& w, Assign, tag::flat<tag::transposed_multi_vector>)$/;"	f	namespace:mtl::mat
mat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mat_cvec_mult {};$/;"	s	namespace:mtl::ashape
mat_cvec_multiplier	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct mat_cvec_multiplier$/;"	s	namespace:mtl::tag
mat_cvec_multiplier	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^    mat_cvec_multiplier(const Matrix& A, const VectorIn& v) : A(A), v(v) {}$/;"	f	struct:mtl::vec::mat_cvec_multiplier
mat_cvec_multiplier	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^struct mat_cvec_multiplier$/;"	s	namespace:mtl::vec
mat_cvec_times_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_cvec_times_expr.hpp	/^    mat_cvec_times_expr( E1 const& matrix, E2 const& vector ) : base(matrix, vector)  {}$/;"	f	struct:mtl::mat_cvec_times_expr
mat_cvec_times_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_cvec_times_expr.hpp	/^struct mat_cvec_times_expr $/;"	s	namespace:mtl
mat_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_expr.hpp	/^struct mat_expr$/;"	s	namespace:mtl::mat
mat_mat_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_asgn_expr.hpp	/^struct mat_mat_asgn_expr {};$/;"	s	namespace:mtl::mat
mat_mat_ele_times_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    mat_mat_ele_times_expr( E1 const& v1, E2 const& v2 )$/;"	f	struct:mtl::mat::mat_mat_ele_times_expr
mat_mat_ele_times_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^struct mat_mat_ele_times_expr $/;"	s	namespace:mtl::mat
mat_mat_minus_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    mat_mat_minus_expr( E1 const& v1, E2 const& v2 )$/;"	f	struct:mtl::mat::mat_mat_minus_expr
mat_mat_minus_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^struct mat_mat_minus_expr $/;"	s	namespace:mtl::mat
mat_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void mat_mat_mult(const MatrixA& A, const MatrixB& b, MatrixC& c, Assign, tag::flat<tag::dense>, tag::flat<tag::dense>, tag::flat<tag::dense>)$/;"	f	namespace:mtl::mat
mat_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void mat_mat_mult(const MatrixA& A, const MatrixB& b, MatrixC& c, Assign, tag::flat<tag::dense>, tag::flat<tag::dense>, tag::flat<tag::sparse>)$/;"	f	namespace:mtl::mat
mat_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void mat_mat_mult(const MatrixA& A, const MatrixB& b, MatrixC& c, Assign, tag::flat<tag::dense>, tag::flat<tag::sparse>, tag::flat<tag::dense>)$/;"	f	namespace:mtl::mat
mat_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void mat_mat_mult(const MatrixA& A, const MatrixB& b, MatrixC& c, Assign, tag::flat<tag::dense>, tag::flat<tag::sparse>, tag::flat<tag::sparse>)$/;"	f	namespace:mtl::mat
mat_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void mat_mat_mult(const MatrixA& A, const MatrixB& b, MatrixC& c, Assign, tag::flat<tag::sparse>, tag::flat<tag::dense>, tag::flat<tag::dense>)$/;"	f	namespace:mtl::mat
mat_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void mat_mat_mult(const MatrixA& A, const MatrixB& b, MatrixC& c, Assign, tag::flat<tag::sparse>, tag::flat<tag::dense>, tag::flat<tag::sparse>)$/;"	f	namespace:mtl::mat
mat_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void mat_mat_mult(const MatrixA& A, const MatrixB& b, MatrixC& c, Assign, tag::flat<tag::sparse>, tag::flat<tag::sparse>, tag::flat<tag::dense>)$/;"	f	namespace:mtl::mat
mat_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void mat_mat_mult(const MatrixA& A, const MatrixB& b, MatrixC& c, Assign, tag::flat<tag::sparse>, tag::flat<tag::sparse>, tag::flat<tag::sparse>)$/;"	f	namespace:mtl::mat
mat_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mat_mat_mult {};$/;"	s	namespace:mtl::ashape
mat_mat_op_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    mat_mat_op_expr( first_argument_type const& v1, second_argument_type const& v2 )$/;"	f	struct:mtl::mat::mat_mat_op_expr
mat_mat_op_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^struct mat_mat_op_expr$/;"	s	namespace:mtl::mat
mat_mat_plus_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    mat_mat_plus_expr( E1 const& v1, E2 const& v2 )$/;"	f	struct:mtl::mat::mat_mat_plus_expr
mat_mat_plus_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^struct mat_mat_plus_expr $/;"	s	namespace:mtl::mat
mat_mat_times_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    mat_mat_times_expr( E1 const& v1, E2 const& v2 )$/;"	f	struct:mtl::mat::mat_mat_times_expr
mat_mat_times_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^struct mat_mat_times_expr $/;"	s	namespace:mtl::mat
mat_scal_div	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mat_scal_div {};$/;"	s	namespace:mtl::ashape
mat_scal_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mat_scal_mult {};$/;"	s	namespace:mtl::ashape
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/accumulate.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concept_maps.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/concepts.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/intrinsic_concept_maps.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/inverse.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/linear_operator.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/new_concepts.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/power.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^namespace math {  $/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/arprec.hpp	/^namespace math {$/;"	n
math	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^namespace math {$/;"	n
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    matrix_type&         matrix;$/;"	m	struct:mtl::detail::trivial_inserter
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    matrix_type matrix;$/;"	m	struct:mtl::mat::umfpack::matrix_copy
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    compressed2D<Elt, Parameters> const& matrix;$/;"	m	struct:mtl::mat::compressed_el_cursor
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    compressed2D<Elt, Parameters>&      matrix;$/;"	m	struct:mtl::mat::compressed2D_inserter
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    mtl::mat::compressed2D<Elt, Parameters> const& matrix;$/;"	m	class:mtl::mat::compressed_minor_cursor::mtl::mat
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    matrix_type&         matrix;$/;"	m	struct:mtl::mat::coordinate2D_inserter
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^	Matrix&        matrix;$/;"	m	struct:mtl::mat::crtp_matrix_assign::scalar_assign
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	typedef dense2D<Value, Parameters>                                            matrix;$/;"	t	struct:mtl::traits::range_generator
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_matrix.hpp	/^    const Matrix&  matrix;$/;"	m	struct:mtl::mat::element_matrix_t
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	typedef morton_dense<Elt, BitMask, Parameters>                   matrix;$/;"	t	struct:mtl::traits::range_generator
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	Ref         matrix;$/;"	m	struct:mtl::operations::bracket_proxy
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	Ref         matrix;$/;"	m	struct:mtl::operations::range_bracket_proxy
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	Ref         matrix;$/;"	m	struct:mtl::operations::set_bracket_proxy
matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct matrix : virtual collection {};$/;"	s	namespace:mtl::tag
matrix_compose_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^struct matrix_compose_view$/;"	s	namespace:mtl::traits
matrix_compose_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^struct matrix_compose_view<0, Matrix>$/;"	s	namespace:mtl::traits
matrix_compose_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^struct matrix_compose_view<1, Matrix>$/;"	s	namespace:mtl::traits
matrix_const_value_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_const_value_ref(const matrix_type& ma) : ma(ma) {} $/;"	f	struct:mtl::detail::matrix_const_value_ref
matrix_const_value_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct matrix_const_value_ref$/;"	s	namespace:mtl::detail
matrix_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^	matrix_container() : Ap(0) {} $/;"	f	struct:itl::pc::sub_matrix_pc::matrix_container
matrix_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^	matrix_container(const tag_type& tags, const Matrix& src)$/;"	f	struct:itl::pc::sub_matrix_pc::matrix_container
matrix_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    struct matrix_container$/;"	s	class:itl::pc::sub_matrix_pc
matrix_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    matrix_copy(const in_matrix_type& A) : matrix(A) {}$/;"	f	struct:mtl::mat::umfpack::matrix_copy
matrix_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	struct matrix_copy {};$/;"	s	namespace:mtl::mat::umfpack
matrix_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	struct matrix_copy<compressed2D<Value, Parameters>, Value, Orientation>$/;"	s	namespace:mtl::mat::umfpack
matrix_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void matrix_copy(const MatrixSrc& src, MatrixDest& dest)$/;"	f	namespace:mtl
matrix_copy_ele_times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void matrix_copy_ele_times(const MatrixSrc& src, MatrixDest& dest)$/;"	f	namespace:mtl
matrix_copy_minus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void matrix_copy_minus(const MatrixSrc& src, MatrixDest& dest)$/;"	f	namespace:mtl
matrix_copy_plus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void matrix_copy_plus(const MatrixSrc& src, MatrixDest& dest)$/;"	f	namespace:mtl
matrix_default_density	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct matrix_default_density$/;"	s	namespace:mtl::type_para
matrix_density_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct matrix_density_generator$/;"	s	namespace:mtl::type_para
matrix_density_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct matrix_density_generator<Value, sparse, TypePara, MatrixPara>$/;"	s	namespace:mtl::type_para
matrix_element_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	matrix_element_cursor(Matrix const& ref, size_type r, size_type c) : ref(ref)$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
matrix_element_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct matrix_element_cursor$/;"	s	namespace:mtl::traits::detail
matrix_element_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	matrix_element_key(Matrix const& ref, size_type r, size_type c) : ref(ref)$/;"	f	struct:mtl::traits::detail::matrix_element_key
matrix_element_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct matrix_element_key$/;"	s	namespace:mtl::traits::detail
matrix_file	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_file.hpp	/^    explicit matrix_file(const char* fname) : fname(fname) {}$/;"	f	class:mtl::io::matrix_file
matrix_file	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_file.hpp	/^    explicit matrix_file(const std::string& fname) : fname(fname) {}$/;"	f	class:mtl::io::matrix_file
matrix_file	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_file.hpp	/^class matrix_file$/;"	c	namespace:mtl::io
matrix_market	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^	typedef matrix_file<matrix_market_istream, matrix_market_ostream> matrix_market;$/;"	t	namespace:mtl::io
matrix_market_istream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    explicit matrix_market_istream(const char* p) : new_stream(new std::ifstream(p)), my_stream(*new_stream) { check_stream(p); }$/;"	f	class:mtl::io::matrix_market_istream
matrix_market_istream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    explicit matrix_market_istream(const std::string& s) : new_stream(new std::ifstream(s.c_str())), my_stream(*new_stream) { check_stream(s); }$/;"	f	class:mtl::io::matrix_market_istream
matrix_market_istream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    explicit matrix_market_istream(std::istream& s= std::cin) : new_stream(0), my_stream(s) { check_stream(); }$/;"	f	class:mtl::io::matrix_market_istream
matrix_market_istream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^class matrix_market_istream$/;"	c	namespace:mtl::io
matrix_market_ostream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    explicit matrix_market_ostream(const char* p) : new_stream(new std::ofstream(p)), my_stream(*new_stream) {}$/;"	f	class:mtl::io::matrix_market_ostream
matrix_market_ostream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    explicit matrix_market_ostream(const std::string& s) : new_stream(new std::ofstream(s.c_str())), my_stream(*new_stream) {}$/;"	f	class:mtl::io::matrix_market_ostream
matrix_market_ostream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    explicit matrix_market_ostream(std::ostream& s= std::cout) : new_stream(0), my_stream(s) {}$/;"	f	class:mtl::io::matrix_market_ostream
matrix_market_ostream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^class matrix_market_ostream $/;"	c	namespace:mtl::io
matrix_not_square	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit matrix_not_square(const char *s= "Matrix must be square for this operation.")$/;"	f	struct:mtl::matrix_not_square
matrix_not_square	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct matrix_not_square : public domain_error$/;"	s	namespace:mtl
matrix_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^compressed2D_inserter<Elt, Parameters, Updater>::matrix_offset(size_pair mm) const$/;"	f	class:mtl::mat::compressed2D_inserter
matrix_offset_const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_offset_const_value(const matrix_type& ma) : ma(ma) {} $/;"	f	struct:mtl::detail::matrix_offset_const_value
matrix_offset_const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct matrix_offset_const_value$/;"	s	namespace:mtl::detail
matrix_offset_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_offset_value(matrix_type& ma) : ma(ma) {} $/;"	f	struct:mtl::detail::matrix_offset_value
matrix_offset_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct matrix_offset_value$/;"	s	namespace:mtl::detail
matrix_parameter_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct matrix_parameter_generator$/;"	s	namespace:mtl::type_para
matrix_parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    typedef typename matrix_parameter_generator<TypePara>::type  matrix_parameters;$/;"	t	struct:mtl::type_para::matrix_type_generator
matrix_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef const coordinate2D<Value, Parameters>&       matrix_ref_type;$/;"	t	struct:mtl::mat::coordinate_col_range_generator
matrix_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef const coordinate2D<Value, Parameters>&       matrix_ref_type;$/;"	t	struct:mtl::mat::coordinate_major_cursor
matrix_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef const coordinate2D<Value, Parameters>&       matrix_ref_type;$/;"	t	struct:mtl::mat::coordinate_minor_cursor
matrix_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef const coordinate2D<Value, Parameters>&       matrix_ref_type;$/;"	t	struct:mtl::mat::coordinate_row_range_generator
matrix_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef const mtl::mat::coordinate2D<Value, Parameters>&       matrix_ref_type;$/;"	t	struct:mtl::detail::coordinate2D_col
matrix_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef const mtl::mat::coordinate2D<Value, Parameters>&       matrix_ref_type;$/;"	t	struct:mtl::detail::coordinate2D_const_value
matrix_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef const mtl::mat::coordinate2D<Value, Parameters>&       matrix_ref_type;$/;"	t	struct:mtl::detail::coordinate2D_row
matrix_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef const mtl::mat::sparse_banded<Value, Parameters>&       matrix_ref_type;$/;"	t	struct:mtl::detail::sparse_banded_const_value
matrix_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef const mtl::mat::sparse_banded<Value, Parameters>&  matrix_ref_type;$/;"	t	struct:mtl::detail::sparse_banded_col
matrix_ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef const mtl::mat::sparse_banded<Value, Parameters>&  matrix_ref_type;$/;"	t	struct:mtl::detail::sparse_banded_row
matrix_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    typedef typename mtl::ashape::ashape<matrix_type>::type              matrix_shape;$/;"	t	struct:mtl::operations::update_proxy
matrix_singular	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit matrix_singular(const char *s= "Matrix singular in solver.")$/;"	f	struct:mtl::matrix_singular
matrix_singular	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct matrix_singular : public domain_error$/;"	s	namespace:mtl
matrix_status_line	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void matrix_status_line(const Matrix& A) const$/;"	f	class:mtl::io::matrix_market_ostream
matrix_too_small	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit matrix_too_small(const char *s= "Matrix is too small for certain algorithms.")$/;"	f	struct:mtl::matrix_too_small
matrix_too_small	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct matrix_too_small : public domain_error$/;"	s	namespace:mtl
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^	typedef associated_type matrix_type;$/;"	t	struct:mtl::MatrixInserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    typedef Matrix                                      matrix_type;$/;"	t	struct:mtl::detail::trivial_inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef compressed2D<value_type, Parameters>      matrix_type;$/;"	t	class:mtl::mat::umfpack::solver
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef compressed2D<value_type, parameters<col_major> > matrix_type;$/;"	t	struct:mtl::mat::umfpack::matrix_copy
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef compressed2D<Elt, Parameters>                                         matrix_type;$/;"	t	struct:mtl::traits::range_generator
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef compressed2D<Elt, Parameters>     matrix_type;$/;"	t	struct:mtl::mat::compressed2D_inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef Matrix                                      matrix_type;$/;"	t	struct:mtl::mat::coordinate2D_inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    typedef Matrix                                                                matrix_type;$/;"	t	struct:mtl::traits::detail::dense2D_iterator_range_generator
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        typedef dense2D<Value, Parameters>      matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        typedef mtl::mat::dense2D<Value, Parameters>  matrix_type;$/;"	t	struct:math::identity_t
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    typedef mtl::mat::dense2D<value_type> matrix_type;$/;"	t	class:mtl::mat::element
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef ell_matrix<Value, Parameters>     matrix_type;$/;"	t	struct:mtl::mat::ell_matrix_inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef compressed2D<Value, Parameters>                    matrix_type;$/;"	t	struct:mtl::mat::inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef coordinate2D<Value, Parameters>                                  matrix_type;$/;"	t	struct:mtl::mat::inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef ell_matrix<Value, Parameters>                    matrix_type;$/;"	t	struct:mtl::mat::inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef sparse_banded<Value, Parameters>                                 matrix_type;$/;"	t	struct:mtl::mat::inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^    typedef typename BaseInserter::matrix_type              matrix_type;$/;"	t	class:mtl::mat::mapped_inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    typedef Matrix                                                                matrix_type;$/;"	t	struct:mtl::traits::detail::morton_dense_iterator_range_generator
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^        typedef morton_dense<Value, BitMask, Parameters>    matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    typedef typename BaseInserter::matrix_type              matrix_type;$/;"	t	class:mtl::mat::shifted_inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef mtl::mat::sparse_banded<Value, Parameters> matrix_type;$/;"	t	struct:mtl::mat::sparse_banded_cursor
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef mtl::mat::sparse_banded<Value, Parameters> matrix_type;$/;"	t	struct:mtl::mat::sparse_banded_key
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef sparse_banded<Value, Parameters>                                 matrix_type;$/;"	t	struct:mtl::mat::sparse_banded_inserter
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef transposed_view<Matrix>                                               matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^    typedef typename mtl::traits::lu_matrix_type<Matrix>::type            matrix_type;$/;"	t	class:mtl::mat::lu_solver
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    typedef typename Inserter::matrix_type                               matrix_type;$/;"	t	struct:mtl::operations::update_proxy
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    typedef Matrix                                                matrix_type;$/;"	t	struct:mtl::mat::recursator
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^    typedef typename boost::remove_reference<typename matrix_compose_view<Code & 1, Matrix>::type>::type matrix_type;$/;"	t	struct:mtl::traits::matrix_compose_view
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    typedef mat::dense2D<double>  matrix_type;$/;"	t	struct:mtl::traits::eval
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                        matrix_type;$/;"	t	struct:mtl::detail::row_in_element_key
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::col_in_element_key
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::col_in_key
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::const_value_in_element_key
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::indexer_col_ref
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::indexer_minor_ref
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::indexer_row_ref
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::major_in_element_key
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::major_in_key
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::matrix_const_value_ref
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::matrix_offset_const_value
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::matrix_offset_value
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::matrix_value_ref
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::offset_from_key
matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef Matrix                      matrix_type;$/;"	t	struct:mtl::detail::row_in_key
matrix_type_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct matrix_type_generator$/;"	s	namespace:mtl::type_para
matrix_value_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    matrix_value_ref(matrix_type& ma) : ma(ma) {} $/;"	f	struct:mtl::detail::matrix_value_ref
matrix_value_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct matrix_value_ref$/;"	s	namespace:mtl::detail
matrix_value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    typedef typename Collection<Matrix>::value_type               matrix_value_type;$/;"	t	struct:mtl::mat::recursator
max	BoundingBox.hpp	/^  const point_type& max() const {$/;"	f	class:BoundingBox
max	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct max : public std::binary_function<Element, Element, Element>$/;"	s	namespace:math
max	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/max.hpp	/^struct max$/;"	s	namespace:meta_math
max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max.hpp	/^	inline max(const Vector& vector, tag::vector)$/;"	f	class:mtl::vec::impl::Collection
max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max.hpp	/^inline max(const Value& value)$/;"	f	class:mtl::vec::Collection
max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_size.hpp	/^	int max;$/;"	m	struct:mtl::print_size_max
max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	/^inline max(const E1& e1, const vec_expr<E2>& e2)$/;"	f	class:mtl::vec::mtl::traits::enable_if_scalar
max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	/^inline max(const vec_expr<E1>& e1, const E2& e2)$/;"	f	class:mtl::vec::mtl::traits::enable_if_scalar
maxIteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    size_type ncols, nrows, maxIteration;$/;"	m	class:mtl::mat::eigenvalue_solver
max_	BoundingBox.hpp	/^  point_type max_;$/;"	m	class:BoundingBox
max_abs_pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_abs_pos.hpp	/^    inline max_abs_pos(const Matrix& A)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
max_abs_pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_abs_pos.hpp	/^    inline max_abs_pos(const Vector& v)$/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
max_dim_splitter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    explicit max_dim_splitter(Matrix const& matrix) $/;"	f	struct:mtl::recursion::max_dim_splitter
max_dim_splitter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^struct max_dim_splitter$/;"	s	namespace:mtl::recursion
max_dim_test	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    max_dim_test(std::size_t comp) : comp(comp) {}$/;"	f	struct:mtl::recursion::max_dim_test
max_dim_test	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^struct max_dim_test$/;"	s	namespace:mtl::recursion
max_dim_test_static	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^struct max_dim_test_static$/;"	s	namespace:mtl::recursion
max_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^struct max_functor$/;"	s	namespace:mtl::vec
max_ind	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type           nrows, ncols, nb_blocks, my_nnz, min_ind, max_ind;$/;"	m	class:mtl::mat::block_diagonal2D
max_index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type max_index() const { return max_ind; }$/;"	f	class:mtl::mat::block_diagonal2D
max_iter	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    int          max_iter;$/;"	m	class:itl::basic_iteration
max_iterations	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    int max_iterations() const { return max_iter; }$/;"	f	class:itl::basic_iteration
max_of_sums	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_of_sums.hpp	/^inline max_of_sums(const Matrix& matrix, bool aligned, MinorIndex minor_index, unsigned dim2)$/;"	f	class:mtl::impl::RealMagnitude
max_pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^	inline max_pos(const Vector& v)$/;"	f	class:mtl::vec::max_pos_functor
max_pos_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^	    max_pos_functor() $/;"	f	struct:mtl::vec::max_pos_functor
max_pos_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^	struct max_pos_functor$/;"	s	namespace:mtl::vec
max_prime_compare	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^    struct max_prime_compare$/;"	s	namespace:meta_math::impl
max_size	Point.hpp	/^  static constexpr size_type max_size() { return 3; }$/;"	f	struct:Point
maybe	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^    maybe(Value v) : base(v, true) {}$/;"	f	struct:mtl::utilities::maybe
maybe	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^    maybe(Value v, bool b) : base(v, b) {}$/;"	f	struct:mtl::utilities::maybe
maybe	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^    maybe(base b) : base(b) {}$/;"	f	struct:mtl::utilities::maybe
maybe	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^    maybe(bool b) : base(Value(), b) {}$/;"	f	struct:mtl::utilities::maybe
maybe	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^struct maybe : public std::pair<Value, bool> $/;"	s	namespace:mtl::utilities
mc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    matrix_container  mc;$/;"	m	class:itl::pc::sub_matrix_pc
memory_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^						 detail::dense2D_array_size<Parameters, Parameters::on_stack>::value>     memory_base;$/;"	t	class:mtl::mat::dense2D
memory_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef mtl::detail::contiguous_memory_block<Elt, false>           memory_base;$/;"	t	class:mtl::mat::morton_dense
memory_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^                                                    Parameters::dimension::value >   memory_base;$/;"	t	class:mtl::vec::dense_vector
memory_crtp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^struct memory_crtp$/;"	s	namespace:mtl::detail
memory_need	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    size_type memory_need(size_type rows, size_type cols)$/;"	f	class:mtl::mat::morton_dense
merge_complex_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/merge_complex_vector.hpp	/^inline void merge_complex_vector(const VectorReal& r, const VectorImaginary& i, VectorComplex& c)$/;"	f	namespace:mtl::vec
mesh_	Mesh.hpp	/^			const Mesh* mesh_;$/;"	m	class:Mesh::AdjacentIterator
mesh_	Mesh.hpp	/^		const Mesh* mesh_;$/;"	m	class:Mesh::Triangle
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/abs.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_power_of_2.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/least_significant_one_bit.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/log_2.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop1.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/max.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/min.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/power_of_2.hpp	/^namespace meta_math {$/;"	n
meta_math	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/sqrt.hpp	/^namespace meta_math {$/;"	n
min	BoundingBox.hpp	/^  const point_type& min() const {$/;"	f	class:BoundingBox
min	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct min : public std::binary_function<Element, Element, Element>$/;"	s	namespace:math
min	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/min.hpp	/^struct min$/;"	s	namespace:meta_math
min	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	struct min$/;"	s	namespace:mtl::traits::range
min	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min.hpp	/^	inline min(const Vector& vector, tag::vector)$/;"	f	class:mtl::vec::impl::Collection
min	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min.hpp	/^inline min(const Value& value)$/;"	f	class:mtl::vec::Collection
min	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct min : boost::mpl::if_< boost::mpl::less<X, Y>, X, Y> {};$/;"	s	namespace:mtl::complexity_classes
min	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	/^inline min(const E1& e1, const vec_expr<E2>& e2)$/;"	f	class:mtl::vec::mtl::traits::enable_if_scalar
min	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	/^inline min(const vec_expr<E1>& e1, const E2& e2)$/;"	f	class:mtl::vec::mtl::traits::enable_if_scalar
min_	BoundingBox.hpp	/^  point_type min_;$/;"	m	class:BoundingBox
min_	Graph.hpp	/^	idx_type min_(idx_type a, idx_type b) const {$/;"	f	class:Graph::Edge
min_dim_test	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    min_dim_test(std::size_t comp) : comp(comp) {}$/;"	f	struct:mtl::recursion::min_dim_test
min_dim_test	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^struct min_dim_test$/;"	s	namespace:mtl::recursion
min_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^struct min_functor$/;"	s	namespace:mtl::vec
min_heapify	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	void min_heapify(value_type node) {$/;"	f	class:utils::binary_heap
min_ind	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type           nrows, ncols, nb_blocks, my_nnz, min_ind, max_ind;$/;"	m	class:mtl::mat::block_diagonal2D
min_index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type min_index() const { return min_ind; }$/;"	f	class:mtl::mat::block_diagonal2D
min_pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^	inline min_pos(const Vector& v)$/;"	f	class:mtl::vec::min_pos_functor
min_pos_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^	    min_pos_functor() : value(math::identity(math::min<result_type>(), result_type())) {} $/;"	f	struct:mtl::vec::min_pos_functor
min_pos_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^	struct min_pos_functor$/;"	s	namespace:mtl::vec
minimal_increase	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/minimal_increase.hpp	/^T inline minimal_increase(const T& x)$/;"	f	namespace:mtl
minor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/glas_tag.hpp	/^struct minor {};$/;"	s	namespace:glas::tag
minor_	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type minor_(size_type r, size_type c) const$/;"	f	struct:mtl::mat::base_matrix
minor_	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type minor_(size_type r, size_type c) const$/;"	f	struct:mtl::mat::base_sub_matrix
minor_from_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    size_type minor_from_offset(const Matrix& ma, size_type offset) const$/;"	f	struct:mtl::mat::compressed2D_indexer
minor_of	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^inline minor_of(const T& x)$/;"	f	class:mtl::mtl::traits
minus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct minus$/;"	s	namespace:mtl::sfunctor
minus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct minus_assign$/;"	s	namespace:mtl::sfunctor
minus_sum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^struct minus_sum$/;"	s	namespace:mtl::assign
missing_diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit missing_diagonal(const char *s= "Diagonal entry missing or not where it belongs to.")$/;"	f	struct:mtl::missing_diagonal
missing_diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct missing_diagonal : public domain_error$/;"	s	namespace:mtl
modify	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    void modify(size_type row, size_type col, Value val)$/;"	f	struct:mtl::detail::trivial_inserter
modify	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^inline void compressed2D_inserter<Elt, Parameters, Updater>::modify(size_type row, size_type col, value_type val)$/;"	f	class:mtl::mat::compressed2D_inserter
modify	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void modify(size_type row, size_type col, Value val)$/;"	f	struct:mtl::mat::coordinate2D_inserter
modify	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    void modify(size_type row, size_type col, Value val)$/;"	f	struct:mtl::mat::sparse_banded_inserter
modify	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    void modify(size_type n, value_type value) { Modifier()(vector[n], value); }$/;"	f	struct:mtl::vec::inserter
morton	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct morton {};$/;"	s	namespace:mtl
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    explicit morton_dense(const MatrixSrc& src) $/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    explicit morton_dense(const self& m, clone_ctor) $/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    explicit morton_dense(mtl::non_fixed::dimensions d) $/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    explicit morton_dense(mtl::non_fixed::dimensions d, value_type* a) $/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    explicit morton_dense(self& matrix, morton_dense_sub_ctor,$/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    explicit morton_dense(size_type num_rows, size_type num_cols, value_type* a) $/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    explicit morton_dense(value_type* a) $/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense() : memory_base(memory_need(dim_type().num_rows(), dim_type().num_cols()))$/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense(const self& m) $/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense(self&& src) : memory_base(memory_need(dim_type().num_rows(), dim_type().num_cols()))$/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense(size_type num_rows, size_type num_cols) $/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense(std::initializer_list<std::initializer_list<Value2> > values)$/;"	f	class:mtl::mat::morton_dense
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^class morton_dense $/;"	c	namespace:mtl::mat
morton_dense	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct morton_dense $/;"	s	namespace:mtl::tag
morton_dense_col_const_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense_col_const_iterator(const Matrix& matrix, size_type row, size_type col)$/;"	f	struct:mtl::mat::morton_dense_col_const_iterator
morton_dense_col_const_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^struct morton_dense_col_const_iterator$/;"	s	namespace:mtl::mat
morton_dense_col_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense_col_cursor(size_type my_row, size_type my_col) $/;"	f	struct:mtl::mat::morton_dense_col_cursor
morton_dense_col_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^struct morton_dense_col_cursor $/;"	s	namespace:mtl::mat
morton_dense_col_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense_col_iterator(Matrix& matrix, size_type row, size_type col)$/;"	f	struct:mtl::mat::morton_dense_col_iterator
morton_dense_col_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^struct morton_dense_col_iterator$/;"	s	namespace:mtl::mat
morton_dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense_el_cursor(size_type my_row, size_type my_col, size_type num_cols) $/;"	f	struct:mtl::mat::morton_dense_el_cursor
morton_dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^struct morton_dense_el_cursor $/;"	s	namespace:mtl::mat
morton_dense_iterator_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^        struct morton_dense_iterator_range_generator$/;"	s	namespace:mtl::traits::detail
morton_dense_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense_key(size_type my_row, size_type my_col) $/;"	f	struct:mtl::mat::morton_dense_key
morton_dense_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^struct morton_dense_key$/;"	s	namespace:mtl::mat
morton_dense_row_const_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense_row_const_iterator(const Matrix& matrix, size_type row, size_type col)$/;"	f	struct:mtl::mat::morton_dense_row_const_iterator
morton_dense_row_const_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^struct morton_dense_row_const_iterator$/;"	s	namespace:mtl::mat
morton_dense_row_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense_row_cursor(size_type my_row, size_type my_col) $/;"	f	struct:mtl::mat::morton_dense_row_cursor
morton_dense_row_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^struct morton_dense_row_cursor $/;"	s	namespace:mtl::mat
morton_dense_row_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    morton_dense_row_iterator(Matrix& matrix, size_type row, size_type col)$/;"	f	struct:mtl::mat::morton_dense_row_iterator
morton_dense_row_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^struct morton_dense_row_iterator$/;"	s	namespace:mtl::mat
morton_dense_sub_ctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^struct morton_dense_sub_ctor {};$/;"	s	namespace:mtl::mat
morton_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^    const unsigned long morton_mask= generate_mask<true, 0, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
morton_matrix_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct morton_matrix_mask$/;"	s	namespace:mtl::type_para
morton_matrix_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct morton_matrix_mask<mask<Value> >$/;"	s	namespace:mtl::type_para
morton_matrix_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct morton_matrix_mask<mask<Values...> >$/;"	s	namespace:mtl::type_para
morton_matrix_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct morton_matrix_mask<none>$/;"	s	namespace:mtl::type_para
morton_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct morton_view $/;"	s	namespace:mtl::tag
morton_z_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			morton_z_mask= generate_mask<false, 0, row_major, 0>::value,$/;"	m	namespace:mtl::recursion
move_assignment	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void move_assignment(self& other)$/;"	f	struct:mtl::detail::contiguous_memory_block
move_construction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void move_construction(self& other)$/;"	f	struct:mtl::detail::contiguous_memory_block
mp_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    typedef T                          mp_type[n_bytes];$/;"	t	struct:mtl::dilated::masked_dilation_tables
mref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    typedef typename boost::mpl::if_c<is_const, const Matrix&, Matrix&>::type    mref_type; $/;"	t	struct:mtl::traits::detail::morton_dense_iterator_range_generator
msg	Examples/openmp.cpp	/^  std::string msg;$/;"	m	struct:Timer	file:
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/matrix_algorithms.hpp	/^namespace mtl {  namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/magnitude.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/static_functor.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/std_concept.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/vector.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^namespace mtl { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^namespace mtl { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^namespace mtl { namespace dilated {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilation_table.hpp	/^namespace mtl { namespace dilated {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	/^namespace mtl { namespace index {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^namespace mtl { namespace dilated {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^namespace mtl { namespace traits { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^namespace mtl { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^namespace mtl { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/arprec.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/vpt.cpp	/^namespace mtl { $/;"	n	file:
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/vpt.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/functor_symbol.hpp	/^namespace mtl { namespace io {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_file.hpp	/^namespace mtl { namespace io {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^namespace mtl { namespace io {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/path.hpp	/^namespace mtl { namespace io {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_el_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_filter.hpp	/^namespace mtl { namespace io {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^namespace mtl { namespace io {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast.hpp	/^namespace mtl { namespace io {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^namespace mtl { namespace io {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/bands.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^namespace mtl {  namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^namespace mtl { namespace traits { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/diagonal_setup.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_array.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hessian_setup.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/laplacian_setup.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/lower.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/make_fast_multi_vector_expr.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^namespace mtl { namespace mat { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^namespace mtl { namespace sfunctor {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_expr.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_asgn_expr.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^namespace mtl {namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_negate_expr.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/operators.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/parameter.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/permutation.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/permutation.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder_matrix_rows.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder_ref.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_lower.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_upper.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/upper.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/view_ref.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_conditional_fwd.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjoint.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjust_cursor.hpp	/^namespace mtl { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_each_nonzero.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^namespace mtl { namespace assign {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/bin_op_expr.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/clone.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^namespace mtl { namespace operation {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^namespace mtl { namespace operation {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copysign.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/crop.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cross.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cuppen.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/diagonal.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/div_result.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^namespace mtl { namespace tfunctor {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by_inplace.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue_symmetric.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry1D.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry_similar.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/evaluate_lazy.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fill.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/frobenius_norm.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fuse.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hermitian.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hessenberg.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/householder.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/index_evaluator.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/infinity_norm.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/invert_diagonal.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/iota.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/is_negative.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy_assign.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/left_scale_inplace.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/look_at_each_nonzero.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_tag_vector.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_cvec_times_expr.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^namespace mtl { namespace operations {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_abs_pos.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_of_sums.hpp	/^namespace mtl { namespace impl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/merge_complex_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/merge_complex_vector.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/minimal_increase.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/misc.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^namespace mtl { namespace assign {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_specialize.hpp	/^namespace mtl { namespace mat {namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/no_op.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/one_norm.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/ones.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_size.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_vector.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/product.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rank_one_update.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rank_two_update.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/raw_copy.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/resource.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/right_scale_inplace.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^namespace mtl { namespace tfunctor {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^namespace mtl { namespace sfunctor {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/shift_block.hpp	/^namespace mtl { namespace operations {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/shift_block_detail.hpp	/^namespace mtl { namespace operations { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/signum.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size1D.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^namespace mtl { namespace functor {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_smat_mult.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/solve.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/split_complex_vector.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/squared_abs.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_size.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sub_matrix.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sum.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/svd.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/swap_row.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^namespace mtl { namespace tfunctor {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trace.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/two_norm.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/unary_dot.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/unroll.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^namespace mtl { namespace operations {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_cast.hpp	/^namespace mtl { namespace recursion {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_matrix.hpp	/^namespace mtl { namespace recursion {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^namespace mtl { namespace recursion {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^namespace mtl { namespace recursion {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/for_each.hpp	/^namespace mtl { namespace recursion {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^namespace mtl { namespace recursion {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/simplify_base_case_matrix.hpp	/^namespace mtl { namespace recursion {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/utility.hpp	/^namespace mtl { namespace recursion {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/algebraic_category.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/different_non_complex.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/domain.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/enable_if.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/extended_complex.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/gradient.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluator.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_composable_vector.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_distributed.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_lazy.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_static.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_vector_reduction.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^namespace mtl { namespace utilities {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^namespace mtl { namespace utilities { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/linear_operator.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/lu_matrix_type.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^namespace mtl { namespace utilities {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/omp_size_type.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^namespace mtl { namespace utility {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/pos_type.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^namespace mtl { namespace mat {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^namespace mtl { namespace traits {    $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^namespace mtl { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/push_back_comma_inserter.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/shrink_stl_vector.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/sometimes_data.hpp	/^namespace mtl { namespace utility {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_assert.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/string_to_enum.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^namespace mtl { namespace tag {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_orientation.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/true_copy.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_local.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/unroll_size1.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/updater_to_assigner.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/viewed_collection.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/with_unroll1.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/wrapped_object.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^namespace mtl { namespace utility {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assigner.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/decrementer.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^namespace mtl {	namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/incrementer.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/lazy_reduction.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^namespace mtl { namespace sfunctor {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^namespace mtl { namespace vec { namespace detail {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/parameter.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/rvec_mat_times_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^namespace mtl { namespace traits {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^namespace mtl {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unit_vector.hpp	/^namespace mtl { $/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_negate_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_div_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_minus_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_plus_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_times_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_div_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_ele_prod_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_ele_quot_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_minus_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_minus_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_plus_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_plus_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_times_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n
mtl	MTL-4.0.9555-Linux/usr/share/mtl/vpt.cpp	/^namespace mtl { $/;"	n	file:
mtl	mtl_test.cpp	/^namespace mtl {$/;"	n	file:
mtl	poisson.cpp	/^namespace mtl {$/;"	n	file:
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct mult : public std::binary_function<Element, Element, Element>$/;"	s	namespace:math
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^struct mult : public std::binary_function<Element, Element, result_type>$/;"	s	class:math::std
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^template <> struct mult<char> : heterogeneous_mult<char, char, int> {};$/;"	s	namespace:math
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^template <> struct mult<short> : heterogeneous_mult<short, short, int> {};$/;"	s	namespace:math
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^template <> struct mult<unsigned char> : heterogeneous_mult<unsigned char, unsigned char, unsigned int> {};$/;"	s	namespace:math
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^template <> struct mult<unsigned short> : heterogeneous_mult<unsigned short, unsigned short, unsigned int> {}; $/;"	s	namespace:math
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    void mult(const VectorIn& x, VectorOut& y) const $/;"	f	class:mtl::mat::block_diagonal2D
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^    void mult(const VectorIn& v, VectorOut& w, Assign) const$/;"	f	struct:mtl::mat::identity2D
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^    void mult(const VectorIn& v, VectorOut& w, Assign) const$/;"	f	struct:mtl::mat::poisson2D_dirichlet
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline mult(const A& a, const B& b, C& c)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline void mult(const A& a, const X& x, const Y& y, Z& z)$/;"	f	namespace:mtl::mat
mult	mtl_test.cpp	/^	void mult(const VectorIn& v, VectorOut& w, Assign) const {$/;"	f	struct:IdentityMatrix
mult	poisson.cpp	/^		void mult(const VectorIn& v, VectorOut& w, Assign) const {$/;"	f	class:GraphSymmetricMatrix
mult_add	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult.hpp	/^inline mult_add(const A& a, const B& b, C& c)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
mult_ass	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	/^mult_ass(double * D, double * C, double * BT) const$/;"	f	class:mtl::gen_platform_dmat_dmat_mult_ft
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode $/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<fully_unroll_fixed_size_dmat_dmat_mult_t<OldAssign, Backup>, Assign>$/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<gen_blas_dmat_dmat_mult_t<OldAssign, Backup>, Assign> $/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<gen_cursor_dmat_dmat_mult_t<OldAssign, Backup>, Assign>$/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<gen_dmat_dmat_mult_t<OldAssign, Backup>, Assign>$/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<gen_platform_dmat_dmat_mult_t<OldAssign, Backup>, Assign> $/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<gen_recursive_dmat_dmat_mult_t<BaseMult, BaseTest, OldAssign, Backup>, Assign> $/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<gen_tiling_22_dmat_dmat_mult_t<OldAssign, Backup>, Assign> $/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<gen_tiling_44_dmat_dmat_mult_t<OldAssign, Backup>, Assign> $/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<gen_tiling_dmat_dmat_mult_t<Tiling1, Tiling2, OldAssign, Backup>, Assign> $/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<no_op, Assign>$/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<size_switch_dmat_dmat_mult_t<SizeLimit, FunctorSmall, FunctorLarge>, Assign>$/;"	s	namespace:mtl::assign
mult_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^struct mult_assign_mode<static_switch_dmat_dmat_mult_t<IsStatic, FunctorStatic, FunctorDynamic>, Assign>$/;"	s	namespace:mtl::assign
mult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_op$/;"	s	namespace:mtl::ashape
mult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_op<cvec<Value1>, scal>$/;"	s	namespace:mtl::ashape
mult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_op<mat<Value1>, scal>$/;"	s	namespace:mtl::ashape
mult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_op<rvec<Value1>, scal>$/;"	s	namespace:mtl::ashape
mult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_op<scal, cvec<Value2> >$/;"	s	namespace:mtl::ashape
mult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_op<scal, mat<Value2> >$/;"	s	namespace:mtl::ashape
mult_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_op<scal, rvec<Value2> >$/;"	s	namespace:mtl::ashape
mult_result	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct mult_result $/;"	s	namespace:mtl::traits
mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct mult_result_aux {};$/;"	s	namespace:mtl::traits
mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct mult_result_aux<Op1, Op2, ::mtl::ashape::mat_cvec_mult> $/;"	s	namespace:mtl::traits
mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct mult_result_aux<Op1, Op2, ::mtl::ashape::mat_mat_mult> $/;"	s	namespace:mtl::traits
mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct mult_result_aux<Op1, Op2, ::mtl::ashape::mat_scal_mult> $/;"	s	namespace:mtl::traits
mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct mult_result_aux<Op1, Op2, ::mtl::ashape::scal_mat_mult> $/;"	s	namespace:mtl::traits
mult_schur_update_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    struct mult_schur_update_t$/;"	s	namespace:mtl::mat::detail
mult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_shape$/;"	s	namespace:mtl::ashape
mult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_shape<Shape1, scal>$/;"	s	namespace:mtl::ashape
mult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_shape<scal, Shape2>$/;"	s	namespace:mtl::ashape
mult_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct mult_shape<scal, scal>$/;"	s	namespace:mtl::ashape
multi_action_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	/^struct multi_action_block$/;"	s	namespace:mtl
multi_action_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	/^struct multi_action_helper$/;"	s	namespace:mtl
multi_action_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	/^struct multi_action_helper<MultiAction, MaxSteps, 1>$/;"	s	namespace:mtl
multi_constant_from_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    multi_constant_from_array(const Array& x, IndexType i) : value(x[i+Index]), sub(x, i) {}$/;"	f	struct:mtl::multi_constant_from_array
multi_constant_from_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    multi_constant_from_array(const Array&, IndexType) {}$/;"	f	struct:mtl::multi_constant_from_array
multi_constant_from_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^struct multi_constant_from_array$/;"	s	namespace:mtl
multi_constant_from_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^struct multi_constant_from_array<Size, Size, Value>$/;"	s	namespace:mtl
multi_print	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      bool       multi_print;$/;"	m	class:itl::cyclic_iteration
multi_tmp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    multi_tmp() {}$/;"	f	struct:mtl::multi_tmp
multi_tmp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    multi_tmp(const Value& v) : value(v), sub(v) {}$/;"	f	struct:mtl::multi_tmp
multi_tmp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    multi_tmp(const Value&) {}$/;"	f	struct:mtl::multi_tmp
multi_tmp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^struct multi_tmp $/;"	s	namespace:mtl
multi_tmp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^struct multi_tmp<0, Value> $/;"	s	namespace:mtl
multi_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    multi_vector() : super(non_fixed::dimensions(0, 0)), master(0) {}$/;"	f	class:mtl::mat::multi_vector
multi_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    multi_vector(const Vector& v, size_type num_cols)$/;"	f	class:mtl::mat::multi_vector
multi_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    multi_vector(size_type num_rows, size_type num_cols)$/;"	f	class:mtl::mat::multi_vector
multi_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^class multi_vector$/;"	c	namespace:mtl::mat
multi_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct multi_vector$/;"	s	namespace:mtl::tag
multi_vector_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^struct multi_vector_key {};$/;"	s	namespace:mtl::mat
multi_vector_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    multi_vector_range(const multi_vector<Vector>& ref, const irange& r) : ref(ref), r(r) {}$/;"	f	class:mtl::mat::multi_vector_range
multi_vector_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^class multi_vector_range$/;"	c	namespace:mtl::mat
multiplier	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^	explicit multiplier(const self& P, const VectorIn& x) : P(P), x(x) {}$/;"	f	struct:mtl::mat::block_diagonal2D::multiplier
multiplier	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    struct multiplier$/;"	s	class:mtl::mat::block_diagonal2D
multiply_and_square	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/power.hpp	/^    inline Element multiply_and_square(const Element& a, Exponent n, Op op) $/;"	f	namespace:math
multiply_it	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^    void multiply_it(VectorOut& w) const$/;"	f	struct:mtl::vec::mat_cvec_multiplier
mutable_crtp_base_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^struct mutable_crtp_base_matrix $/;"	s	namespace:mtl::mat
mutable_crtp_base_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^struct mutable_crtp_base_vector $/;"	s	namespace:mtl::vec
mv_mv_minus_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    mv_mv_minus_expr( E1 const& v1, E2 const& v2 )$/;"	f	struct:mtl::mat::mv_mv_minus_expr
mv_mv_minus_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^struct mv_mv_minus_expr$/;"	s	namespace:mtl::mat
mv_mv_plus_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    mv_mv_plus_expr( E1 const& v1, E2 const& v2 )$/;"	f	struct:mtl::mat::mv_mv_plus_expr
mv_mv_plus_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^struct mv_mv_plus_expr$/;"	s	namespace:mtl::mat
my_begin_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^                                    my_begin_col, my_end_col;$/;"	m	struct:mtl::mat::base_sub_matrix
my_begin_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    dilated_col_t            my_begin_col, my_end_col;$/;"	m	class:mtl::mat::morton_dense
my_begin_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^                                    my_begin_row, my_end_row,$/;"	m	struct:mtl::mat::base_sub_matrix
my_begin_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    dilated_row_t            my_begin_row, my_end_row;$/;"	m	class:mtl::mat::morton_dense
my_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    size_type           my_bound,      \/\/\/ Virtual matrix size, i.e. upper bound for size of sub-matrix.$/;"	m	struct:mtl::mat::recursator
my_category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	typedef typename mtl::traits::category<Matrix>::type    	       	    my_category;$/;"	t	struct:mtl::mat::detail::lower_trisolve_t
my_category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	typedef typename mtl::traits::category<Matrix>::type      my_category;$/;"	t	struct:mtl::mat::detail::upper_trisolve_t
my_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    size_type                    my_row, my_col;   $/;"	m	struct:mtl::mat::morton_dense_key
my_col_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^                    my_row_split, my_col_split;$/;"	m	struct:mtl::recursion::max_dim_splitter
my_col_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type             my_row_split, my_col_split;$/;"	m	struct:mtl::recursion::half_splitter
my_col_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type             my_row_split, my_col_split;$/;"	m	struct:mtl::recursion::outer_bound_splitter
my_col_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type             my_row_split, my_col_split;$/;"	m	struct:mtl::recursion::separate_dim_splitter
my_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    boost::shared_ptr<Matrix>           my_copy;$/;"	m	struct:mtl::mat::banded_view
my_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    boost::shared_ptr<Matrix>           my_copy;$/;"	m	struct:mtl::mat::map_view
my_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    boost::shared_ptr<Matrix>           my_copy;$/;"	m	struct:mtl::mat::transposed_view
my_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    boost::shared_ptr<Vector>           my_copy;$/;"	m	struct:mtl::vec::map_view
my_density	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    typedef typename matrix_default_density<TypePara>::type      my_density;$/;"	t	struct:mtl::type_para::matrix_type_generator
my_end_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^                                    my_begin_col, my_end_col;$/;"	m	struct:mtl::mat::base_sub_matrix
my_end_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    dilated_col_t            my_begin_col, my_end_col;$/;"	m	class:mtl::mat::morton_dense
my_end_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^                                    my_begin_row, my_end_row,$/;"	m	struct:mtl::mat::base_sub_matrix
my_end_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    dilated_row_t            my_begin_row, my_end_row;$/;"	m	class:mtl::mat::morton_dense
my_finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        size_type my_start, my_finish;$/;"	m	class:mtl::irange
my_finish	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    size_type my_start, my_finish, my_stride;$/;"	m	class:mtl::srange
my_first_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^                        my_first_col;  \/\/\/ Row of first entry in submatrix $/;"	m	struct:mtl::mat::recursator
my_first_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^	                my_first_row,  \/\/\/ Row of first entry in submatrix$/;"	m	struct:mtl::mat::recursator
my_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Functor           my_functor;    $/;"	m	class:mtl::mat::implicit_dense
my_is_sorted	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    bool                      my_is_sorted;$/;"	m	class:mtl::mat::coordinate2D
my_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    static const std::size_t my_mask= morton_matrix_mask<typename boost::mpl::at<TypePara, masking>::type>::value;$/;"	m	struct:mtl::type_para::matrix_density_generator
my_mask_lut	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    static lookup_type*                my_mask_lut, *my_unmask_lut;$/;"	m	struct:mtl::dilated::masked_dilation_tables
my_mask_lut	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^typename masked_dilation_tables<T, Mask>::lookup_type* masked_dilation_tables<T, Mask>::my_mask_lut= 0;$/;"	m	class:mtl::dilated::masked_dilation_tables
my_mask_piece	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    static mp_type*                    my_mask_piece;$/;"	m	struct:mtl::dilated::masked_dilation_tables
my_mask_piece	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^typename masked_dilation_tables<T, Mask>::mp_type* masked_dilation_tables<T, Mask>::my_mask_piece= 0;$/;"	m	class:mtl::dilated::masked_dilation_tables
my_mask_shift_table	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    static it_type*                    my_mask_size, *my_mask_shift_table, *my_unmask_shift_table;$/;"	m	struct:mtl::dilated::masked_dilation_tables
my_mask_shift_table	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^typename masked_dilation_tables<T, Mask>::it_type* masked_dilation_tables<T, Mask>::my_mask_shift_table= 0;$/;"	m	class:mtl::dilated::masked_dilation_tables
my_mask_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    static it_type*                    my_mask_size, *my_mask_shift_table, *my_unmask_shift_table;$/;"	m	struct:mtl::dilated::masked_dilation_tables
my_mask_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^typename masked_dilation_tables<T, Mask>::it_type* masked_dilation_tables<T, Mask>::my_mask_size= 0;$/;"	m	class:mtl::dilated::masked_dilation_tables
my_nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    size_type           my_nnz;$/;"	m	class:mtl::mat::umfpack::solver
my_nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type                       my_nnz;    \/\/\/< # of non-zeros, to be set by derived matrix$/;"	m	struct:mtl::mat::base_matrix
my_nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type                       my_nnz,       \/\/ # of non-zeros, to be set by derived matrix (drop maybe?)$/;"	m	struct:mtl::mat::base_sub_matrix
my_nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type           nrows, ncols, nb_blocks, my_nnz, min_ind, max_ind;$/;"	m	class:mtl::mat::block_diagonal2D
my_orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	typedef typename OrientedCollection<Matrix>::orientation	       	    my_orientation;$/;"	t	struct:mtl::mat::detail::lower_trisolve_t
my_orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	typedef typename OrientedCollection<Matrix>::orientation  my_orientation;$/;"	t	struct:mtl::mat::detail::upper_trisolve_t
my_position_iterator	Examples/iterator_adaptor.cpp	/^  my_position_iterator(std::vector<int>& _c, int _pos)$/;"	f	struct:my_position_iterator
my_position_iterator	Examples/iterator_adaptor.cpp	/^struct my_position_iterator$/;"	s	file:
my_position_iterator	Examples/iterator_adaptor_boost.cpp	/^  my_position_iterator(std::vector<int>& _c, int _pos)$/;"	f	struct:my_position_iterator
my_position_iterator	Examples/iterator_adaptor_boost.cpp	/^struct my_position_iterator$/;"	s	file:
my_quite	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool         is_finished, my_quite, my_suppress;$/;"	m	class:itl::basic_iteration
my_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    size_type                    my_row, my_col;   $/;"	m	struct:mtl::mat::morton_dense_key
my_row_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^                    my_row_split, my_col_split;$/;"	m	struct:mtl::recursion::max_dim_splitter
my_row_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type             my_row_split, my_col_split;$/;"	m	struct:mtl::recursion::half_splitter
my_row_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type             my_row_split, my_col_split;$/;"	m	struct:mtl::recursion::outer_bound_splitter
my_row_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type             my_row_split, my_col_split;$/;"	m	struct:mtl::recursion::separate_dim_splitter
my_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^	size_type my_size;$/;"	m	struct:mtl::vec::non_fixed::dimension
my_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    size_type   my_size, my_stride;$/;"	m	class:mtl::vec::strided_vector_ref
my_slots	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    size_type               my_stride, my_slots;$/;"	m	class:mtl::mat::ell_matrix
my_sparsity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    enum sparsity {coordinate, array} my_sparsity;$/;"	m	class:mtl::io::matrix_market_istream	typeref:enum:mtl::io::matrix_market_istream::sparsity
my_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type             my_split, \/\/ minimal 2^(k-1) such that 2^k >= max(num_rows, num_cols)$/;"	m	struct:mtl::recursion::max_dim_splitter
my_start	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        size_type my_start, my_finish;$/;"	m	class:mtl::irange
my_start	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    size_type my_start, my_finish, my_stride;$/;"	m	class:mtl::srange
my_stream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::istream       &my_stream;$/;"	m	class:mtl::io::matrix_market_istream
my_stream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::ostream       &my_stream;$/;"	m	class:mtl::io::matrix_market_ostream
my_stride	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    size_type               my_stride, my_slots;$/;"	m	class:mtl::mat::ell_matrix
my_stride	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    size_type my_start, my_finish, my_stride;$/;"	m	class:mtl::srange
my_stride	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    size_type   my_size, my_stride;$/;"	m	class:mtl::vec::strided_vector_ref
my_stride_iterator	Examples/iterator_adaptor.cpp	/^  my_stride_iterator(const std::vector<int>::iterator& _m)$/;"	f	struct:my_stride_iterator
my_stride_iterator	Examples/iterator_adaptor.cpp	/^struct my_stride_iterator$/;"	s	file:
my_stride_iterator	Examples/iterator_adaptor_boost.cpp	/^  my_stride_iterator(const std::vector<int>::iterator& _m)$/;"	f	struct:my_stride_iterator
my_stride_iterator	Examples/iterator_adaptor_boost.cpp	/^struct my_stride_iterator$/;"	s	file:
my_sub_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    sub_matrix_type     my_sub_matrix; \/\/\/ Referred matrix (from which the sub-matrices are built)$/;"	m	struct:mtl::mat::recursator
my_suppress	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool         is_finished, my_quite, my_suppress;$/;"	m	class:itl::basic_iteration
my_symmetry	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    enum symmetry {general, symmetric, skew, Hermitian} my_symmetry;$/;"	m	class:mtl::io::matrix_market_istream	typeref:enum:mtl::io::matrix_market_istream::symmetry
my_traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	template <typename T> struct my_traits { static const bool value = boost::is_integral<T>::value && col_traits::exists; };$/;"	s	struct:mtl::operations::range_bracket_proxy
my_traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	template <typename T> struct my_traits { static const bool value= boost::is_same<T, mtl::irange>::value && row_traits::exists; };$/;"	s	struct:mtl::operations::bracket_proxy
my_transform_iterator	Examples/iterator_adaptor.cpp	/^  my_transform_iterator(const std::vector<int>::iterator& _m)$/;"	f	struct:my_transform_iterator
my_transform_iterator	Examples/iterator_adaptor.cpp	/^struct my_transform_iterator$/;"	s	file:
my_transform_iterator	Examples/iterator_adaptor_boost.cpp	/^  my_transform_iterator(const std::vector<int>::iterator& _m)$/;"	f	struct:my_transform_iterator
my_transform_iterator	Examples/iterator_adaptor_boost.cpp	/^struct my_transform_iterator$/;"	s	file:
my_unmask_lut	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    static lookup_type*                my_mask_lut, *my_unmask_lut;$/;"	m	struct:mtl::dilated::masked_dilation_tables
my_unmask_lut	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^typename masked_dilation_tables<T, Mask>::lookup_type* masked_dilation_tables<T, Mask>::my_unmask_lut= 0;$/;"	m	class:mtl::dilated::masked_dilation_tables
my_unmask_shift_table	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    static it_type*                    my_mask_size, *my_mask_shift_table, *my_unmask_shift_table;$/;"	m	struct:mtl::dilated::masked_dilation_tables
my_unmask_shift_table	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^typename masked_dilation_tables<T, Mask>::it_type* masked_dilation_tables<T, Mask>::my_unmask_shift_table= 0;$/;"	m	class:mtl::dilated::masked_dilation_tables
my_used_memory	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    std::size_t                               my_used_memory;$/;"	m	struct:mtl::detail::size_helper
my_v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Vector1  my_v1; \/\/ keeps copy$/;"	m	class:mtl::mat::outer_product_functor
my_v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Vector2  my_v2;$/;"	m	class:mtl::mat::outer_product_functor
my_vector	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/INITLIST_CHECK.cpp	/^    my_vector(const self&) {}$/;"	f	struct:my_vector
my_vector	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/INITLIST_CHECK.cpp	/^    my_vector(const self&, ctor) {}$/;"	f	struct:my_vector
my_vector	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/INITLIST_CHECK.cpp	/^    my_vector(self&&) {}$/;"	f	struct:my_vector
my_vector	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/INITLIST_CHECK.cpp	/^    my_vector(std::initializer_list<T> ls) $/;"	f	struct:my_vector
my_vector	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/INITLIST_CHECK.cpp	/^struct my_vector$/;"	s	file:
n	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    size_t            n;$/;"	m	class:itl::pc::sub_matrix_pc
n	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/repeated.hpp	/^    std::size_t n;$/;"	m	class:itl::repeated
n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    int                  n; $/;"	m	class:mtl::mat::umfpack::solver
n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    int                 n;$/;"	m	class:mtl::mat::umfpack::solver
n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^    std::size_t m, n;$/;"	m	struct:mtl::mat::identity2D
n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^    int m, n, s;$/;"	m	struct:mtl::mat::poisson2D_dirichlet
n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    Size       n;$/;"	m	struct:mtl::vec::update_proxy
n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    size_type   n;$/;"	m	class:mtl::vec::sparse_vector
n	mtl_test.cpp	/^	int n;$/;"	m	struct:IdentityMatrix	file:
n1_	Mesh.hpp	/^		vert_node n1_;$/;"	m	struct:Mesh::triangle_data
n2_	Mesh.hpp	/^		vert_node n2_;$/;"	m	struct:Mesh::triangle_data
n3_	Mesh.hpp	/^		vert_node n3_;$/;"	m	struct:Mesh::triangle_data
n_	Examples/trivial_copy.cpp	/^  size_t n_;$/;"	m	class:Vector	file:
n_bytes	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    static const T n_bytes= sizeof(T);           \/\/ number of bytes of the unmasked value of this type$/;"	m	struct:mtl::dilated::masked_dilation_tables
n_log_n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct n_log_n : boost::mpl::int_<24> {};$/;"	s	namespace:mtl::complexity_classes
n_polylog_n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct n_polylog_n : boost::mpl::int_<25> {};$/;"	s	namespace:mtl::complexity_classes
n_valid_table	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    static int                         n_valid_table, instances;$/;"	m	struct:mtl::dilated::masked_dilation_tables
n_valid_table	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^int masked_dilation_tables<T, Mask>::n_valid_table= 0;$/;"	m	class:mtl::dilated::masked_dilation_tables
naive_set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	void naive_set_to_zero(Matrix& A, tag::matrix, tag::dense)$/;"	f	namespace:mtl::impl
naive_set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	void naive_set_to_zero(Matrix&, tag::matrix, tag::sparse)$/;"	f	namespace:mtl::impl
nb_blocks	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type           nrows, ncols, nb_blocks, my_nnz, min_ind, max_ind;$/;"	m	class:mtl::mat::block_diagonal2D
nb_values	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    inline int nb_values() const { return nb_vars()*nb_vars(); }$/;"	f	class:mtl::mat::element
nb_vars	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    inline int nb_vars() const { return size(m_indices); }$/;"	f	class:mtl::mat::element
nc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    size_type nr, nc;$/;"	m	class:mtl::mat::hilbert_functor
nc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    size_type nr, nc;$/;"	m	class:mtl::mat::ones_functor
ncols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::size_t nrows, ncols, nnz;$/;"	m	class:mtl::io::matrix_market_istream
ncols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type           nrows, ncols, nb_blocks, my_nnz, min_ind, max_ind;$/;"	m	class:mtl::mat::block_diagonal2D
ncols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    size_type ncols, nrows, maxIteration;$/;"	m	class:mtl::mat::eigenvalue_solver
ndef	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct ndef {};$/;"	s	namespace:mtl::ashape
need_nonempty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit need_nonempty(const char *s= "Argument must be non-empty.")$/;"	f	struct:mtl::need_nonempty
need_nonempty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct need_nonempty : public domain_error$/;"	s	namespace:mtl
negate	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct negate$/;"	s	namespace:mtl::sfunctor
negate_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^    inline negate_helper(const T& x) $/;"	f	class:std::detail::boost::disable_if
negate_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^    inline negate_helper(const T& x) $/;"	f	class:std::detail::boost::enable_if
negate_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    negate_view (const self& that) : base(that) {}$/;"	f	struct:mtl::mat::negate_view
negate_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    negate_view (self&& that) : base(that) {}$/;"	f	struct:mtl::mat::negate_view
negate_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    negate_view(boost::shared_ptr<Matrix> p) : base(functor_type(), p) {}$/;"	f	struct:mtl::mat::negate_view
negate_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    negate_view(const Matrix& matrix) : base(functor_type(), matrix) {}$/;"	f	struct:mtl::mat::negate_view
negate_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct negate_view$/;"	s	namespace:mtl::mat
negate_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit negate_view(boost::shared_ptr<Vector> p)$/;"	f	struct:mtl::vec::negate_view
negate_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit negate_view(const Vector& vector)$/;"	f	struct:mtl::vec::negate_view
negate_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    negate_view (const self& that) : base(that) {}$/;"	f	struct:mtl::vec::negate_view
negate_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    negate_view (self&& that) : base(that) {}$/;"	f	struct:mtl::vec::negate_view
negate_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^struct negate_view$/;"	s	namespace:mtl::vec
negate_wo_over	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	inline long negate_wo_over(long i) { return i == std::numeric_limits<long>::min() ? std::numeric_limits<long>::max() : -i; }$/;"	f	namespace:mtl::__anon3
neighbor_collection_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    typedef std::vector<element_type*, std::allocator<element_type*> > neighbor_collection_type; \/\/ trouble with Clang 4.2 w\/o allocator $/;"	t	class:mtl::mat::element
neighbor_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    typedef typename neighbor_collection_type::iterator neighbor_iterator;$/;"	t	class:mtl::mat::element
neighbor_set_iterator_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    typedef typename neighbor_set_type::iterator neighbor_set_iterator_type;$/;"	t	class:mtl::mat::element
neighbor_set_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^       > neighbor_set_type;$/;"	t	class:mtl::mat::element
new_stream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::ifstream      *new_stream;$/;"	m	class:mtl::io::matrix_market_istream
new_stream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::ofstream      *new_stream;$/;"	m	class:mtl::io::matrix_market_ostream
new_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/sqrt.hpp	/^	                      new_value = (quotient + guess) \/ 2;$/;"	m	struct:meta_math::impl::sqrt_impl
next	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^	    typedef reduction<Index0+1, Max0, Functor>     next;$/;"	t	struct:mtl::vec::impl::reduction
next	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^	    typedef assign<Index+1, Max, SFunctor>     next;$/;"	t	struct:mtl::vec::impl::assign
next_index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop1.hpp	/^    static std::size_t const index0= Index0 - 1, next_index0= Index0 + 1;$/;"	m	struct:meta_math::loop1
next_index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^    static const std::size_t index0= Index0 - 1, next_index0= Index0 + 1,$/;"	m	struct:meta_math::loop2
next_index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^    static const std::size_t index0= Index0 - 1, next_index0= Index0,$/;"	m	struct:meta_math::loop2
next_index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^    static std::size_t const index0= Index0 - 1, next_index0= Index0 + 1,$/;"	m	struct:meta_math::loop3
next_index0	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^    static std::size_t const index0= Index0 - 1, next_index0= Index0,$/;"	m	struct:meta_math::loop3
next_index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^            	             index1= Index1 - 1, next_index1= Index1 + 1;$/;"	m	struct:meta_math::loop2
next_index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop2.hpp	/^            	             index1= Max1 - 1, next_index1= 1;$/;"	m	struct:meta_math::loop2
next_index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^	                     index1= Index1 - 1, next_index1= Index1 + 1,$/;"	m	struct:meta_math::loop3
next_index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^	                     index1= Index1 - 1, next_index1= Index1,$/;"	m	struct:meta_math::loop3
next_index1	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^	                     index1= Max1 - 1, next_index1= 1,$/;"	m	struct:meta_math::loop3
next_index2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^            	             index2= Index2 - 1, next_index2= Index2 + 1;$/;"	m	struct:meta_math::loop3
next_index2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/loop3.hpp	/^            	             index2= Max2 - 1, next_index2= 1;$/;"	m	struct:meta_math::loop3
next_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    size_type       major, offset, next_offset;$/;"	m	struct:mtl::mat::coordinate_major_cursor
next_parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	    typedef typename set_para<TypePara, FirstValue>::type              next_parameters;$/;"	t	struct:mtl::type_para::set_parameters
next_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    typedef fully_unroll_dmat_dmat_mult_block<base::next_index0, Max0, base::next_index1, Max1, base::next_index2, Max2, Assign>  next_t;$/;"	t	struct:mtl::fully_unroll_dmat_dmat_mult_block
next_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    typedef fully_unroll_dmat_dmat_mult_init_block<base::next_index0, Max0, base::next_index1, Max1, Assign>  next_t;$/;"	t	struct:mtl::fully_unroll_dmat_dmat_mult_init_block
next_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    typedef gen_tiling_dmat_dmat_mult_block<base::next_index0, Max0, base::next_index1, Max1, Assign>  next_t;$/;"	t	struct:mtl::gen_tiling_dmat_dmat_mult_block
next_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^		typedef dot_aux<base::next_index0, Max0>                                  next_t;$/;"	t	struct:mtl::vec::sfunctor::dot_aux
next_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^	typedef fully_unroll_mat_cvec_mult<base::next_index0, Max0, 2, Max1, Assign>  next_t;$/;"	t	struct:mtl::mat::impl::fully_unroll_mat_cvec_mult
next_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^	typedef fully_unroll_mat_cvec_mult<base::next_index0, Max0, base::next_index1, Max1, Assign>  next_t;$/;"	t	struct:mtl::mat::impl::fully_unroll_mat_cvec_mult
next_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^	typedef fully_unroll_rvec_mat_mult<base::next_index0, Max0, base::next_index1, Max1, Assign>  next_t;$/;"	t	struct:mtl::vec::impl::fully_unroll_rvec_mat_mult
next_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    typedef gen_tiling_smat_dmat_mult_block<base::next_index0, Max0, Assign>  next_t;$/;"	t	struct:mtl::functor::gen_tiling_smat_dmat_mult_block
next_uid_	Examples/proxy_example.cpp	/^  size_type next_uid_;$/;"	m	class:SimpleSet	file:
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::size_t nrows, ncols, nnz;$/;"	m	class:mtl::io::matrix_market_istream
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type nnz() const$/;"	f	struct:mtl::mat::base_matrix
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type nnz() const$/;"	f	struct:mtl::mat::base_sub_matrix
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type nnz() const { return my_nnz; }$/;"	f	class:mtl::mat::block_diagonal2D
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    size_type nnz() const { return rows.size(); } \/\/\/< Number of non-zeros$/;"	f	class:mtl::mat::coordinate2D
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^inline nnz(const coordinate2D<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::coordinate2D
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    int nnz() const $/;"	f	class:mtl::mat::element
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    size_type nnz() const { return base::nnz(); }$/;"	f	struct:mtl::mat::hermitian_view
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    size_type nnz() const { return dim1() * dim2(); }$/;"	f	class:mtl::mat::implicit_dense
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    size_type nnz() const { return num_rows(*this) * num_cols(*this); } \/\/\/< Number of non-zeros $/;"	f	struct:mtl::mat::indirect
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    size_type nnz() const { return ref.nnz(); }$/;"	f	struct:mtl::mat::map_view
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    size_type nnz() const { return bands.size() * this->num_rows(); }$/;"	f	class:mtl::mat::sparse_banded
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    size_type nnz() const       { return ref.nnz();       }$/;"	f	struct:mtl::mat::transposed_view
nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    std::size_t nnz() const { assert(indices.size() == data.size()); return indices.size(); }$/;"	f	class:mtl::vec::sparse_vector
nnz_local	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    size_type nnz_local(size_type r_or_c) const $/;"	f	class:mtl::mat::compressed2D
no_op	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/no_op.hpp	/^struct no_op {};$/;"	s	namespace:mtl
node	Graph.hpp	/^  Node node(idx_type i) const {$/;"	f	class:Graph
node1	Graph.hpp	/^    Node node1() const {$/;"	f	class:Graph::Edge
node2	Graph.hpp	/^    Node node2() const {$/;"	f	class:Graph::Edge
node_begin	Graph.hpp	/^  NodeIterator node_begin() const {$/;"	f	class:Graph
node_begin	Mesh.hpp	/^	vertex_iterator node_begin() const {$/;"	f	class:Mesh
node_data	Graph.hpp	/^  typedef struct node_data {$/;"	s	class:Graph
node_data	Graph.hpp	/^  } node_data;$/;"	t	class:Graph	typeref:struct:Graph::node_data
node_data	poisson.cpp	/^} node_data;$/;"	t	typeref:struct:NodeData	file:
node_end	Graph.hpp	/^  NodeIterator node_end() const {$/;"	f	class:Graph
node_end	Mesh.hpp	/^	vertex_iterator node_end() const {$/;"	f	class:Mesh
node_iterator	Graph.hpp	/^  typedef NodeIterator node_iterator;$/;"	t	class:Graph
node_map	poisson.cpp	/^		MAP node_map;$/;"	m	class:itl::visual_iteration	file:
node_type	Graph.hpp	/^  typedef Node node_type;$/;"	t	class:Graph
node_type	Mesh.hpp	/^	typedef vert_node node_type;$/;"	t	class:Mesh
node_value_type	Graph.hpp	/^  typedef V node_value_type;$/;"	t	class:Graph
nodes_	Graph.hpp	/^ 	mutable std::vector<node_data> nodes_;$/;"	m	class:Graph
noisy_iteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/noisy_iteration.hpp	/^      noisy_iteration(const Vector& r0, int max_iter_, Real tol_, Real atol_ = Real(0),$/;"	f	class:itl::noisy_iteration
noisy_iteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/noisy_iteration.hpp	/^  class noisy_iteration : public cyclic_iteration<Real, OStream> $/;"	c	namespace:itl
non_fixed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^namespace non_fixed$/;"	n	namespace:mtl
non_fixed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^	namespace non_fixed {$/;"	n	namespace:mtl::vec
non_fixed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace non_fixed {$/;"	n	namespace:mtl
non_fixed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^namespace non_fixed {$/;"	n	namespace:mtl::vec
non_zero_is_invertible_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	/^    struct non_zero_is_invertible_t$/;"	s	namespace:math::detail
none	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct none {};$/;"	s	namespace:mtl::type_para
nonscal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct nonscal : universe {};$/;"	s	namespace:mtl::ashape
noop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    struct noop$/;"	s	struct:mtl::fully_unroll_fixed_size_dmat_dmat_mult_t
noop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    struct noop$/;"	s	namespace:mtl::mat::impl
norm	Point.hpp	/^double norm(const Point& a) {$/;"	f
normSq	Point.hpp	/^double normSq(const Point& a) {$/;"	f
norm_1	Point.hpp	/^double norm_1(const Point& a) {$/;"	f
norm_2	Point.hpp	/^double norm_2(const Point& a) {$/;"	f
norm_inf	Point.hpp	/^double norm_inf(const Point& a) {$/;"	f
norm_r0	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    Real         norm_r0;$/;"	m	class:itl::basic_iteration
normal	Mesh.hpp	/^	Point normal(Triangle t1, Triangle t2) const {$/;"	f	class:Mesh
normb	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    Real normb() const { return norm_r0; }$/;"	f	class:itl::basic_iteration
north_east	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    self north_east() const$/;"	f	struct:mtl::mat::recursator
north_east	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^recursator<Matrix> inline north_east(const recursator<Matrix>& rec)$/;"	f	namespace:mtl::mat
north_west	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    self north_west() const$/;"	f	struct:mtl::mat::recursator
north_west	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^recursator<Matrix> inline north_west(const recursator<Matrix>& rec)$/;"	f	namespace:mtl::mat
nr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    size_type nr, nc;$/;"	m	class:mtl::mat::hilbert_functor
nr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    size_type nr, nc;$/;"	m	class:mtl::mat::ones_functor
nrows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::size_t nrows, ncols, nnz;$/;"	m	class:mtl::io::matrix_market_istream
nrows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type           nrows, ncols, nb_blocks, my_nnz, min_ind, max_ind;$/;"	m	class:mtl::mat::block_diagonal2D
nrows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    size_type ncols, nrows, maxIteration;$/;"	m	class:mtl::mat::eigenvalue_solver
num_blocks	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type num_blocks() const {$/;"	f	class:mtl::mat::block_diagonal2D
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    friend size_type inline num_cols(const self& A) $/;"	f	struct:mtl::mat::banded_view
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type num_cols() const $/;"	f	struct:mtl::mat::base_matrix
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type num_cols() const $/;"	f	struct:mtl::mat::base_sub_matrix
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type num_cols() const {$/;"	f	class:mtl::mat::block_diagonal2D
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^inline num_cols(const block_diagonal2D<Value>& matrix)$/;"	f	class:mtl::mat::block_diagonal2D
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^inline num_cols(const compressed2D<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::compressed2D
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^inline num_cols(const coordinate2D<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::coordinate2D
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^inline num_cols(const dense2D<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::dense2D
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	size_type num_cols() const { return Cols; } \/\/\/< Number of columns$/;"	f	struct:mtl::fixed::dimensions
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	size_type num_cols() const { return c; } \/\/\/< Number of columns$/;"	f	struct:mtl::non_fixed::dimensions
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^inline std::size_t num_cols(const element_structure<ValueType>& A)$/;"	f	namespace:mtl::mat
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^inline num_cols(const ell_matrix<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::ell_matrix
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    friend size_type inline num_cols(const self& A) { return num_cols((const base&)(A)); }$/;"	f	struct:mtl::mat::hermitian_view
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^inline std::size_t num_cols(const identity2D& A) { return A.n; } \/\/\/< Number of columns$/;"	f	namespace:mtl::mat
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    friend size_type inline num_cols(const self& A) { return A.nc; }$/;"	f	class:mtl::mat::hilbert_functor
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    friend size_type inline num_cols(const self& A) { return A.nc; }$/;"	f	class:mtl::mat::ones_functor
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    friend size_type inline num_cols(const self& A) { return num_cols(A.my_functor); }$/;"	f	class:mtl::mat::implicit_dense
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    friend size_type inline num_cols(const self& A) { return size(A.my_v2); }$/;"	f	class:mtl::mat::outer_product_functor
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    friend size_type inline num_cols(const self& A) { return A.cols.size(); } \/\/\/< Number of colums$/;"	f	struct:mtl::mat::indirect
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    friend size_type inline num_cols(const self& A) $/;"	f	struct:mtl::mat::map_view
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^std::size_t inline num_cols(const mat_mat_ele_times_expr<E1, E2>& expr) $/;"	f	class:mtl::mat::std
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^inline num_cols(mat_mat_op_expr<E1, E2, SFunctor> const& expr)$/;"	f	class:mtl::mat::mat_mat_op_expr
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^std::size_t inline num_cols(const mat_mat_times_expr<E1, E2>& expr) $/;"	f	class:mtl::mat::std
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    size_t                       num_cols;$/;"	m	struct:mtl::mat::morton_dense_el_cursor
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^inline num_cols(const morton_dense<Value, Mask, Parameters>& matrix)$/;"	f	class:mtl::mat::morton_dense
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^typename Collection< Vector >::size_type num_cols(const multi_vector< Vector >& A) { return A.num_cols(); }$/;"	f	namespace:mtl::mat
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    friend size_type num_cols(const self& A) { return A.r.size(); }$/;"	f	class:mtl::mat::multi_vector_range
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^inline std::size_t num_cols(const poisson2D_dirichlet& A) { return A.s; } \/\/\/< Number of columns$/;"	f	namespace:mtl::mat
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    friend size_t num_cols(const self& A) { return A.num_cols(); }$/;"	f	class:mtl::mat::sparse_banded
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    friend size_type inline num_cols(const self& A) $/;"	f	struct:mtl::mat::transposed_view
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^    struct num_cols {};$/;"	s	namespace:mtl::traits
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^    struct num_cols< std::vector<Value> > $/;"	s	namespace:mtl::traits
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^    struct num_cols<Value[Rows][Cols]>$/;"	s	namespace:mtl::traits
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^    struct num_cols<Value[Size]>$/;"	s	namespace:mtl::traits
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^inline num_cols(const Collection& c)$/;"	f	class:mtl::traits::num_cols
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^inline num_cols(const recursator<Matrix>& rec)$/;"	f	class:mtl::mat::recursator
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^inline num_cols(const dense_vector<Value, Parameters>& vector)$/;"	f	class:mtl::vec::dense_vector
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    friend size_type inline num_cols(const self& v) { return num_cols(v.ref); }$/;"	f	struct:mtl::vec::map_view
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^inline std::size_t num_cols(const mat_cvec_multiplier<Matrix, VectorIn>&) { return 1; }$/;"	f	namespace:mtl::vec
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    friend size_type inline num_cols(const self& v) { return mtl::traits::is_row_major<self>::value ? size(v) : 1; }$/;"	f	class:mtl::vec::strided_vector_ref
num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    friend inline size_type num_cols(const self& v)  { return num_cols(v.ref); }$/;"	f	class:mtl::vec::unrolled1
num_cols	mtl_test.cpp	/^inline std::size_t num_cols(const IdentityMatrix& A) { return A.n; }$/;"	f
num_cols	poisson.cpp	/^inline std::size_t num_cols(const GraphSymmetricMatrix& A) { $/;"	f
num_counters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    int num_counters, event_set, active_events;$/;"	m	class:mtl::utility::papi_t
num_edges	Graph.hpp	/^  size_type num_edges() const {$/;"	f	class:Graph
num_edges	Mesh.hpp	/^	size_type num_edges() const {$/;"	f	class:Mesh
num_edges_	Graph.hpp	/^	mutable size_type num_edges_ = 0;$/;"	m	class:Graph
num_links	Mesh.hpp	/^	size_type num_links() const {$/;"	f	class:Mesh
num_nodes	Graph.hpp	/^  size_type num_nodes() const {$/;"	f	class:Graph
num_nodes	Mesh.hpp	/^	size_type num_nodes() const {$/;"	f	class:Mesh
num_nodes_	Graph.hpp	/^ 	mutable size_type num_nodes_ = 0;$/;"	m	class:Graph
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    friend size_type inline num_rows(const self& A) $/;"	f	struct:mtl::mat::banded_view
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    size_type num_rows() const $/;"	f	struct:mtl::mat::base_matrix
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    size_type num_rows() const $/;"	f	struct:mtl::mat::base_sub_matrix
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    size_type num_rows() const {$/;"	f	class:mtl::mat::block_diagonal2D
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^inline num_rows(const block_diagonal2D<Value>& matrix)$/;"	f	class:mtl::mat::block_diagonal2D
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^inline num_rows(const compressed2D<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::compressed2D
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^inline num_rows(const coordinate2D<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::coordinate2D
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^inline num_rows(const dense2D<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::dense2D
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	size_type num_rows() const { return Rows; } \/\/\/< Number of rows$/;"	f	struct:mtl::fixed::dimensions
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	size_type num_rows() const { return r; } \/\/\/< Number of rows$/;"	f	struct:mtl::non_fixed::dimensions
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^inline std::size_t num_rows(const element_structure<ValueType>& A)$/;"	f	namespace:mtl::mat
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^inline num_rows(const ell_matrix<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::ell_matrix
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    friend size_type inline num_rows(const self& A) { return num_rows((const base&)(A)); }$/;"	f	struct:mtl::mat::hermitian_view
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^inline std::size_t num_rows(const identity2D& A) { return A.m; } \/\/\/< Number of rows$/;"	f	namespace:mtl::mat
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    friend size_type inline num_rows(const self& A) { return A.nr; }$/;"	f	class:mtl::mat::hilbert_functor
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    friend size_type inline num_rows(const self& A) { return A.nr; }$/;"	f	class:mtl::mat::ones_functor
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    friend size_type inline num_rows(const self& A) { return num_rows(A.my_functor); }$/;"	f	class:mtl::mat::implicit_dense
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    friend size_type inline num_rows(const self& A) { return size(A.my_v1); }$/;"	f	class:mtl::mat::outer_product_functor
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    friend size_type inline num_rows(const self& A) { return A.rows.size(); } \/\/\/< Number of rows$/;"	f	struct:mtl::mat::indirect
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    friend size_type inline num_rows(const self& A) $/;"	f	struct:mtl::mat::map_view
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^std::size_t inline num_rows(const mat_mat_ele_times_expr<E1, E2>& expr) $/;"	f	class:mtl::mat::std
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^inline num_rows(mat_mat_op_expr<E1, E2, SFunctor> const& expr)$/;"	f	class:mtl::mat::mat_mat_op_expr
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^std::size_t inline num_rows(const mat_mat_times_expr<E1, E2>& expr) $/;"	f	class:mtl::mat::std
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^inline num_rows(const morton_dense<Value, Mask, Parameters>& matrix)$/;"	f	class:mtl::mat::morton_dense
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^typename Collection< Vector >::size_type num_rows(const multi_vector< Vector >& A) { return A.num_rows(); }$/;"	f	namespace:mtl::mat
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    friend size_type num_rows(const self& A) { return num_rows(A.ref); }$/;"	f	class:mtl::mat::multi_vector_range
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^inline std::size_t num_rows(const poisson2D_dirichlet& A) { return A.s; } \/\/\/< Number of rows$/;"	f	namespace:mtl::mat
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    friend size_t num_rows(const self& A) { return A.num_rows(); }$/;"	f	class:mtl::mat::sparse_banded
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    friend size_type inline num_rows(const self& A) $/;"	f	struct:mtl::mat::transposed_view
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^    struct num_rows {};$/;"	s	namespace:mtl::traits
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^    struct num_rows< std::vector<Value> > $/;"	s	namespace:mtl::traits
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^    struct num_rows<Value[Rows][Cols]>$/;"	s	namespace:mtl::traits
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^    struct num_rows<Value[Size]>$/;"	s	namespace:mtl::traits
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^inline num_rows(const Collection& c)$/;"	f	class:mtl::traits::num_rows
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^inline num_rows(const recursator<Matrix>& rec)$/;"	f	class:mtl::mat::recursator
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^inline num_rows(const dense_vector<Value, Parameters>& vector)$/;"	f	class:mtl::vec::dense_vector
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    friend size_type inline num_rows(const self& v) { return num_rows(v.ref); }$/;"	f	struct:mtl::vec::map_view
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^inline std::size_t num_rows(const mat_cvec_multiplier<Matrix, VectorIn>& m) { return num_rows(m.A); }$/;"	f	namespace:mtl::vec
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    friend size_type inline num_rows(const self& v) { return mtl::traits::is_row_major<self>::value ? 1 : size(v); }$/;"	f	class:mtl::vec::strided_vector_ref
num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    friend inline size_type num_rows(const self& v)  { return num_rows(v.ref); }$/;"	f	class:mtl::vec::unrolled1
num_rows	mtl_test.cpp	/^inline std::size_t num_rows(const IdentityMatrix& A) { return A.m; }$/;"	f
num_rows	poisson.cpp	/^inline std::size_t num_rows(const GraphSymmetricMatrix& A) { $/;"	f
num_rows_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^inline num_rows_aux(const dense_vector<Value, Parameters>& , tag::row_major)$/;"	f	class:mtl::vec::dense_vector
num_rows_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^inline num_rows_aux(const dense_vector<Value, Parameters>& vector, tag::col_major)$/;"	f	class:mtl::vec::dense_vector
num_triangles	Mesh.hpp	/^	size_type num_triangles() const {$/;"	f	class:Mesh
nz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/glas_tag.hpp	/^struct nz {};$/;"	s	namespace:glas::tag
nz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^	struct nz {};$/;"	s	namespace:mtl::tag::const_iter
nz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^	struct nz {};$/;"	s	namespace:mtl::tag::iter
nz_of	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^inline nz_of(const T& x)$/;"	f	class:mtl::mtl::traits
odd_bits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^struct odd_bits$/;"	s	namespace:mtl::dilated
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    size_t offset(const Value* p) const $/;"	f	struct:mtl::detail::memory_crtp
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    size_t       offset;$/;"	m	struct:mtl::mat::compressed_key
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    utilities::maybe<size_type> offset(const Matrix& ma, size_type major, size_type minor) const $/;"	f	struct:mtl::mat::compressed2D_indexer
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    size_t offset;    $/;"	m	struct:mtl::mat::coordinate_key
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    size_type       major, offset, next_offset;$/;"	m	struct:mtl::mat::coordinate_major_cursor
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_t offset(size_t ldim, size_t r, size_t c, col_major) const $/;"	f	class:mtl::mat::dense2D_indexer
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_t offset(size_t ldim, size_t r, size_t c, row_major) const $/;"	f	class:mtl::mat::dense2D_indexer
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    size_t               offset;$/;"	m	struct:mtl::mat::sparse_banded_key
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    utilities::maybe<size_type> offset(size_type r, size_type c) const$/;"	f	class:mtl::mat::sparse_banded
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	/^	static unsigned const offset= MaxDepth - 1;$/;"	m	struct:mtl::functor::cursor_pseudo_dot_block
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	/^	static unsigned const offset= MaxDepth - Depth;$/;"	m	struct:mtl::functor::cursor_pseudo_dot_block
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct offset<mtl::mat::compressed2D<Elt, Parameters> >$/;"	s	namespace:mtl::traits
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^template <class Matrix> struct offset {};$/;"	s	namespace:mtl::traits
offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    size_type offset(const_pointer p) const $/;"	f	class:mtl::vec::strided_vector_ref
offset_from_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    offset_from_key(const matrix_type& ) {} $/;"	f	struct:mtl::detail::offset_from_key
offset_from_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct offset_from_key$/;"	s	namespace:mtl::detail
offset_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^inline offset_map(const Matrix& A)$/;"	f	class:mtl::mat::mtl::traits::offset
ok_	CS207/SDLViewer.hpp	/^    bool ok_;$/;"	m	struct:CS207::SDLViewer::safe_lock
omp_size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/omp_size_type.hpp	/^    struct omp_size_type$/;"	s	namespace:mtl::traits
on_boundary	poisson.cpp	/^bool on_boundary(const Point& p) {$/;"	f
on_heap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct on_heap {};$/;"	s	namespace:mtl
on_indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    bool        on_indices; \/\/ if true sorted on indices, otherwise on values$/;"	m	class:mtl::vec::sparse_vector
on_stack	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    static bool const                         on_stack= OnStack;$/;"	m	struct:mtl::detail::memory_crtp
on_stack	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    static bool const                         on_stack= Parameters::on_stack;$/;"	m	struct:mtl::mat::base_matrix
on_stack	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    static bool const                         on_stack= Parameters::on_stack;$/;"	m	struct:mtl::mat::base_sub_matrix
on_stack	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/parameter.hpp	/^    static bool const   on_stack= OnStack;$/;"	m	struct:mtl::mat::parameters
on_stack	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct on_stack {};$/;"	s	namespace:mtl
on_stack	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/parameter.hpp	/^    static const bool   on_stack= OnStack;$/;"	m	struct:mtl::vec::parameters
one	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^inline Element one(const Element& v)$/;"	f	namespace:math
one	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    value_type zero, one, eps;$/;"	m	class:mtl::mat::eigenvalue_solver
one_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/one_norm.hpp	/^	inline one_norm(const Matrix& matrix)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
one_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/one_norm.hpp	/^	inline one_norm(const Vector& vector)$/;"	f	class:mtl::vec::traits::enable_if_vector
one_norm_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^struct one_norm_functor$/;"	s	namespace:mtl::vec
ones	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/ones.hpp	/^	ones_matrix<> inline ones(std::size_t r, std::size_t c)$/;"	f	namespace:mtl::mat
ones	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/ones.hpp	/^	ones_matrix<Value> inline ones(std::size_t r, std::size_t c)$/;"	f	namespace:mtl::mat
ones_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    ones_functor(size_type nr, size_type nc) : nr(nr), nc(nc) {}$/;"	f	class:mtl::mat::ones_functor
ones_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^class ones_functor$/;"	c	namespace:mtl::mat
ones_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    ones_matrix(size_type r, size_type c) : base(functor_type(r, c)) {}$/;"	f	class:mtl::mat::ones_matrix
ones_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^class ones_matrix$/;"	c	namespace:mtl::mat
op_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    typedef mat_mat_op_expr< E1, E2, mtl::sfunctor::times<typename E1::value_type, typename E2::value_type> > op_base;$/;"	t	struct:mtl::mat::mat_mat_ele_times_expr
op_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    typedef mat_mat_op_expr< E1, E2, mtl::sfunctor::minus<typename E1::value_type, typename E2::value_type> > op_base;$/;"	t	struct:mtl::mat::mat_mat_minus_expr
op_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    typedef mat_mat_op_expr< E1, E2, mtl::sfunctor::plus<typename E1::value_type, typename E2::value_type> > op_base;$/;"	t	struct:mtl::mat::mat_mat_plus_expr
op_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef mat_mat_op_expr< E1, E2, mtl::sfunctor::times<typename Collection<E1>::value_type, typename Collection<E2>::value_type> > op_base;$/;"	t	struct:mtl::mat::mat_mat_times_expr
operation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^namespace mtl { namespace operation {$/;"	n	namespace:mtl
operation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^namespace mtl { namespace operation {$/;"	n	namespace:mtl
operations	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace operations {$/;"	n	namespace:mtl
operations	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace operations {}$/;"	n	namespace:mtl
operations	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^namespace mtl { namespace operations {$/;"	n	namespace:mtl
operations	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/shift_block.hpp	/^namespace mtl { namespace operations {$/;"	n	namespace:mtl
operations	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/shift_block_detail.hpp	/^namespace mtl { namespace operations { namespace detail {$/;"	n	namespace:mtl
operations	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^namespace mtl { namespace operations {$/;"	n	namespace:mtl
operator !=	CS207/Util.hpp	/^  friend bool operator!=(const T& a, const T& b) { return !(a == b); }$/;"	f	struct:equality_comparable
operator !=	Examples/distance_dispatch.cpp	/^  bool operator!=(const dumb_iterator& other) { return it_ != other.it_; }$/;"	f	struct:dumb_iterator
operator !=	Examples/iterator_adaptor.cpp	/^  bool operator!=(const derived_type& m) const {    \/\/ Not Equality (p!=q)$/;"	f	class:iterator_adaptor
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    bool operator!=(const self& cc) const $/;"	f	class:mtl::detail::base_cursor
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    bool operator!= (self const& x) const$/;"	f	struct:mtl::dilated::dilated_int
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	bool operator!=(const self& cc) const { return !(*this == cc); }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	bool operator!=(const self& cc) const { return !(*this == cc); }$/;"	f	struct:mtl::traits::detail::matrix_element_key
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    bool operator!= (compressed_key const& other) const { return !(*this == other); }$/;"	f	struct:mtl::mat::compressed_key
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    bool operator!= (coordinate_key const& other) const { return offset != other.offset; }$/;"	f	struct:mtl::mat::coordinate_key
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    bool operator!=(const self& that) const$/;"	f	struct:mtl::mat::coordinate_major_cursor
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    bool operator!=(const self& that) const$/;"	f	struct:mtl::mat::coordinate_minor_cursor
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    bool operator!= (self const& x)$/;"	f	struct:mtl::mat::morton_dense_key
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    bool operator!= (sparse_banded_key const& other) const { return !(*this == other); }$/;"	f	struct:mtl::mat::sparse_banded_key
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator!=(const T& x, const complex<U>& y)$/;"	f	class:std::boost::enable_if
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator!=(const complex<T>& x, const U& y)$/;"	f	class:std::boost::enable_if
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator!=(const complex<T>& x, const complex<U>& y)$/;"	f	class:std::boost::enable_if
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	/^    inline operator!=(const Op1& op1, const Op2& op2)$/;"	f	class:mtl::vec::boost::enable_if
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	bool operator!=(const iset& that) const { return !(*this == that); } \/\/\/< Inequality$/;"	f	class:mtl::iset
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    bool operator!=(Adaptor const& x) const$/;"	f	struct:mtl::utilities::detail::adaptor_operators
operator !=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator!=(const zip_it& other) const { check(other); return p != other.p; }$/;"	f	struct:mtl::utility::zip_it
operator !=	Point.hpp	/^  bool operator!=(const Point& b) const {$/;"	f	struct:Point
operator &	BoundingBox.hpp	/^BoundingBox operator&(BoundingBox b1, const BoundingBox& b2) {$/;"	f
operator &=	BoundingBox.hpp	/^  BoundingBox& operator&=(const BoundingBox& b) {$/;"	f	class:BoundingBox
operator ()	CS207/SDLViewer.hpp	/^	Color operator()(const NODE& n) {$/;"	f	struct:CS207::PoissonColor
operator ()	CS207/SDLViewer.hpp	/^  Color operator()(const NODE&) {$/;"	f	struct:CS207::DefaultColor
operator ()	CS207/SDLViewer.hpp	/^  Point operator()(const NODE& n) {$/;"	f	struct:CS207::PoissonPosition
operator ()	CS207/SDLViewer.hpp	/^  Point operator()(const NODE& node) {$/;"	f	struct:CS207::DefaultPosition
operator ()	Examples/expr_template.cpp	/^  const double& operator()(unsigned i, unsigned j) const {$/;"	f	struct:Matrix
operator ()	Examples/expr_template.cpp	/^  double operator()(unsigned i, unsigned j) const {$/;"	f	struct:MatAdd
operator ()	Examples/expr_template.cpp	/^  double operator()(unsigned i, unsigned j) const {$/;"	f	struct:MatExpr
operator ()	Examples/expr_template.cpp	/^  double operator()(unsigned i, unsigned j) const {$/;"	f	struct:MatMult
operator ()	Examples/expr_template.cpp	/^  double operator()(unsigned i, unsigned j) const {$/;"	f	struct:MatScale
operator ()	Examples/expr_template.cpp	/^  double& operator()(unsigned i, unsigned j) {$/;"	f	struct:Matrix
operator ()	Examples/func_params.cpp	/^  bool operator()(int a, int b) const {$/;"	f	struct:s_greater
operator ()	Graph.hpp	/^	bool operator()(const edge_data& e_data) {$/;"	f	struct:Graph::uid_predicate
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/comparators.hpp	/^	POINTER operator()(const Type *const a) const {$/;"	f	struct:compare::address_hasher
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/comparators.hpp	/^	bool operator()(const Type *const a, const Type *const b) const {$/;"	f	struct:compare::address_compare
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/comparators.hpp	/^	bool operator()(const Type *const a, const Type *const b) const {$/;"	f	struct:compare::address_compare_equal
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    void operator()(size_type i) { at<0>(i); }$/;"	f	struct:itl::pc::ic_0_evaluator
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	Element*& operator()(Element* element) const {$/;"	f	struct:itl::pc::heap::GetLeftChild
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	Element*& operator()(Element* element) const {$/;"	f	struct:itl::pc::heap::GetParent
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	Element*& operator()(Element* element) const {$/;"	f	struct:itl::pc::heap::GetRightChild
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	Key& operator()(Element* element) const {$/;"	f	struct:itl::pc::heap::GetKey
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	bool operator()(const Element *const el) const {$/;"	f	struct:itl::pc::IsRemoved
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	inline bool operator()(Element* first, Element* second) const {$/;"	f	struct:itl::pc::heap::DegreeCompare
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	inline int operator()($/;"	f	struct:itl::pc::MinConnectedNodesEstimation
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^	long operator()(const Type*& object) const {$/;"	f	struct:itl::pc::AddressHasher
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^    Vector& operator()(Vector& x, const RHSVector& b) const$/;"	f	class:itl::gauss_seidel
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^    Vector& operator()(Vector& x, const RHSVector& b) const$/;"	f	class:itl::jacobi
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^    Vector& operator()(Vector& x, const RHSVector& b) const$/;"	f	class:itl::jor
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/repeated.hpp	/^    Vector& operator()(Vector& x, const RHSVector& b) const$/;"	f	class:itl::repeated
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^    Vector& operator()(Vector& x, const RHSVector& b) const$/;"	f	class:itl::sor
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/armijo.hpp	/^    operator() (const Vector& x, const Vector& d, F f, Grad grad_f) const$/;"	f	class:itl::armijo
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/wolf.hpp	/^    operator() (const Vector& x, const Vector& d, F f, Grad grad_f) const$/;"	f	class:itl::wolf
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/bfgs.hpp	/^    void operator() (Matrix& H, const Vector& y, const Vector& s)$/;"	f	struct:itl::bfgs
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/broyden.hpp	/^    void operator() (Matrix& H, const Vector& y, const Vector& s)$/;"	f	struct:itl::broyden
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/dfp.hpp	/^    void operator() (Matrix& H, const Vector& y, const Vector& s)$/;"	f	struct:itl::dfp
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/psb.hpp	/^    void operator() (Matrix& H, const Vector& y, const Vector& s)$/;"	f	struct:itl::psb
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/sr1.hpp	/^    void operator() (Matrix& H, const Vector& y, const Vector& s)$/;"	f	struct:itl::sr1
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^    Element operator() (const add<Element>&, const Element& ref) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^    Element operator() (const bitwise_and<Element>&, const Element&) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^    Element operator() (const bitwise_or<Element>&, const Element&) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^    Element operator() (const max<Element>&, const Element& ) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^    Element operator() (const min<Element>&, const Element& ) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^    Element operator() (const mult<Element>&, const Element& ref) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^    double operator() (const max<double>&, const double& ) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^    float operator() (const max<float>&, const float& ) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^    long double operator() (const max<long double>&, const long double& ) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^    std::string operator() (const add<std::string>&, const std::string&) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/inverse.hpp	/^    Element operator()(const add<Element>&, const Element& v) const$/;"	f	struct:math::inverse_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/inverse.hpp	/^    Element operator()(const mult<Element>&, const Element& v) const$/;"	f	struct:math::inverse_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	/^	bool operator() (const Operation&, const Element& v)$/;"	f	struct:math::detail::non_zero_is_invertible_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	/^    bool operator() (const add<Element>&, const Element&) const $/;"	f	struct:math::is_invertible_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/is_invertible.hpp	/^    bool operator() (const mult<Element>&, const Element& v) const $/;"	f	struct:math::is_invertible_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    Element operator() (const Element& x, const Element& y)$/;"	f	struct:math::add
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    Element operator() (const Element& x, const Element& y)$/;"	f	struct:math::bitwise_and
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    Element operator() (const Element& x, const Element& y)$/;"	f	struct:math::bitwise_or
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    Element operator() (const Element& x, const Element& y)$/;"	f	struct:math::bitwise_xor
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    Element operator() (const Element& x, const Element& y)$/;"	f	struct:math::max
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    Element operator() (const Element& x, const Element& y)$/;"	f	struct:math::min
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    Element operator() (const Element& x, const Element& y)$/;"	f	struct:math::mult
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    R operator() (const A1& x, const A2& y)$/;"	f	struct:math::heterogeneous_add
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    R operator() (const A1& x, const A2& y)$/;"	f	struct:math::heterogeneous_mult
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    result_type operator() (const Element& x, const Element& y)$/;"	f	struct:math::std::add
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/operators.hpp	/^    result_type operator() (const Element& x, const Element& y)$/;"	f	struct:math::std::mult
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    operator() (const I& inner, const Vector& v)$/;"	f	struct:math::induced_norm_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    inline void operator() (T& x) const$/;"	f	struct:mtl::dilated::masking
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    proxy_type operator() (size_type row, size_type col)$/;"	f	struct:mtl::detail::trivial_inserter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/arprec.hpp	/^	mp_complex operator() (const add<mp_complex>&, const mp_complex& \/*ref*\/) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    int operator()(VectorX& x, const VectorB& b) const {return 0;}$/;"	f	class:mtl::mat::umfpack::solver
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    int operator()(VectorX& x, const VectorB& b)$/;"	f	class:mtl::mat::umfpack::solver
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    int operator()(const VectorB& b, VectorX& x) const {return 0;}$/;"	f	class:mtl::mat::umfpack::solver
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_filter.hpp	/^    bool operator()(std::size_t) const { return true; }$/;"	f	class:mtl::io::read_filter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_filter.hpp	/^    bool operator()(std::size_t, std::size_t) const { return true; }$/;"	f	class:mtl::io::read_filter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	    value_type operator() (key_type const& key) const$/;"	f	struct:mtl::traits::detail::banded_value
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    sub_matrix_type operator()(view_type const& view, size_type begin_r, size_type end_r, $/;"	f	struct:mtl::mat::sub_matrix_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    value_type operator() (size_type r, size_type c) const$/;"	f	struct:mtl::mat::banded_view
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    value_type operator()(size_type i, size_type j) const$/;"	f	class:mtl::mat::block_diagonal2D
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	bool operator()(const std::pair<F, S>& x, const std::pair<F, S>& y) const$/;"	f	struct:mtl::mat::detail::cmp_first
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    const_reference operator() (size_type row, size_type col) const$/;"	f	class:mtl::mat::compressed2D
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    proxy_type operator() (size_type row, size_type col)$/;"	f	struct:mtl::mat::compressed2D_inserter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    utilities::maybe<size_type> operator() (const Matrix& ma, size_pair major_minor) const $/;"	f	struct:mtl::mat::compressed2D_indexer
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    utilities::maybe<size_type> operator() (const Matrix& ma, size_type row, size_type col) const$/;"	f	struct:mtl::mat::compressed2D_indexer
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    proxy_type operator() (size_type row, size_type col)$/;"	f	struct:mtl::mat::coordinate2D_inserter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    value_type operator() (const size_type r, const size_type c) const$/;"	f	class:mtl::mat::coordinate2D
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^	Matrix& operator()(std::initializer_list<std::initializer_list<Value2> > values, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const Source& source, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const Source& source, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_minus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const Source& source, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_plus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const Value src[Rows][Cols], Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const io::matrix_file<IFStream, OFStream>& file, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_ele_times_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_ele_times_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_minus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_ele_times_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_plus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_minus_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_minus_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_minus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_minus_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_plus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_plus_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_plus_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_minus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_plus_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_plus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_times_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_times_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_minus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const mat_mat_times_expr<E1, E2>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_plus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator()(const multi_vector<Vector>& src, Matrix& matrix)$/;"	f	struct:mtl::mat::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        matrix_type operator() (const mult<matrix_type>&, const matrix_type& ref) const$/;"	f	struct:math::identity_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        operator()(matrix_type const& matrix, size_type begin_r, size_type end_r, size_type begin_c, size_type end_c)$/;"	f	struct:mtl::mat::sub_matrix_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        sub_matrix_type operator()(matrix_type& matrix, size_type begin_r, size_type end_r, size_type begin_c, size_type end_c)$/;"	f	struct:mtl::mat::sub_matrix_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    const_reference operator() (size_t r, size_t c) const $/;"	f	class:mtl::mat::dense2D
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_t operator() (const dense2D<Value, Parameters>& ma, size_t r, size_t c) const$/;"	f	class:mtl::mat::dense2D_indexer
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    value_type& operator() (size_t r, size_t c)$/;"	f	class:mtl::mat::dense2D
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    value_type operator()(size_type r, size_type c) const$/;"	f	class:mtl::mat::ell_matrix
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    typename base::value_type operator()(size_type r, size_type c) const { return base::operator()(r, c); }$/;"	f	struct:mtl::mat::hermitian_view
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    result_type operator()(size_type r, size_type c) const $/;"	f	class:mtl::mat::hilbert_functor
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    result_type operator()(size_type r, size_type c) const { return my_v1[r] * my_v2[c]; }$/;"	f	class:mtl::mat::outer_product_functor
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    result_type operator()(size_type, size_type) const { return Value(1); }$/;"	f	class:mtl::mat::ones_functor
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    value_type operator() (size_type r, size_type c) const { return my_functor(r, c); }$/;"	f	class:mtl::mat::implicit_dense
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    value_type operator() (size_type r, size_type c) const$/;"	f	struct:mtl::mat::indirect
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    size_type operator() (key_type const& key) const$/;"	f	struct:mtl::traits::detail::mapped_col
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    size_type operator() (key_type const& key) const$/;"	f	struct:mtl::traits::detail::mapped_row
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    value_type operator() (key_type const& key) const$/;"	f	struct:mtl::traits::detail::map_value
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	result_type operator() (const Matrix& matrix) const$/;"	f	struct:mtl::sfunctor::conj_aux
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    const_sub_matrix_type operator()(view_type const& view, size_type begin_r, size_type end_r, $/;"	f	struct:mtl::mat::sub_matrix_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    value_type operator() (size_type r, size_type c) const$/;"	f	struct:mtl::mat::map_view
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^    proxy_type operator() (size_type row, size_type col)  $/;"	f	class:mtl::mat::mapped_inserter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    const_dereference_type operator() (size_type row, size_type col) const$/;"	f	struct:mtl::mat::mat_mat_op_expr
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    operator()(std::size_t r, std::size_t c) const$/;"	f	struct:mtl::mat::mat_mat_times_expr
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    operator()(std::size_t r, std::size_t c)$/;"	f	struct:mtl::mat::mat_mat_times_expr
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^        operator()(matrix_type const& matrix, size_type begin_r, size_type end_r, size_type begin_c, size_type end_c)$/;"	f	struct:mtl::mat::sub_matrix_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^        sub_matrix_type operator()(matrix_type& matrix, size_type begin_r, size_type end_r, size_type begin_c, size_type end_c)$/;"	f	struct:mtl::mat::sub_matrix_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    const_reference operator() (size_type row, size_type col) const$/;"	f	class:mtl::mat::morton_dense
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    value_type operator() (key_type const& key) const$/;"	f	class:mtl::mat::morton_dense
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    value_type& operator() (size_type row, size_type col)$/;"	f	class:mtl::mat::morton_dense
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    void operator()(key_type const& key, value_type const& value)$/;"	f	class:mtl::mat::morton_dense
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    const_reference operator() (size_type i, size_type j) const { return data[j][i]; }$/;"	f	class:mtl::mat::multi_vector
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    reference operator() (size_type i, size_type j) { return data[j][i]; }$/;"	f	class:mtl::mat::multi_vector
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    const_reference operator() (size_type i, size_type j) const { return ref[r.to_range(j)][i]; }$/;"	f	class:mtl::mat::multi_vector_range
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    proxy_type operator() (size_type row, size_type col)  $/;"	f	class:mtl::mat::shifted_inserter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    proxy_type operator() (size_type row, size_type col)$/;"	f	struct:mtl::mat::sparse_banded_inserter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    value_type operator()(size_type r, size_type c) const$/;"	f	class:mtl::mat::sparse_banded
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    size_type operator() (key_type const& key) const$/;"	f	struct:mtl::traits::detail::transposed_col
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    size_type operator() (key_type const& key) const$/;"	f	struct:mtl::traits::detail::transposed_row
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    access_type operator() (size_type r, size_type c)$/;"	f	struct:mtl::mat::transposed_view
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    const_reference operator() (size_type r, size_type c) const$/;"	f	struct:mtl::mat::transposed_view
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    const_sub_matrix_type operator()(matrix_type const& A, size_type begin_r, size_type end_r, $/;"	f	struct:mtl::mat::sub_matrix_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    sub_matrix_type operator()(matrix_type& A, size_type begin_r, size_type end_r, size_type begin_c, size_type end_c)$/;"	f	struct:mtl::mat::sub_matrix_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjoint.hpp	/^	type operator()(const LinOp& A)$/;"	f	struct:mtl::mat::traits::adjoint
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^	void operator() (Matrix & matrix)$/;"	f	struct:mtl::mat::with_bracket::cholesky_base_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^	void operator() (MatrixNE & NE, const MatrixNW & NW, const MatrixSW & SW)$/;"	f	struct:mtl::mat::with_bracket::schur_update_base_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^	void operator() (MatrixSE & SE, const MatrixSW & SW)$/;"	f	struct:mtl::mat::with_bracket::tri_schur_base_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^	void operator() (MatrixSW & SW, const MatrixNW & NW)$/;"	f	struct:mtl::mat::with_bracket::tri_solve_base_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^	void operator()(MatrixNE & NE, const MatrixNW & NW, const MatrixSW & SW)$/;"	f	struct:mtl::mat::detail::mult_schur_update_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void operator()(Matrix& matrix)$/;"	f	struct:mtl::mat::recursive_cholesky_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void operator()(Matrix& matrix, Visitor vis)$/;"	f	struct:mtl::mat::recursive_cholesky_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	result_type operator() (const Value& v) const$/;"	f	struct:mtl::sfunctor::conj_aux
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	result_type operator() (const std::complex<Value>& v) const$/;"	f	struct:mtl::sfunctor::conj_aux
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	/^	Value operator() (Cursor1 i1, Cursor1 end1, Prop1& prop1, Cursor2 i2, Prop2& prop2)$/;"	f	struct:mtl::functor::cursor_pseudo_dot_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cursor_pseudo_dot.hpp	/^	void operator() (Cursor1 i1, Prop1& prop1, Cursor2 i2, Prop2& prop2,$/;"	f	struct:mtl::functor::cursor_pseudo_dot_block
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^	result_type operator() (const Matrix& matrix) const$/;"	f	struct:mtl::tfunctor::divide_by
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^	result_type operator() (const Value1& v1) const$/;"	f	struct:mtl::tfunctor::divide_by
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^	result_type operator() (const Vector& vector) const$/;"	f	struct:mtl::tfunctor::divide_by
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^	void operator()(RecA const& rec_a, RecB const& rec_b, RecC& rec_c)$/;"	f	struct:mtl::wrec::gen_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::fully_unroll_fixed_size_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    operator()(MatrixA const&, MatrixB const&, MatrixC& C) { if (Assign::init_to_zero) set_to_zero(C); }$/;"	f	struct:mtl::fully_unroll_fixed_size_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    operator()(MatrixA const&, MatrixB const&, MatrixC&) {}$/;"	f	struct:mtl::fully_unroll_fixed_size_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_blas_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_cursor_dmat_dmat_mult_ft
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_cursor_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_dmat_dmat_mult_ft
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_platform_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_recursive_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_tiling_22_dmat_dmat_mult_ft
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_tiling_22_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_tiling_44_dmat_dmat_mult_ft
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_tiling_44_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_tiling_dmat_dmat_mult_ft
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::gen_tiling_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::size_switch_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(MatrixA const& A, MatrixB const& B, MatrixC& C)$/;"	f	struct:mtl::static_switch_dmat_dmat_mult_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(const dense2D<double, ParaA>& A, const dense2D<double, ParaB>& B, $/;"	f	struct:mtl::gen_blas_dmat_dmat_mult_ft
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(const dense2D<float, ParaA>& A, const dense2D<float, ParaB>& B, $/;"	f	struct:mtl::gen_blas_dmat_dmat_mult_ft
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(const dense2D<std::complex<double>, ParaA>& A, const dense2D<std::complex<double>, ParaB>& B, $/;"	f	struct:mtl::gen_blas_dmat_dmat_mult_ft
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void operator()(const dense2D<std::complex<float>, ParaA>& A, const dense2D<std::complex<float>, ParaB>& B, $/;"	f	struct:mtl::gen_blas_dmat_dmat_mult_ft
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^		Value operator()(const Value& v) { return v; }$/;"	f	struct:mtl::vec::detail::without_conj
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^		operator() (const Value& v)$/;"	f	struct:mtl::vec::detail::with_conj
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	/^    void operator() (std::size_t i) { at<0>(i); }$/;"	f	struct:mtl::vec::fused_index_evaluator
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^	result_type operator()(const Value& v) const$/;"	f	struct:mtl::sfunctor::imag
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^	result_type operator()(const std::complex<Value>& v) const$/;"	f	struct:mtl::sfunctor::imag
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	void operator()(const VectorIn& v, VectorOut& w) const$/;"	f	struct:mtl::mat::detail::lower_trisolve_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    void operator()(const Matrix& A, const VectorIn& v, const CBlock& cj, TBlock& tmp) const$/;"	f	struct:mtl::mat::crs_cvec_mult_block
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^	    void operator()(const value_type& x, const pos_type& p)$/;"	f	struct:mtl::vec::max_pos_functor
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^	    void operator()(const value_type& x, const pos_type& p)$/;"	f	struct:mtl::vec::min_pos_functor
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	/^    void operator() (MultiAction const& action) const$/;"	f	struct:mtl::multi_action_block
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	/^    void operator() (MultiAction const& action) const$/;"	f	struct:mtl::multi_action_helper
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	/^    void operator() (MultiAction& action) const$/;"	f	struct:mtl::multi_action_block
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	/^    void operator() (MultiAction& action) const$/;"	f	struct:mtl::multi_action_helper
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^	type operator()(const Value[Rows][Cols]) { return Cols; }$/;"	f	struct:mtl::traits::num_cols
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^	type operator()(const Value[Size]) { return 1; }$/;"	f	struct:mtl::traits::num_cols
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^	type operator()(const std::vector<Value>& ) { return 1; }$/;"	f	struct:mtl::traits::num_cols
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^	type operator()(const Value[Rows][Cols]) { return Rows; }$/;"	f	struct:mtl::traits::num_rows
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^	type operator()(const Value[Size]) { return Size; }$/;"	f	struct:mtl::traits::num_rows
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^	type operator()(const std::vector<Value>& v) { return v.size(); }$/;"	f	struct:mtl::traits::num_rows
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	/^    void operator()(const morton_dense<double, MaskA, PA>& a, const morton_dense<double, MaskB, PB>& b, $/;"	f	struct:mtl::gen_platform_dmat_dmat_mult_ft
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_size.hpp	/^	void operator()(const T& x) $/;"	f	struct:mtl::print_size_max
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^    T operator()() const { return rand(); }$/;"	f	struct:mtl::seed
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^	Value operator()(const Value& v) const$/;"	f	struct:mtl::sfunctor::real
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^	result_type operator()(const std::complex<Value>& v) const$/;"	f	struct:mtl::sfunctor::real
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^	result_type operator() (const Matrix& matrix) const$/;"	f	struct:mtl::tfunctor::rscale
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^	result_type operator() (const Value1& v1) const$/;"	f	struct:mtl::tfunctor::rscale
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^	result_type operator() (const Vector& vector) const$/;"	f	struct:mtl::tfunctor::rscale
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    result_type operator() (const Matrix& matrix) const$/;"	f	struct:mtl::tfunctor::scale
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    result_type operator() (const Value2& v2) const$/;"	f	struct:mtl::tfunctor::scale
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    result_type operator() (const Vector& vector) const$/;"	f	struct:mtl::tfunctor::scale
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (Value1& v1, const Value2& v2) const$/;"	f	struct:mtl::sfunctor::assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (Value1& v1, const Value2& v2) const$/;"	f	struct:mtl::sfunctor::divide_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (Value1& v1, const Value2& v2) const$/;"	f	struct:mtl::sfunctor::minus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (Value1& v1, const Value2& v2) const$/;"	f	struct:mtl::sfunctor::plus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (Value1& v1, const Value2& v2) const$/;"	f	struct:mtl::sfunctor::times_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (const Value& v) $/;"	f	struct:mtl::sfunctor::abs
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (const Value& v) $/;"	f	struct:mtl::sfunctor::sqrt
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (const Value& v) $/;"	f	struct:mtl::sfunctor::square
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (const Value& v) const $/;"	f	struct:mtl::sfunctor::negate
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (const Value& v) const$/;"	f	struct:mtl::sfunctor::identity
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (const Value1& v1, const Value2& v2) const$/;"	f	struct:mtl::sfunctor::divide
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (const Value1& v1, const Value2& v2) const$/;"	f	struct:mtl::sfunctor::minus
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (const Value1& v1, const Value2& v2) const$/;"	f	struct:mtl::sfunctor::plus
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator() (const Value1& v1, const Value2& v2) const$/;"	f	struct:mtl::sfunctor::times
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator()(argument_type x) $/;"	f	struct:mtl::sfunctor::compose
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator()(first_argument_type x, second_argument_type y)$/;"	f	struct:mtl::sfunctor::compose_binary
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator()(first_argument_type x, second_argument_type y)$/;"	f	struct:mtl::sfunctor::compose_both
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator()(first_argument_type x, second_argument_type y)$/;"	f	struct:mtl::sfunctor::compose_first
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    result_type operator()(first_argument_type x, second_argument_type y)$/;"	f	struct:mtl::sfunctor::compose_second
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^	type operator()(const Value[Rows][Cols]) { return Rows * Cols; }$/;"	f	struct:mtl::traits::size
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^	type operator()(const Value[Size]) { return Size; }$/;"	f	struct:mtl::traits::size
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^	type operator()(const std::vector<Value>& v) { return v.size(); }$/;"	f	struct:mtl::traits::size
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    void operator()(MatrixA const& a, MatrixB const& b, MatrixC& c)$/;"	f	struct:mtl::functor::gen_smat_dmat_mult
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    void operator()(MatrixA const& a, MatrixB const& b, MatrixC& c)$/;"	f	struct:mtl::functor::gen_tiling_smat_dmat_mult
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    result_type operator() (const Value1& v1) const$/;"	f	struct:mtl::tfunctor::right_max
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    result_type operator() (const Value1& v1) const$/;"	f	struct:mtl::tfunctor::right_min
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    result_type operator() (const Value1& v1) const$/;"	f	struct:mtl::tfunctor::right_minus
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    result_type operator() (const Value1& v1) const$/;"	f	struct:mtl::tfunctor::right_plus
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    result_type operator() (const Value2& v2) const$/;"	f	struct:mtl::tfunctor::left_max
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    result_type operator() (const Value2& v2) const$/;"	f	struct:mtl::tfunctor::left_min
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    result_type operator() (const Value2& v2) const$/;"	f	struct:mtl::tfunctor::left_minus
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    result_type operator() (const Value2& v2) const$/;"	f	struct:mtl::tfunctor::left_plus
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Element& operator() (Element& x, Value const& y)$/;"	f	struct:mtl::operations::update_adapter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Element& operator() (Element& x, Value const& y)$/;"	f	struct:mtl::operations::update_minus
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Element& operator() (Element& x, Value const& y)$/;"	f	struct:mtl::operations::update_plus
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Element& operator() (Element& x, Value const& y)$/;"	f	struct:mtl::operations::update_store
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    Element& operator() (Element& x, Value const& y)$/;"	f	struct:mtl::operations::update_times
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	Vector operator()(const Vector& v) const$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void operator()(const VectorIn& v, VectorOut& w) const$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    bool operator() (Recursator const& recursator) const$/;"	f	struct:mtl::recursion::bound_test
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    bool operator() (Recursator const& recursator) const$/;"	f	struct:mtl::recursion::bound_test_static
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    bool operator() (Recursator const& recursator) const$/;"	f	struct:mtl::recursion::max_dim_test
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    bool operator() (Recursator const& recursator) const$/;"	f	struct:mtl::recursion::max_dim_test_static
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    bool operator() (Recursator const& recursator) const$/;"	f	struct:mtl::recursion::min_dim_test
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    bool operator() (Recursator const& recursator) const$/;"	f	struct:mtl::recursion::undivisible_min_dim_test
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/simplify_base_case_matrix.hpp	/^	BaseCaseMatrix operator()(Matrix const& matrix, BaseCaseTest const)$/;"	f	struct:mtl::recursion::impl::simplify_base_case_matrix
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/simplify_base_case_matrix.hpp	/^	Matrix operator()(Matrix const& matrix, BaseCaseTest const)$/;"	f	struct:mtl::recursion::impl::simplify_base_case_matrix
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    Value operator() (Key key) const $/;"	f	struct:mtl::detail::coordinate2D_const_value
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    Value operator() (Key key) const $/;"	f	struct:mtl::detail::sparse_banded_const_value
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    const value_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::const_value_from_other
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    const value_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::value_from_other
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    size_type operator() (Key key) const $/;"	f	struct:mtl::detail::sparse_banded_col
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    size_type operator() (Key key) const $/;"	f	struct:mtl::detail::sparse_banded_row
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    size_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::offset_from_key
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Collection::size_type operator() (Key const& key) const$/;"	f	struct:mtl::detail::index_from_offset
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::size_type operator() (Key const& key) const$/;"	f	struct:mtl::detail::col_in_element_key
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::size_type operator() (Key const& key) const$/;"	f	struct:mtl::detail::major_in_element_key
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::size_type operator() (Key const& key) const$/;"	f	struct:mtl::detail::row_in_element_key
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::size_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::col_in_key
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::size_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::indexer_col_ref
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::size_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::indexer_minor_ref
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::size_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::indexer_row_ref
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::size_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::major_in_key
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::size_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::row_in_key
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::value_type const operator() (const typename Matrix::key_type key) const$/;"	f	class:mtl::detail::direct_const_value::Matrix
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::value_type operator() (Key const& key) const$/;"	f	struct:mtl::detail::const_value_in_element_key
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::value_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::matrix_const_value_ref
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::value_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::matrix_offset_const_value
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::value_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::matrix_offset_value
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::value_type operator() (key_type const& key) const$/;"	f	struct:mtl::detail::matrix_value_ref
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Matrix::value_type operator() (typename Matrix::key_type const& key) const$/;"	f	struct:mtl::detail::direct_value
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Parameters::size_type operator() (Key key) const $/;"	f	struct:mtl::detail::coordinate2D_col
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typename Parameters::size_type operator() (Key key) const $/;"	f	struct:mtl::detail::coordinate2D_row
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    void operator() (key_type const& key, value_type value) const$/;"	f	struct:mtl::detail::value_from_other
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    void operator() (typename Matrix::key_type const& key, value_type const& value)$/;"	f	struct:mtl::detail::matrix_offset_value
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    void operator() (typename Matrix::key_type const& key, value_type const& value)$/;"	f	struct:mtl::detail::matrix_value_ref
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    void operator() (typename Matrix::key_type const& key, value_type value)$/;"	f	struct:mtl::detail::direct_value
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator()(const zip_ref<T, U>& x, const zip_ref<T, U>& y) const$/;"	f	struct:mtl::utility::abs_greater_0
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator()(const zip_ref<T, U>& x, const zip_ref<T, U>& y) const$/;"	f	struct:mtl::utility::greater_0
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator()(const zip_ref<T, U>& x, const zip_ref<T, U>& y) const$/;"	f	struct:mtl::utility::less_0
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator()(const zip_ref<T, U>& x, const zip_value<T, U>& y) const$/;"	f	struct:mtl::utility::abs_greater_0
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator()(const zip_ref<T, U>& x, const zip_value<T, U>& y) const$/;"	f	struct:mtl::utility::greater_0
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator()(const zip_ref<T, U>& x, const zip_value<T, U>& y) const$/;"	f	struct:mtl::utility::less_0
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator()(const zip_value<T, U>& x, const zip_ref<T, U>& y) const$/;"	f	struct:mtl::utility::abs_greater_0
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator()(const zip_value<T, U>& x, const zip_ref<T, U>& y) const$/;"	f	struct:mtl::utility::greater_0
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator()(const zip_value<T, U>& x, const zip_ref<T, U>& y) const$/;"	f	struct:mtl::utility::less_0
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^     const_dereference_type operator() ( size_type i ) const {$/;"	f	class:mtl::vec::vec_vec_asgn_expr
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	type operator()(Vector& vector, const Source& src)$/;"	f	struct:mtl::vec::detail::assign_assigner
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	type operator()(Vector& vector, const Source& src)$/;"	f	struct:mtl::vec::detail::assign_decrementer
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	type operator()(Vector& vector, const Source& src)$/;"	f	struct:mtl::vec::detail::assign_divider
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	type operator()(Vector& vector, const Source& src)$/;"	f	struct:mtl::vec::detail::assign_incrementer
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	type operator()(Vector& vector, const Source& src)$/;"	f	struct:mtl::vec::detail::assign_multiplyer
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	type operator()(Vector& vector, const Source& src)$/;"	f	struct:mtl::vec::detail::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	type operator()(Vector& vector, const Source& src)$/;"	f	struct:mtl::vec::detail::crtp_div_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	type operator()(Vector& vector, const Source& src)$/;"	f	struct:mtl::vec::detail::crtp_minus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	type operator()(Vector& vector, const Source& src)$/;"	f	struct:mtl::vec::detail::crtp_plus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	type operator()(Vector& vector, const Source& src)$/;"	f	struct:mtl::vec::detail::crtp_times_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const Value src[Rows])$/;"	f	struct:mtl::vec::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const mat_cvec_times_expr<E1, E2>& src)$/;"	f	struct:mtl::vec::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const mat_cvec_times_expr<E1, E2>& src)$/;"	f	struct:mtl::vec::crtp_div_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const mat_cvec_times_expr<E1, E2>& src)$/;"	f	struct:mtl::vec::crtp_minus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const mat_cvec_times_expr<E1, E2>& src)$/;"	f	struct:mtl::vec::crtp_plus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const mat_cvec_times_expr<E1, E2>& src)$/;"	f	struct:mtl::vec::crtp_times_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const rvec_mat_times_expr<E1, E2>& src)$/;"	f	struct:mtl::vec::crtp_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const rvec_mat_times_expr<E1, E2>& src)$/;"	f	struct:mtl::vec::crtp_div_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const rvec_mat_times_expr<E1, E2>& src)$/;"	f	struct:mtl::vec::crtp_minus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const rvec_mat_times_expr<E1, E2>& src)$/;"	f	struct:mtl::vec::crtp_plus_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    type operator()(Vector& vector, const rvec_mat_times_expr<E1, E2>& src)$/;"	f	struct:mtl::vec::crtp_times_assign
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    const_reference operator()( size_type i ) const $/;"	f	class:mtl::vec::dense_vector
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    reference operator()( size_type i ) $/;"	f	class:mtl::vec::dense_vector
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^    void operator() (std::size_t i) { tmp[0]+= ConjOpt()(v1[i]) * v2[i]; }$/;"	f	struct:mtl::vec::dot_index_evaluator
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    inline self& operator()(const size_type p, value_type& dest) $/;"	f	struct:mtl::vec::indexbuffer
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    proxy_type operator() (size_type n) { return proxy_type(*this, n); }$/;"	f	struct:mtl::vec::inserter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	    value_type operator() (key_type const& key) const$/;"	f	struct:mtl::vec::detail::map_value
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	result_type operator() (const Vector& vector) const$/;"	f	struct:mtl::sfunctor::conj_aux
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    const_reference operator() (size_type i) const { return functor(ref(i)); }$/;"	f	struct:mtl::vec::map_view
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^    proxy_type operator() (size_type row)$/;"	f	class:mtl::vec::mapped_inserter
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^    void operator() (std::size_t i) { at<0>(i); }    $/;"	f	struct:mtl::vec::reduction_index_evaluator
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    void operator()(size_type i) { at<0>(i); }$/;"	f	struct:mtl::vec::row_mat_cvec_index_evaluator
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    const_reference operator()( size_type i ) const { check_index(i); return data[i * my_stride]; }$/;"	f	class:mtl::vec::strided_vector_ref
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    reference operator()( size_type i ) { check_index(i); return data[i * my_stride]; }$/;"	f	class:mtl::vec::strided_vector_ref
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    reference operator()(size_type i) { return ref(i); }$/;"	f	class:mtl::vec::unrolled1
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^    const_dereference_type operator() ( size_type i ) const { return ref(i); }$/;"	f	struct:mtl::vec::vec_const_ref_expr
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    value_type& operator() ( size_type i ) const $/;"	f	struct:mtl::vec::vec_scal_aop_expr
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    value_type& operator() (size_type i) const { $/;"	f	struct:mtl::vec::vec_vec_aop_expr
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    const_dereference_type operator() ( size_type i ) const$/;"	f	struct:mtl::vec::vec_vec_op_expr
operator ()	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    const_dereference_type operator() (size_type i) const$/;"	f	struct:mtl::vec::vec_vec_pmop_expr
operator ()	mass_spring.cpp	/^	Point operator()(Node n, double t) const {$/;"	f	struct:Force
operator ()	mass_spring.cpp	/^	void operator()(const GraphType& g, double t) const {$/;"	f	struct:Constraint
operator ()	shallow_water.cpp	/^  Point operator()(const NODE& n) {$/;"	f	struct:NodePosition
operator ()	shallow_water.cpp	/^  QVar operator()(double nx, double ny, double dt,$/;"	f	struct:EdgeFluxCalculator
operator ()	shortest_path.cpp	/^	CS207::Color operator()(const NODE& node) {$/;"	f	struct:MyColorFunc
operator ()	shortest_path.cpp	/^   bool operator()(const NODE& node1, const NODE& node2) const {$/;"	f	struct:MyComparator
operator ()	subgraph.cpp	/^  bool operator()(const NODE& n) {$/;"	f	struct:CentroidPredicate
operator ()	subgraph.cpp	/^  bool operator()(const NODE& n) {$/;"	f	struct:SlicePredicate
operator *	Examples/Metrics.hpp	/^inline Unit<i+l, j+m, k+n, prod_type<T,C>> operator*(const Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator *	Examples/distance_dispatch.cpp	/^  value_type& operator*() { return *it_; }$/;"	f	struct:dumb_iterator
operator *	Examples/expr_template.cpp	/^MatMult<E1,E2> operator*(const MatExpr<E1>& a, const MatExpr<E2>& b) {$/;"	f
operator *	Examples/expr_template.cpp	/^MatScale<E> operator*(const MatExpr<E>& a, double b) {$/;"	f
operator *	Examples/expr_template.cpp	/^MatScale<E> operator*(double b, const MatExpr<E>& a) {$/;"	f
operator *	Examples/expr_template.cpp	/^Matrix operator*(const Matrix& a, const Matrix& b) {$/;"	f
operator *	Examples/expr_template.cpp	/^Matrix operator*(const Matrix& a, double b) {$/;"	f
operator *	Examples/expr_template.cpp	/^Matrix operator*(double b, const Matrix& a) {$/;"	f
operator *	Examples/iterator_adaptor.cpp	/^  const int& operator*() const {$/;"	f	struct:my_position_iterator
operator *	Examples/iterator_adaptor.cpp	/^  const reference operator*() const {               \/\/ Const Dereference (*p)$/;"	f	class:iterator_adaptor
operator *	Examples/iterator_adaptor.cpp	/^  int operator*() const {$/;"	f	struct:my_transform_iterator
operator *	Examples/iterator_adaptor.cpp	/^  int& operator*() {$/;"	f	struct:my_position_iterator
operator *	Examples/iterator_adaptor.cpp	/^  reference operator*() {                           \/\/ Dereference (*p)$/;"	f	class:iterator_adaptor
operator *	Graph.hpp	/^	Edge operator*() const {$/;"	f	class:Graph::EdgeIterator
operator *	Graph.hpp	/^	Edge operator*() const {$/;"	f	class:Graph::IncidentIterator
operator *	Graph.hpp	/^	Node operator* () const {$/;"	f	class:Graph::NodeIterator
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    key_type operator*() const $/;"	f	class:mtl::detail::base_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	key_type operator*() const { return key_type(ref, indices[0], indices[1]); }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	self operator*() const { return *this; }$/;"	f	struct:mtl::traits::detail::sub_matrix_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    multiplier<VectorIn> operator*(const VectorIn& x) \/\/ const$/;"	f	class:mtl::mat::block_diagonal2D
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    base& operator* () { return *this; }$/;"	f	struct:mtl::mat::compressed_el_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    base& operator* () { return *this; }$/;"	f	struct:mtl::mat::compressed_minor_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    const base& operator* () const { return *this; }$/;"	f	struct:mtl::mat::compressed_el_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    const base& operator* () const { return *this; }$/;"	f	struct:mtl::mat::compressed_minor_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    Vector operator*(const Vector& x)$/;"	f	class:mtl::mat::coordinate2D
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    coordinate_key operator*() const { return *this; }$/;"	f	struct:mtl::mat::coordinate_minor_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^    vec::mat_cvec_multiplier<identity2D, VectorIn> operator*(const VectorIn& v) const$/;"	f	struct:mtl::mat::identity2D
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    base& operator* ()$/;"	f	struct:mtl::mat::morton_dense_col_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    base& operator* ()$/;"	f	struct:mtl::mat::morton_dense_el_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    base& operator* ()$/;"	f	struct:mtl::mat::morton_dense_row_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    const base& operator* () const$/;"	f	struct:mtl::mat::morton_dense_col_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    const base& operator* () const$/;"	f	struct:mtl::mat::morton_dense_el_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    const base& operator* () const$/;"	f	struct:mtl::mat::morton_dense_row_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^    vec::mat_cvec_multiplier<poisson2D_dirichlet, VectorIn> operator*(const VectorIn& v) const$/;"	f	struct:mtl::mat::poisson2D_dirichlet
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    const base& operator* () const { return *this; }$/;"	f	struct:mtl::mat::sparse_banded_cursor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator*(const T& x, const complex<U>& y)$/;"	f	class:std::mtl::traits::extended_complex
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator*(const complex<T>& x, const U& y)$/;"	f	class:std::mtl::traits::extended_complex
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator*(const complex<T>& x, const complex<U>& y)$/;"	f	class:std::mtl::traits::extended_complex
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	/^    inline operator*(const Op1& op1, const Op2& op2)$/;"	f	class:mtl::mat::mtl::traits::mult_result
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	/^    inline operator*(const Op1& op1, const Op2& op2)$/;"	f	class:mtl::vec::mtl::traits::vec_mult_result
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	/^    inline operator*(const Op1& op1, const Op2& op2)$/;"	f	class:mtl::vec::traits::lazy_enable_if_rvec_cvec_mult
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    sub_matrix_type operator*() const$/;"	f	struct:mtl::mat::recursator
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^    proxy operator*() const$/;"	f	struct:mtl::utilities::const_iterator_adaptor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^    proxy operator*()$/;"	f	struct:mtl::utilities::iterator_adaptor
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    Value& operator*() const$/;"	f	struct:mtl::strided_dense_el_iterator
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    const Value& operator*() const$/;"	f	struct:mtl::strided_dense_el_const_iterator
operator *	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    ref_type operator*() { return ref_type(a, v, p); }$/;"	f	struct:mtl::utility::zip_it
operator *	Mesh.hpp	/^			Triangle operator*() const {$/;"	f	class:Mesh::TriangleIterator
operator *	Point.hpp	/^Point operator*(Point a, const Point& b) {$/;"	f
operator *	Point.hpp	/^Point operator*(Point a, double b) {$/;"	f
operator *	Point.hpp	/^Point operator*(double b, Point a) {$/;"	f
operator *	mtl_test.cpp	/^	mtl::vec::mat_cvec_multiplier<IdentityMatrix, Vector> operator*(const Vector& v) const {$/;"	f	struct:IdentityMatrix
operator *	poisson.cpp	/^		mtl::vec::mat_cvec_multiplier<GraphSymmetricMatrix, Vector> operator*(const Vector& v) const {$/;"	f	class:GraphSymmetricMatrix
operator *	subgraph.cpp	/^  value_type operator*() const {$/;"	f	class:filter_iterator
operator *=	Examples/Metrics.hpp	/^inline Unit<i, j, k, T>& operator*=(Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator *=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator*=(const Factor& alpha)$/;"	f	struct:mtl::mat::crtp_matrix_assign
operator *=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    typename crtp_times_assign<Vector, E>::type operator*=(const E& e)$/;"	f	struct:mtl::vec::crtp_vector_assign
operator *=	Point.hpp	/^  Point& operator*=(const Point& b) {$/;"	f	struct:Point
operator *=	Point.hpp	/^  Point& operator*=(value_type b) {$/;"	f	struct:Point
operator +	Examples/Metrics.hpp	/^inline Unit<i, j, k, T> operator+(const Unit<i, j, k, T>& a) {$/;"	f	namespace:Metrics
operator +	Examples/Metrics.hpp	/^inline Unit<i, j, k, T> operator+(const Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator +	Examples/expr_template.cpp	/^MatAdd<E1,E2> operator+(const MatExpr<E1>& a, const MatExpr<E2>& b) {$/;"	f
operator +	Examples/expr_template.cpp	/^Matrix operator+(const Matrix& a, const Matrix& b) {$/;"	f
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    self operator+(int n) const$/;"	f	class:mtl::detail::base_cursor
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self operator+ (self const& x)$/;"	f	struct:mtl::dilated::dilated_int
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	self operator+(int offset) const$/;"	f	struct:mtl::traits::detail::sub_matrix_cursor
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	self& operator+(int n) const { self tmp = *this; tmp+= n; return tmp; }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    self operator+(int n) const$/;"	f	struct:mtl::detail::strided_base_cursor
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self operator+(size_t inc) const  {	self tmp(*this); tmp+= inc; return tmp; }$/;"	f	struct:mtl::mat::compressed_minor_cursor
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self operator+ (int inc) const$/;"	f	struct:mtl::mat::morton_dense_col_cursor
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self operator+ (int inc) const$/;"	f	struct:mtl::mat::morton_dense_row_cursor
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/operators.hpp	/^inline operator+(const E1& e1, const E2& e2)$/;"	f	class:mtl::mat::boost::enable_if_c
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/operators.hpp	/^operator+ (const mat_expr<E1>& e1, const mat_expr<E2>& e2)$/;"	f	namespace:mtl::mat
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator+(const T& x, const complex<U>& y)$/;"	f	class:std::mtl::traits::extended_complex
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator+(const complex<T>& x, const U& y)$/;"	f	class:std::mtl::traits::extended_complex
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator+(const complex<T>& x, const complex<U>& y)$/;"	f	class:std::mtl::traits::extended_complex
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^    self operator+(int x) const$/;"	f	struct:mtl::dense_el_cursor
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    Adaptor operator+(int i) const$/;"	f	struct:mtl::utilities::detail::ra_adaptor_operators
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	/^    self operator+(int x) const$/;"	f	struct:mtl::strided_dense_el_cursor
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    self operator+(int x) const$/;"	f	struct:mtl::strided_dense_el_const_iterator
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    self operator+(int x) const$/;"	f	struct:mtl::strided_dense_el_iterator
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_it operator+(diff_type i) const { return zip_it(a, v, p+i); }$/;"	f	struct:mtl::utility::zip_it
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	/^inline operator+(const E1& e1, const vec_expr<E2>& e2)$/;"	f	class:mtl::vec::mtl::traits::enable_if_scalar
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	/^inline operator+(const vec_expr<E1>& e1, const E2& e2)$/;"	f	class:mtl::vec::mtl::traits::enable_if_scalar
operator +	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_plus_expr.hpp	/^operator+ (const vec_expr<E1>& e1, const vec_expr<E2>& e2)$/;"	f	namespace:mtl::vec
operator +	Point.hpp	/^Point operator+(Point a, const Point& b) {$/;"	f
operator +	Point.hpp	/^Point operator+(Point a, double b) {$/;"	f
operator +	Point.hpp	/^Point operator+(const Point& a) {$/;"	f
operator +	Point.hpp	/^Point operator+(double b, Point a) {$/;"	f
operator +	mass_spring.cpp	/^	Constraint operator+(Constraint f) const {$/;"	f	struct:Constraint
operator +	mass_spring.cpp	/^	Force operator+(Force f) const {$/;"	f	struct:Force
operator ++	Examples/distance_dispatch.cpp	/^  dumb_iterator& operator++() { it_++; return *this; }$/;"	f	struct:dumb_iterator
operator ++	Examples/iterator_adaptor.cpp	/^  derived_type operator++(int) {                    \/\/ Postfix increment (p++)$/;"	f	class:iterator_adaptor
operator ++	Examples/iterator_adaptor.cpp	/^  derived_type& operator++() {                      \/\/ Prefix increment (++p)$/;"	f	class:iterator_adaptor
operator ++	Examples/iterator_adaptor.cpp	/^  my_stride_iterator& operator++() {$/;"	f	struct:my_stride_iterator
operator ++	Graph.hpp	/^	EdgeIterator& operator++() {$/;"	f	class:Graph::EdgeIterator
operator ++	Graph.hpp	/^	IncidentIterator& operator++() {$/;"	f	class:Graph::IncidentIterator
operator ++	Graph.hpp	/^	NodeIterator& operator++() {$/;"	f	class:Graph::NodeIterator
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    self& operator++() { ++i; return *this; }$/;"	f	class:itl::basic_iteration
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      inline self& operator++() { ++this->i; return *this; }$/;"	f	class:itl::cyclic_iteration
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    self operator++ (int) $/;"	f	class:mtl::detail::base_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    self& operator++ () $/;"	f	class:mtl::detail::base_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self operator++ (int)$/;"	f	struct:mtl::dilated::dilated_int
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self& operator++ ()$/;"	f	struct:mtl::dilated::dilated_int
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	self operator++(int) { self tmp(*this); ++indices[pos]; return tmp; }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	self& operator++() { ++indices[pos]; return *this; }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    self operator++ (int) $/;"	f	struct:mtl::detail::strided_base_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    self& operator++ () $/;"	f	struct:mtl::detail::strided_base_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator++ ()$/;"	f	struct:mtl::mat::compressed_el_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator++() { ++offset; return *this;  }$/;"	f	struct:mtl::mat::compressed_minor_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    self& operator++() $/;"	f	struct:mtl::mat::coordinate_major_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    self& operator++() { this->offset++; return *this; }$/;"	f	struct:mtl::mat::coordinate_minor_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator++ ()$/;"	f	struct:mtl::mat::morton_dense_col_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator++ ()$/;"	f	struct:mtl::mat::morton_dense_el_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator++ ()$/;"	f	struct:mtl::mat::morton_dense_row_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    self& operator++() { ++this->offset; return *this;  }$/;"	f	struct:mtl::mat::sparse_banded_cursor
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    Adaptor& operator++() $/;"	f	struct:mtl::utilities::detail::adaptor_operators
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    Adaptor& operator++(int) $/;"	f	struct:mtl::utilities::detail::adaptor_operators
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_it operator++(int) { zip_it tmp(a, v, p); p++; return tmp;}$/;"	f	struct:mtl::utility::zip_it
operator ++	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_it& operator++() { p++; return *this;}$/;"	f	struct:mtl::utility::zip_it
operator ++	Mesh.hpp	/^			triangle_iterator& operator++() const {$/;"	f	class:Mesh::TriangleIterator
operator ++	subgraph.cpp	/^  self_type& operator++() {$/;"	f	class:filter_iterator
operator +=	Examples/Metrics.hpp	/^inline Unit<i, j, k, T>& operator+=(Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    self& operator+=(int n) { i+= n; return *this; }$/;"	f	class:itl::basic_iteration
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      inline self& operator+=(int n) { this->i+= n; return *this; }$/;"	f	class:itl::cyclic_iteration
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    self& operator+=(int n) $/;"	f	class:mtl::detail::base_cursor
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self& operator+= (self const& x)$/;"	f	struct:mtl::dilated::dilated_int
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	self& operator+=(int n) { indices[pos]+= n; return *this; }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    self& operator+=(int n) $/;"	f	struct:mtl::detail::strided_base_cursor
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator+=(size_t inc) { offset+= inc; return *this; }$/;"	f	struct:mtl::mat::compressed_minor_cursor
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator+=(const Source& src)$/;"	f	struct:mtl::mat::crtp_matrix_assign
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator+=(int inc) $/;"	f	struct:mtl::mat::morton_dense_col_cursor
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator+=(int inc) $/;"	f	struct:mtl::mat::morton_dense_row_cursor
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy.hpp	/^    lazy_assign<T, U, assign::plus_sum> operator+=(const U& other) $/;"	f	struct:mtl::lazy_t
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    self& operator+= (Value const& val)$/;"	f	struct:mtl::operations::update_proxy
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    Adaptor& operator+=(int i)$/;"	f	struct:mtl::utilities::detail::ra_adaptor_operators
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_it& operator+=(diff_type i) { p+= i; return *this; }$/;"	f	struct:mtl::utility::zip_it
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    typename crtp_plus_assign<Vector, E>::type operator+=(const E& e)$/;"	f	struct:mtl::vec::crtp_vector_assign
operator +=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    self& operator+= (Value const& val)$/;"	f	struct:mtl::vec::update_proxy
operator +=	Point.hpp	/^  Point& operator+=(const Point& b) {$/;"	f	struct:Point
operator +=	Point.hpp	/^  Point& operator+=(value_type b) {$/;"	f	struct:Point
operator ,	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^	scalar_assign& operator, (ValueSource val)$/;"	f	struct:mtl::mat::crtp_matrix_assign::scalar_assign
operator ,	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/push_back_comma_inserter.hpp	/^	self& operator, (Source val)$/;"	f	class:mtl::push_back_comma_inserter
operator ,	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    self& operator, (Source val)$/;"	f	struct:mtl::vec::vec_scal_aop_expr
operator -	Examples/Metrics.hpp	/^inline Unit<i, j, k, T> operator-(const Unit<i, j, k, T>& a) {$/;"	f	namespace:Metrics
operator -	Examples/Metrics.hpp	/^inline Unit<i, j, k, T> operator-(const Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    int operator-(const self& cc) const $/;"	f	class:mtl::detail::base_cursor
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self operator- (self const& x) const$/;"	f	struct:mtl::dilated::dilated_int
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	self& operator-(int n) const { self tmp = *this; tmp-= n; return tmp; }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    int operator-(const self& cc) const $/;"	f	struct:mtl::detail::strided_base_cursor
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_negate_expr.hpp	/^operator- (const mat_expr<E1>& e1)$/;"	f	namespace:mtl::mat
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/operators.hpp	/^inline operator-(const E1& e1, const E2& e2)$/;"	f	class:mtl::mat::boost::enable_if_c
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/operators.hpp	/^operator- (const mat_expr<E1>& e1, const mat_expr<E2>& e2)$/;"	f	namespace:mtl::mat
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator-(const T& x, const complex<U>& y)$/;"	f	class:std::mtl::traits::extended_complex
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator-(const complex<T>& x, const U& y)$/;"	f	class:std::mtl::traits::extended_complex
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator-(const complex<T>& x, const complex<U>& y)$/;"	f	class:std::mtl::traits::extended_complex
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^    int operator-(self const& x)$/;"	f	struct:mtl::dense_el_cursor
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    diff_type operator-(const zip_it& other) const { check(other); return p - other.p; }$/;"	f	struct:mtl::utility::zip_it
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_it operator-(diff_type i) const { return zip_it(a, v, p-i); }$/;"	f	struct:mtl::utility::zip_it
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_negate_expr.hpp	/^operator- (const vec_expr<E1>& e1)$/;"	f	namespace:mtl::vec
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	/^inline operator-(const E1& e1, const vec_expr<E2>& e2)$/;"	f	class:mtl::vec::mtl::traits::enable_if_scalar
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	/^inline operator-(const vec_expr<E1>& e1, const E2& e2)$/;"	f	class:mtl::vec::mtl::traits::enable_if_scalar
operator -	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_minus_expr.hpp	/^operator- (const vec_expr<E1>& e1, const vec_expr<E2>& e2)$/;"	f	namespace:mtl::vec
operator -	Point.hpp	/^Point operator-(Point a, const Point& b) {$/;"	f
operator -	Point.hpp	/^Point operator-(Point a, double b) {$/;"	f
operator -	Point.hpp	/^Point operator-(const Point& a) {$/;"	f
operator -	Point.hpp	/^Point operator-(double b, const Point& a) {$/;"	f
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    self operator-- (int) $/;"	f	class:mtl::detail::base_cursor
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    self& operator-- () $/;"	f	class:mtl::detail::base_cursor
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self operator-- (int)$/;"	f	struct:mtl::dilated::dilated_int
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self& operator-- ()$/;"	f	struct:mtl::dilated::dilated_int
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	self operator--(int) { self tmp(*this); indices[pos]--; return tmp; }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	self& operator--() { indices[pos]--; return *this; }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    self operator-- (int) $/;"	f	struct:mtl::detail::strided_base_cursor
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    self& operator-- () $/;"	f	struct:mtl::detail::strided_base_cursor
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator--() { --offset; return *this; }$/;"	f	struct:mtl::mat::compressed_minor_cursor
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator-- ()$/;"	f	struct:mtl::mat::morton_dense_col_cursor
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator-- ()$/;"	f	struct:mtl::mat::morton_dense_row_cursor
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^	irange& operator--() $/;"	f	class:mtl::irange
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_it operator--(int) { zip_it tmp(a, v, p); p--; return tmp;}$/;"	f	struct:mtl::utility::zip_it
operator --	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_it& operator--() { p--; return *this;}$/;"	f	struct:mtl::utility::zip_it
operator -=	Examples/Metrics.hpp	/^inline Unit<i, j, k, T>& operator-=(Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator -=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    self& operator-=(int n) $/;"	f	class:mtl::detail::base_cursor
operator -=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self& operator-= (self const& x)$/;"	f	struct:mtl::dilated::dilated_int
operator -=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	self& operator-=(int n) { indices[pos]-= n; return *this; }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator -=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    self& operator-=(int n) $/;"	f	struct:mtl::detail::strided_base_cursor
operator -=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator-=(const Source& src)$/;"	f	struct:mtl::mat::crtp_matrix_assign
operator -=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator-=(int dec) $/;"	f	struct:mtl::mat::morton_dense_col_cursor
operator -=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator-=(int dec) $/;"	f	struct:mtl::mat::morton_dense_row_cursor
operator -=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy.hpp	/^    lazy_assign<T, U, assign::minus_sum> operator-=(const U& other) $/;"	f	struct:mtl::lazy_t
operator -=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    typename crtp_minus_assign<Vector, E>::type operator-=(const E& e)$/;"	f	struct:mtl::vec::crtp_vector_assign
operator -=	Point.hpp	/^  Point& operator-=(const Point& b) {$/;"	f	struct:Point
operator -=	Point.hpp	/^  Point& operator-=(value_type b) {$/;"	f	struct:Point
operator /	Examples/Metrics.hpp	/^inline Unit<i-l, j-m, k-n, div_type<T,C>> operator\/(const Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator /	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator\/(const T& x, const complex<U>& y)$/;"	f	class:std::mtl::traits::extended_complex
operator /	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator\/(const complex<T>& x, const U& y)$/;"	f	class:std::mtl::traits::extended_complex
operator /	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator\/(const complex<T>& x, const complex<U>& y)$/;"	f	class:std::mtl::traits::extended_complex
operator /	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	/^    inline operator\/(const Op1& op1, const Op2& op2)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
operator /	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	/^    inline operator\/(const Op1& op1, const Op2& op2)$/;"	f	class:mtl::vec::traits::div_result
operator /	Point.hpp	/^Point operator\/(Point a, const Point& b) {$/;"	f
operator /	Point.hpp	/^Point operator\/(Point a, double b) {$/;"	f
operator /=	Examples/Metrics.hpp	/^inline Unit<i, j, k, T>& operator\/=(Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator /=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    Matrix& operator\/=(const Factor& alpha)$/;"	f	struct:mtl::mat::crtp_matrix_assign
operator /=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    typename crtp_div_assign<Vector, E>::type operator\/=(const E& e)$/;"	f	struct:mtl::vec::crtp_vector_assign
operator /=	Point.hpp	/^  Point& operator\/=(const Point& b) {$/;"	f	struct:Point
operator /=	Point.hpp	/^  Point& operator\/=(value_type b) {$/;"	f	struct:Point
operator <	Graph.hpp	/^    bool operator<(const Edge& x) const {$/;"	f	class:Graph::Edge
operator <	Graph.hpp	/^    bool operator<(const Node& x) const {$/;"	f	class:Graph::Node
operator <	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    bool operator< (self const& x) const$/;"	f	struct:mtl::dilated::dilated_int
operator <	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator<(const zip_it& other) const { check(other); return p < other.p; }$/;"	f	struct:mtl::utility::zip_it
operator <	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator<(const zip_ref& r) const { check(r); return a[p] < r.a[r.p]; }$/;"	f	struct:mtl::utility::zip_ref
operator <	Mesh.hpp	/^		bool operator<(const Triangle& x) const {$/;"	f	class:Mesh::Triangle
operator <<	BoundingBox.hpp	/^std::ostream& operator<<(std::ostream& s, const BoundingBox& box) {$/;"	f
operator <<	Examples/Metrics.hpp	/^  friend std::ostream& operator<<(std::ostream& s, const Unit& u) {$/;"	f	struct:Metrics::Unit
operator <<	Examples/expr_template.cpp	/^  friend std::ostream& operator<<(std::ostream& s, const MatAdd& m) {$/;"	f	struct:MatAdd
operator <<	Examples/expr_template.cpp	/^  friend std::ostream& operator<<(std::ostream& s, const MatExpr& m) {$/;"	f	struct:MatExpr
operator <<	Examples/expr_template.cpp	/^  friend std::ostream& operator<<(std::ostream& s, const MatMult& m) {$/;"	f	struct:MatMult
operator <<	Examples/expr_template.cpp	/^  friend std::ostream& operator<<(std::ostream& s, const MatScale& m) {$/;"	f	struct:MatScale
operator <<	Examples/expr_template.cpp	/^  friend std::ostream& operator<<(std::ostream& s, const Matrix&) {$/;"	f	struct:Matrix
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^inline std::ostream& operator<< (std::ostream& os, mtl::dilated::dilated_int<T, BitMask, Normalized> d)$/;"	f
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    self& operator<< (const mat::element_array_t<EMatrix, Rows, Cols>& elements)$/;"	f	struct:mtl::detail::trivial_inserter
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    self& operator<< (const mat::element_matrix_t<EMatrix, Rows, Cols>& elements)$/;"	f	struct:mtl::detail::trivial_inserter
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    self& operator<<(const Coll& c) $/;"	f	class:mtl::io::matrix_market_ostream
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^    test_ostream& operator<<(const T& v)$/;"	f	struct:mtl::io::test_ostream
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator<< (const element_array_t<Matrix, Rows, Cols>& elements)$/;"	f	struct:mtl::mat::compressed2D_inserter
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator<< (const element_matrix_t<Matrix, Rows, Cols>& elements)$/;"	f	struct:mtl::mat::compressed2D_inserter
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^	update_proxy& operator<< (Value const& val)$/;"	f	struct:mtl::mat::coordinate2D_inserter::update_proxy
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    self& operator<< (const mat::element_array_t<EMatrix, Rows, Cols>& elements)$/;"	f	struct:mtl::mat::coordinate2D_inserter
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    self& operator<< (const mat::element_matrix_t<EMatrix, Rows, Cols>& elements)$/;"	f	struct:mtl::mat::coordinate2D_inserter
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^    inline std::ostream& operator<< (std::ostream& stream, dimensions d) $/;"	f	namespace:mtl::non_fixed
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^    inline std::ostream& operator<< (std::ostream& stream, dimensions<R, C>) $/;"	f	namespace:mtl::fixed
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^OStream& operator<<(OStream& out, element<ValueType>& el) $/;"	f	namespace:mtl::mat
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    friend inline std::ostream& operator<<(std::ostream& os, const self& A) { return os << (const base&)(A); }$/;"	f	struct:mtl::mat::hermitian_view
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^mapped_inserter< BaseInserter, Mapper >& operator<<(mapped_inserter< BaseInserter, Mapper >& minserter, $/;"	f	namespace:mtl::mat
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    friend std::ostream& operator<<(std::ostream& os, const self& A)$/;"	f	class:mtl::mat::sparse_banded
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^    inline std::ostream& operator<< (std::ostream& out, const mat_expr<Matrix>& expr)$/;"	f	namespace:mtl::mat
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^    inline std::ostream& operator<< (std::ostream& out, const vec::vec_expr<Vector>& expr)$/;"	f	namespace:mtl::vec
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^    inline std::ostream& operator<< (std::ostream& out, with_format_t<Collection> const& value) $/;"	f	namespace:mtl::detail
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/std_output_operator.hpp	/^    inline ostream& operator<< (ostream& os, map<Key, Data, Compare, Alloc> const&  m)$/;"	f	namespace:std
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/std_output_operator.hpp	/^    inline ostream& operator<< (ostream& os, pair<T, U> const& p)$/;"	f	namespace:std
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/std_output_operator.hpp	/^    inline ostream& operator<< (ostream& os, vector<T, Alloc> const&  v)$/;"	f	namespace:std
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    self& operator<< (Value const& val)$/;"	f	struct:mtl::operations::update_proxy
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^	friend std::ostream& operator<<(std::ostream& os, const irange& ir)$/;"	f	class:mtl::irange
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	friend std::ostream& operator<<(std::ostream& os, const iset& is)$/;"	f	class:mtl::iset
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^inline std::ostream& operator<< (std::ostream& os, maybe<Value> const&  m)$/;"	f	namespace:mtl::utilities
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    self& operator<< (Value const& val)$/;"	f	struct:mtl::vec::update_proxy
operator <<	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    friend std::ostream& operator<<(std::ostream& out, const self& v)$/;"	f	class:mtl::vec::sparse_vector
operator <<	Point.hpp	/^std::ostream& operator<<(std::ostream& s, const Point& a) {$/;"	f
operator <=	CS207/Util.hpp	/^  friend bool operator<=(const T& a, const T& b) { return !(b < a); }$/;"	f	struct:less_than_comparable
operator <=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    bool operator<= (self const& x) const$/;"	f	struct:mtl::dilated::dilated_int
operator <=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator<=(const zip_it& other) const { check(other); return p <= other.p; }$/;"	f	struct:mtl::utility::zip_it
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    self& operator=(const contiguous_memory_block<Value2, OnStack2, Size2>& other)$/;"	f	struct:mtl::detail::contiguous_memory_block
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    self& operator=(const self& other)$/;"	f	struct:mtl::detail::contiguous_memory_block
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    self& operator=(self other)$/;"	f	struct:mtl::detail::contiguous_memory_block
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    self& operator=(self&& other)$/;"	f	struct:mtl::detail::contiguous_memory_block
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self& operator= (T x)$/;"	f	struct:mtl::dilated::dilated_int
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    self& operator= (self const& x)$/;"	f	struct:mtl::dilated::dilated_int
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_file.hpp	/^    matrix_file& operator=(const Collection& c)$/;"	f	class:mtl::io::matrix_file
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator= (self const& other) { base::operator=(other); return *this; }$/;"	f	struct:mtl::mat::compressed_el_cursor
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator= (self const& other)$/;"	f	struct:mtl::mat::compressed_key
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator= (self const& other)$/;"	f	struct:mtl::mat::compressed_minor_cursor
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator=(const self& src)$/;"	f	class:mtl::mat::compressed2D
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator=(self src)$/;"	f	class:mtl::mat::compressed2D
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    self& operator=(self&& src)$/;"	f	class:mtl::mat::compressed2D
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    operator=(Source src)$/;"	f	struct:mtl::mat::crtp_matrix_assign
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    operator=(const Source& src)$/;"	f	struct:mtl::mat::crtp_matrix_assign
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    self& operator=(const self& src)$/;"	f	class:mtl::mat::dense2D
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    self& operator=(self&& src)$/;"	f	class:mtl::mat::dense2D
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    self& operator=(typename detail::ref_on_stack<self, memory_base::on_stack>::type src)$/;"	f	class:mtl::mat::dense2D
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	dimensions& operator=(const dimensions& x) $/;"	f	struct:mtl::non_fixed::dimensions
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    void operator=(const element_type& other) $/;"	f	class:mtl::mat::element
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator=(const self& src)$/;"	f	class:mtl::mat::morton_dense
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator=(self src)$/;"	f	class:mtl::mat::morton_dense
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    self& operator=(self&& src)$/;"	f	class:mtl::mat::morton_dense
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    operator=(const Src& src)$/;"	f	class:mtl::mat::multi_vector
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    self& operator=(const self& src)$/;"	f	class:mtl::mat::multi_vector
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy.hpp	/^    lazy_assign<T, U, assign::assign_sum> operator=(const U& other) $/;"	f	struct:mtl::lazy_t
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    self& operator= (Value const& val)$/;"	f	struct:mtl::operations::update_proxy
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	operator=(const Source& src)$/;"	f	class:mtl::iset
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    self& operator=(ValueType const& value)$/;"	f	struct:mtl::utilities::detail::iterator_proxy
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_it& operator=(const zip_it& other) { check(other); p= other.p; return *this; }$/;"	f	struct:mtl::utility::zip_it
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_ref& operator=(const zip_ref& r) $/;"	f	struct:mtl::utility::zip_ref
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_ref& operator=(const zip_value<T, U>& zv)$/;"	f	struct:mtl::utility::zip_ref
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_ref& operator=(zip_value<T, U>&& zv) $/;"	f	struct:mtl::utility::zip_ref
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    operator=(const E& e)$/;"	f	struct:mtl::vec::crtp_vector_assign
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    self& operator=(const self& src)$/;"	f	class:mtl::vec::dense_vector
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    self& operator=(self src)$/;"	f	class:mtl::vec::dense_vector
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    self& operator=(self&& src)$/;"	f	class:mtl::vec::dense_vector
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    self& operator=(std::initializer_list<Value2> values)$/;"	f	class:mtl::vec::dense_vector
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    self& operator= (Value const& val)$/;"	f	struct:mtl::vec::update_proxy
operator =	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    vec_vec_asgn_expr<self, self> operator=( self const& e ) $/;"	f	class:mtl::vec::strided_vector_ref
operator =	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/INITLIST_CHECK.cpp	/^    self& operator=(self&&) {}$/;"	f	struct:my_vector
operator ==	Examples/Metrics.hpp	/^inline bool operator==(const Unit<i, j, k, T>& a,$/;"	f	namespace:Metrics
operator ==	Examples/distance_dispatch.cpp	/^  bool operator==(const dumb_iterator& other) { return it_ == other.it_; }$/;"	f	struct:dumb_iterator
operator ==	Examples/iterator_adaptor.cpp	/^  bool operator==(const derived_type& m) const {    \/\/ Equality (p==q)$/;"	f	class:iterator_adaptor
operator ==	Graph.hpp	/^	bool operator==(const EdgeIterator& it) const {$/;"	f	class:Graph::EdgeIterator
operator ==	Graph.hpp	/^	bool operator==(const IncidentIterator& other) const {$/;"	f	class:Graph::IncidentIterator
operator ==	Graph.hpp	/^	bool operator==(const NodeIterator& it) const {$/;"	f	class:Graph::NodeIterator
operator ==	Graph.hpp	/^    bool operator==(const Edge& x) const {$/;"	f	class:Graph::Edge
operator ==	Graph.hpp	/^    bool operator==(const Node& x) const {$/;"	f	class:Graph::Node
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    bool operator==(const self& cc) const $/;"	f	class:mtl::detail::base_cursor
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    bool operator== (self const& x) const$/;"	f	struct:mtl::dilated::dilated_int
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	bool operator==(const self& cc) const { return &ref == &cc.ref && indices[0] == cc.indices[0] && indices[1] == cc.indices[1]; }$/;"	f	struct:mtl::traits::detail::matrix_element_cursor
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	bool operator==(const self& cc) const { return &ref == &cc.ref && indices[0] == cc.indices[0] && indices[1] == cc.indices[1]; }$/;"	f	struct:mtl::traits::detail::matrix_element_key
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    bool operator== (compressed_key const& other) const$/;"	f	struct:mtl::mat::compressed_key
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    bool operator== (coordinate_key const& other) const { return offset == other.offset; }$/;"	f	struct:mtl::mat::coordinate_key
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    bool operator== (self const& x) const$/;"	f	struct:mtl::mat::morton_dense_key
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    bool operator== (sparse_banded_key const& other) const { return offset == other.offset; }$/;"	f	struct:mtl::mat::sparse_banded_key
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator==(const T& x, const complex<U>& y)$/;"	f	class:std::boost::enable_if
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator==(const complex<T>& x, const U& y)$/;"	f	class:std::boost::enable_if
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^inline operator==(const complex<T>& x, const complex<U>& y)$/;"	f	class:std::boost::enable_if
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	/^    inline operator==(const Op1& op1, const Op2& op2)$/;"	f	class:mtl::vec::boost::enable_if
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	bool operator==(const iset& that) const$/;"	f	class:mtl::iset
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    bool operator==(Adaptor const& x) const$/;"	f	struct:mtl::utilities::detail::adaptor_operators
operator ==	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator==(const zip_it& other) const { check(other); return p == other.p; }$/;"	f	struct:mtl::utility::zip_it
operator ==	Mesh.hpp	/^			bool operator==(const triangle_iterator& other_) const {$/;"	f	class:Mesh::TriangleIterator
operator ==	Mesh.hpp	/^		bool operator==(const Triangle& x) const {$/;"	f	class:Mesh::Triangle
operator ==	Point.hpp	/^  bool operator==(const Point& b) const {$/;"	f	struct:Point
operator ==	subgraph.cpp	/^  bool operator==(const self_type& other) const {$/;"	f	class:filter_iterator
operator >	CS207/Util.hpp	/^  friend bool operator> (const T& a, const T& b) { return   b < a;  }$/;"	f	struct:less_than_comparable
operator >	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    bool operator> (self const& x) const$/;"	f	struct:mtl::dilated::dilated_int
operator >	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator>(const zip_it& other) const { check(other); return p > other.p; }$/;"	f	struct:mtl::utility::zip_it
operator >=	CS207/Util.hpp	/^  friend bool operator>=(const T& a, const T& b) { return !(a < b); }$/;"	f	struct:less_than_comparable
operator >=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    bool operator>= (self const& x) const$/;"	f	struct:mtl::dilated::dilated_int
operator >=	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    bool operator>=(const zip_it& other) const { check(other); return p >= other.p; }$/;"	f	struct:mtl::utility::zip_it
operator >>	CS207/Util.hpp	/^std::istream& operator>>(std::istream& s, std::array<T,N>& v) {$/;"	f	namespace:CS207
operator >>	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    self& operator>>(Coll& c) $/;"	f	class:mtl::io::matrix_market_istream
operator >>	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^	inline buffer_type& operator>>(value_type& dest) { return buffer(p, dest); }$/;"	f	struct:mtl::vec::extracter::bracket_proxy
operator >>	Point.hpp	/^std::istream& operator>>(std::istream& s, Point& a) {$/;"	f
operator Value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^    operator Value() const$/;"	f	struct:mtl::utilities::maybe
operator ValueType	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    operator ValueType() const$/;"	f	struct:mtl::utilities::detail::const_iterator_proxy
operator ValueType	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    operator ValueType() const$/;"	f	struct:mtl::utilities::detail::iterator_proxy
operator []	Examples/trivial_copy.cpp	/^  const T& operator[](size_type i) const {$/;"	f	class:Vector
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    void operator[](size_type i) { at<0>(i); }$/;"	f	struct:itl::pc::ic_0_evaluator
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^	proxy_type operator[](size_type col)$/;"	f	struct:mtl::detail::trivial_inserter::bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    bracket_proxy operator[] (size_type row)$/;"	f	struct:mtl::detail::trivial_inserter
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	proxy_type operator[](size_type col) { return proxy_type(ref, row, col); }$/;"	f	struct:mtl::mat::compressed2D_inserter::bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    bracket_proxy operator[] (size_type row)$/;"	f	struct:mtl::mat::compressed2D_inserter
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^	proxy_type operator[](size_type col)$/;"	f	struct:mtl::mat::coordinate2D_inserter::bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    bracket_proxy operator[] (size_type row)$/;"	f	struct:mtl::mat::coordinate2D_inserter
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    operator[] (SizeType row) const$/;"	f	struct:mtl::mat::crtp_matrix_bracket
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    operator[] (const T& row) const$/;"	f	struct:mtl::mat::const_crtp_matrix_bracket
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    operator[] (const T& row)$/;"	f	struct:mtl::mat::crtp_matrix_bracket
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    operator[] (const T& row_range) const$/;"	f	struct:mtl::mat::const_crtp_matrix_bracket
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    operator[] (const T& row_range)$/;"	f	struct:mtl::mat::crtp_matrix_bracket
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    operator[] (const irange& row_range) const$/;"	f	struct:mtl::mat::crtp_matrix_bracket
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    operator[] (const iset& row_set) const$/;"	f	struct:mtl::mat::const_crtp_matrix_bracket
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    operator[] (const iset& row_set) const$/;"	f	struct:mtl::mat::crtp_matrix_bracket
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    operator[] (size_type r) const$/;"	f	struct:mtl::mat::hermitian_view
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^	proxy_type operator[](size_type col)$/;"	f	struct:mtl::mat::mapped_inserter::bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^    bracket_proxy operator[] (size_type row)   $/;"	f	class:mtl::mat::mapped_inserter
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^	proxy_type operator[](size_type col)$/;"	f	struct:mtl::mat::shifted_inserter::bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    bracket_proxy operator[] (size_type row)      $/;"	f	class:mtl::mat::shifted_inserter
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	proxy_type operator[](size_type col) { return proxy_type(ref, row, col); }$/;"	f	struct:mtl::mat::sparse_banded_inserter::bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    bracket_proxy operator[] (size_type row)$/;"	f	struct:mtl::mat::sparse_banded_inserter
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	/^    void operator[] (std::size_t i) { at<0>(i); }$/;"	f	struct:mtl::vec::fused_index_evaluator
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	ValueRef operator[] (const irange& col_range)$/;"	f	struct:mtl::operations::range_bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	ValueRef operator[] (size_type col) { return matrix(row, col);	}$/;"	f	struct:mtl::operations::bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	mtl::mat::indirect<Matrix> operator[] (const iset& col_set)$/;"	f	struct:mtl::operations::set_bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	operator[] (T col)  { return col_traits::apply(matrix, row_range, col); }$/;"	f	struct:mtl::operations::range_bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	operator[] (const T& col_range) $/;"	f	struct:mtl::operations::bracket_proxy
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	size_type operator[](size_type i) const { check(i); return indices[i]; }$/;"	f	class:mtl::iset
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    long long operator[](int index) const { return 0; }$/;"	f	struct:mtl::utility::papi_t
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    long_long operator[](int index) const$/;"	f	class:mtl::utility::papi_t
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^     const_dereference_type operator[] ( size_type i ) const {$/;"	f	class:mtl::vec::vec_vec_asgn_expr
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    const self  operator[]( irange r ) const { return sub_vector(*this, r.start(), r.finish());  } \/\/\/< sub-vector$/;"	f	class:mtl::vec::dense_vector
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    const_reference operator[]( size_type i ) const { return (*this)( i ) ;  } \/\/\/< i-th entry (constant)$/;"	f	class:mtl::vec::dense_vector
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    reference operator[]( size_type i ) { return (*this)( i ) ; } \/\/\/< i-th entry$/;"	f	class:mtl::vec::dense_vector
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    self operator[]( irange r ) { return sub_vector(*this, r.start(), r.finish()); } \/\/\/< sub-vector$/;"	f	class:mtl::vec::dense_vector
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^    void operator[] (std::size_t i) { (*this)(i); }$/;"	f	struct:mtl::vec::dot_index_evaluator
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    inline bracket_proxy operator[](const size_type p) { return bracket_proxy(p, *buffer); }$/;"	f	class:mtl::vec::extracter
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    proxy_type operator[] (size_type n) { return proxy_type(*this, n); }$/;"	f	struct:mtl::vec::inserter
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    const_reference operator[] (size_type i) const { return functor(ref[i]); }$/;"	f	struct:mtl::vec::map_view
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^    proxy_type operator[] (size_type row)        $/;"	f	class:mtl::vec::mapped_inserter
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^    void operator[] (std::size_t i) { at<0>(i); }$/;"	f	struct:mtl::vec::reduction_index_evaluator
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    void operator[](size_type i) { at<0>(i); }$/;"	f	struct:mtl::vec::row_mat_cvec_index_evaluator
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    value_type operator[](size_type i) const$/;"	f	class:mtl::vec::sparse_vector
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    value_type& operator[](size_type i)$/;"	f	class:mtl::vec::sparse_vector
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    const self  operator[]( irange r ) const { return sub_vector(*this, r.start(), r.finish());  }$/;"	f	class:mtl::vec::strided_vector_ref
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    const_reference operator[]( size_type i ) const { return (*this)( i ) ;  }$/;"	f	class:mtl::vec::strided_vector_ref
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    reference operator[]( size_type i ) { return (*this)( i ) ; }$/;"	f	class:mtl::vec::strided_vector_ref
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    self operator[]( irange r ) { return sub_vector(*this, r.start(), r.finish()); }$/;"	f	class:mtl::vec::strided_vector_ref
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    reference operator[](size_type i) { return (*this)(i); }$/;"	f	class:mtl::vec::unrolled1
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^    const_dereference_type operator[] ( size_type i ) const { return ref[i]; }$/;"	f	struct:mtl::vec::vec_const_ref_expr
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    value_type& operator[] ( size_type i ) const$/;"	f	struct:mtl::vec::vec_scal_aop_expr
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    value_type& operator[] (size_type i) const { return (*this)(i); }$/;"	f	struct:mtl::vec::vec_vec_aop_expr
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    const_dereference_type operator[] ( size_type i ) const$/;"	f	struct:mtl::vec::vec_vec_op_expr
operator []	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    const_dereference_type operator[] (size_type i) const$/;"	f	struct:mtl::vec::vec_vec_pmop_expr
operator []	Point.hpp	/^  const_reference operator[](size_type i) const { return elem[i]; }$/;"	f	struct:Point
operator []	Point.hpp	/^  reference       operator[](size_type i)       { return elem[i]; }$/;"	f	struct:Point
operator bool	BoundingBox.hpp	/^  operator bool() const {$/;"	f	class:BoundingBox
operator bool	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^    operator bool() const$/;"	f	struct:mtl::utilities::maybe
operator int	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    virtual operator int() const { return error; }$/;"	f	class:itl::basic_iteration
operator int	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      operator int() const { return error_code(); }$/;"	f	class:itl::cyclic_iteration
operator result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    operator result_type() const { return dot_simple(v1, v2, ConjOpt()); }$/;"	f	struct:mtl::vec::dot_class
operator result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    operator result_type() const { return sfunctor::dot<Unroll>::apply(v1, v2, ConjOpt()); }$/;"	f	struct:mtl::vec::dot_class
operator |	BoundingBox.hpp	/^BoundingBox operator|(BoundingBox b, const Point& p) {$/;"	f
operator |	BoundingBox.hpp	/^BoundingBox operator|(BoundingBox b1, const BoundingBox& b2) {$/;"	f
operator |	BoundingBox.hpp	/^BoundingBox operator|(const Point& p1, const Point& p2) {$/;"	f
operator |=	BoundingBox.hpp	/^  BoundingBox& operator|=(const BoundingBox& b) {$/;"	f	class:BoundingBox
operator |=	BoundingBox.hpp	/^  BoundingBox& operator|=(const point_type& p) {$/;"	f	class:BoundingBox
operator ||	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fuse.hpp	/^operator||(const T& x, const U& y)$/;"	f	namespace:mtl
opteron_shark_teeth	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	/^    struct opteron_shark_teeth$/;"	s	namespace:mtl::detail
opteron_shark_teeth_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	/^    opteron_shark_teeth_mult(const morton_dense<double, MaskA, PA>& a, const morton_dense<double, MaskB, PB>& b, $/;"	f	namespace:mtl::detail
ori1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    typedef typename boost::mpl::at<TypePara, orientation>::type            ori1;$/;"	t	struct:mtl::type_para::matrix_parameter_generator
ori1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	    typedef typename boost::mpl::at<TypePara, orientation>::type            ori1;$/;"	t	struct:mtl::type_para::vector_parameter_generator
ori2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^					     ori1>::type                            ori2;$/;"	t	struct:mtl::type_para::matrix_parameter_generator
ori2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^					     ori1>::type                            ori2;$/;"	t	struct:mtl::type_para::vector_parameter_generator
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef mtl::tag::col_major   orientation;$/;"	t	struct:mtl::OrientedCollection
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef row_major   orientation;$/;"	t	struct:mtl::OrientedCollection
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename OrientedCollection<Coll>::orientation       orientation;$/;"	t	struct:mtl::OrientedCollection
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename T::orientation orientation;$/;"	t	struct:mtl::OrientedCollection
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::compressed2D<Value, Parameters>::orientation   orientation;$/;"	t	struct:mtl::OrientedCollection
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::dense2D<Value, Parameters>::orientation   orientation;$/;"	t	struct:mtl::OrientedCollection
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::morton_dense<Value, Mask, Parameters>::orientation   orientation;$/;"	t	struct:mtl::OrientedCollection
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::traits::transposed_orientation<typename OrientedCollection<Coll>::orientation>::type   orientation;$/;"	t	struct:mtl::OrientedCollection
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::vec::dense_vector<Value, Parameters>::orientation   orientation;$/;"	t	struct:mtl::OrientedCollection
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::vec::strided_vector_ref<Value, Parameters>::orientation   orientation;$/;"	t	struct:mtl::OrientedCollection
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef typename Matrix::orientation               orientation;$/;"	t	struct:mtl::mat::banded_view
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    typedef typename Parameters::orientation  orientation;$/;"	t	struct:mtl::mat::base_matrix
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    typedef typename Parameters::orientation  orientation;$/;"	t	struct:mtl::mat::base_sub_matrix
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef typename Parameters::orientation         orientation;$/;"	t	class:mtl::mat::compressed2D
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef typename Parameters::orientation                            orientation;      $/;"	t	class:mtl::mat::coordinate2D
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef typename Parameters::orientation  orientation;$/;"	t	class:mtl::mat::dense2D
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef typename Parameters::orientation           orientation;$/;"	t	class:mtl::mat::ell_matrix
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    typedef typename OrientedCollection<trans_base>::orientation   orientation; \/\/ Should not be needed because defined in Collection (bug in g++???)$/;"	t	struct:mtl::mat::hermitian_view
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef mtl::tag::row_major                        orientation; \/\/ for completeness$/;"	t	class:mtl::mat::implicit_dense
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef typename Matrix::orientation               orientation;$/;"	t	struct:mtl::mat::map_view
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    typedef typename E1::orientation             orientation;$/;"	t	struct:mtl::mat::mat_mat_ele_times_expr
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef typename E1::orientation             orientation;$/;"	t	struct:mtl::mat::mat_mat_times_expr
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Parameters::orientation  orientation;$/;"	t	class:mtl::mat::morton_dense
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    typedef tag::col_major                           orientation;$/;"	t	class:mtl::mat::multi_vector
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/parameter.hpp	/^    typedef Orientation orientation;$/;"	t	struct:mtl::mat::parameters
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef typename mtl::traits::transposed_orientation<typename Matrix::orientation>::type orientation;$/;"	t	struct:mtl::mat::transposed_view
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^	typedef typename mtl::traits::transposed_orientation<typename Parameters::orientation>::type orientation; \/\/ switch$/;"	t	struct:mtl::vec::transposed_parameters
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct orientation {};$/;"	s	namespace:mtl::type_para
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef typename Parameters::orientation  orientation;$/;"	t	class:mtl::vec::dense_vector
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/parameter.hpp	/^    typedef Orientation orientation;$/;"	t	struct:mtl::vec::parameters
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    typedef typename Parameter::orientation orientation;$/;"	t	class:mtl::vec::sparse_vector
orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef typename Parameters::orientation                                         orientation;$/;"	t	class:mtl::vec::strided_vector_ref
orth	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^	inline void orth(VVector& v, tag::vector)$/;"	f	namespace:mtl::vec::impl
orth	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^	inline void orth(VVector& v, typename mtl::Collection<VVector>::size_type j, tag::vector)$/;"	f	namespace:mtl::vec::impl
orth	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^    inline void orth(multi_vector<Vector>& A)$/;"	f	namespace:mtl::mat
orth	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^inline void orth(Value& value)$/;"	f	namespace:mtl::vec
orth	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^inline void orth(Value& value, typename mtl::Collection<Value>::size_type i)$/;"	f	namespace:mtl::vec
orthogonalize_factors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^	inline orthogonalize_factors(VVector& v, tag::vector)$/;"	f	class:mtl::vec::impl::mtl::mat
orthogonalize_factors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^inline orthogonalize_factors(Value& v)$/;"	f	class:mtl::vec::mtl::mat
other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef Matrix                                     other;$/;"	t	struct:mtl::mat::banded_view
other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    typedef Matrix                                  other;$/;"	t	struct:mtl::mat::indirect
other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef Matrix                                     other;$/;"	t	struct:mtl::mat::map_view
other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef Matrix                        other;$/;"	t	struct:mtl::mat::transposed_view
other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::other     other;$/;"	t	struct:mtl::detail::const_value_from_other
other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::other     other;$/;"	t	struct:mtl::detail::value_from_other
other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef Vector                                     other;$/;"	t	struct:mtl::vec::map_view
out	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      OStream&   out;$/;"	m	class:itl::cyclic_iteration
out	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^    std::ostream&            out;$/;"	m	struct:mtl::io::test_ostream
out_value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef typename mtl::Collection<VectorOut>::value_type out_value_type;$/;"	t	struct:itl::pc::ic_0_evaluator
outer_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/utility.hpp	/^std::size_t inline outer_bound(Matrix const& matrix)$/;"	f	class:mtl::recursion::std
outer_bound_splitter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    explicit outer_bound_splitter(Recursator const& recursator) $/;"	f	struct:mtl::recursion::outer_bound_splitter
outer_bound_splitter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^struct outer_bound_splitter$/;"	s	namespace:mtl::recursion
outer_cursor_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef coordinate_major_cursor<Value, Parameters>   outer_cursor_type;$/;"	t	struct:mtl::mat::coordinate_minor_range_generator
outer_end_	Graph.hpp	/^	bool outer_end_() {$/;"	f	class:Graph::EdgeIterator
outer_it_type	Graph.hpp	/^	typedef node_iterator outer_it_type;$/;"	t	class:Graph::EdgeIterator
outer_pos_	Graph.hpp	/^	outer_it_type outer_pos_;$/;"	m	class:Graph::EdgeIterator
outer_product_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    outer_product_functor(const Vector1& v1, const Vector2& v2) : my_v1(v1), my_v2(v2) {}$/;"	f	class:mtl::mat::outer_product_functor
outer_product_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    outer_product_functor(size_type r, size_type c) : my_v1(r), my_v2(c) {}$/;"	f	class:mtl::mat::outer_product_functor
outer_product_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^class outer_product_functor$/;"	c	namespace:mtl::mat
outer_product_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    outer_product_matrix(const Vector1& v1, const Vector2& v2) : base(functor_type(v1, v2)) {}$/;"	f	class:mtl::mat::outer_product_matrix
outer_product_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    outer_product_matrix(size_type r, size_type c) : base(functor_type(r, c)) {}$/;"	f	class:mtl::mat::outer_product_matrix
outer_product_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^class outer_product_matrix$/;"	c	namespace:mtl::mat
own	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    enum c_t {own,         \/\/< My own memory: allocate and free it$/;"	e	enum:mtl::detail::contiguous_memory_block::c_t
own	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    enum c_t {own};$/;"	e	enum:mtl::detail::contiguous_memory_block::c_t
p	Graph.hpp	/^	mutable Point p;$/;"	m	struct:Graph::node_data
p	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    diff_type     p;$/;"	m	struct:mtl::utility::zip_it
p	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    int           p;$/;"	m	struct:mtl::utility::zip_ref
p	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^	const size_type p;$/;"	m	struct:mtl::vec::extracter::bracket_proxy
p_	shortest_path.cpp	/^   Point p_;$/;"	m	struct:MyComparator	file:
p_	subgraph.cpp	/^  Pred p_;$/;"	m	class:filter_iterator	file:
p_orig	Graph.hpp	/^	Point p_orig;$/;"	m	struct:Graph::node_data
pan	CS207/GLCamera.hpp	/^  inline void pan(float x, float y, float z) {$/;"	f	class:CS207::GLCamera
papi_add_event_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_add_event_error(const char *s= "PAPI: add event error") : papi_error(s) {}$/;"	f	struct:mtl::utility::papi_add_event_error
papi_add_event_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_add_event_error : public papi_error $/;"	s	namespace:mtl::utility
papi_create_eventset_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_create_eventset_error(const char *s= "PAPI: create event set error") : papi_error(s) {}$/;"	f	struct:mtl::utility::papi_create_eventset_error
papi_create_eventset_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_create_eventset_error : public papi_error $/;"	s	namespace:mtl::utility
papi_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_error(const char *s= "PAPI error") : runtime_error(s) {}$/;"	f	struct:mtl::utility::papi_error
papi_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_error : public runtime_error$/;"	s	namespace:mtl::utility
papi_index_range_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_index_range_error(const char *s= "PAPI: index range error") : papi_error(s) {}$/;"	f	struct:mtl::utility::papi_index_range_error
papi_index_range_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_index_range_error : public papi_error $/;"	s	namespace:mtl::utility
papi_name_to_code_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_name_to_code_error(const char *s= "PAPI: name to code error") : papi_error(s) {}$/;"	f	struct:mtl::utility::papi_name_to_code_error
papi_name_to_code_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_name_to_code_error : public papi_error $/;"	s	namespace:mtl::utility
papi_no_counters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_no_counters(const char *s= "PAPI: no counters") : papi_error(s) {}$/;"	f	struct:mtl::utility::papi_no_counters
papi_no_counters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_no_counters : public papi_error $/;"	s	namespace:mtl::utility
papi_query_event_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_query_event_error(const char *s= "PAPI: query event error") : papi_error(s) {}$/;"	f	struct:mtl::utility::papi_query_event_error
papi_query_event_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_query_event_error : public papi_error $/;"	s	namespace:mtl::utility
papi_read_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_read_error(const char *s= "PAPI: read error") : papi_error(s) {}$/;"	f	struct:mtl::utility::papi_read_error
papi_read_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_read_error : public papi_error $/;"	s	namespace:mtl::utility
papi_reset_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_reset_error(const char *s= "PAPI: reset error") : papi_error(s) {}$/;"	f	struct:mtl::utility::papi_reset_error
papi_reset_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_reset_error : public papi_error $/;"	s	namespace:mtl::utility
papi_start_event_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_start_event_error(const char *s= "PAPI: start event error") : papi_error(s) {}$/;"	f	struct:mtl::utility::papi_start_event_error
papi_start_event_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_start_event_error : public papi_error$/;"	s	namespace:mtl::utility
papi_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    papi_t() : event_set(PAPI_NULL), active_events(0)$/;"	f	class:mtl::utility::papi_t
papi_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^class papi_t $/;"	c	namespace:mtl::utility
papi_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_t$/;"	s	namespace:mtl::utility
papi_version_mismatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    explicit papi_version_mismatch(const char *s= "PAPI: version mismatch") : papi_error(s) {}$/;"	f	struct:mtl::utility::papi_version_mismatch
papi_version_mismatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^struct papi_version_mismatch : public papi_error $/;"	s	namespace:mtl::utility
para	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef mtl::mat::parameters<mtl::row_major, mtl::index::c_index, mtl::non_fixed::dimensions, false, size_type> para;$/;"	t	class:itl::pc::ic_0
para	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef mtl::mat::parameters<mtl::row_major, mtl::index::c_index, mtl::non_fixed::dimensions, false, size_type> para;$/;"	t	class:itl::pc::ilu
para_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	typedef parameters<typename Parameters::orientation> para_type; $/;"	t	struct:mtl::mat::sub_matrix_t
parallel_transform	Examples/openmp.cpp	/^void parallel_transform(Iter first, Iter last, Function f) {$/;"	f
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef typename mtl::traits::parameters<Matrix>::type parameters;$/;"	t	struct:mtl::mat::banded_view
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef Parameters                               parameters;$/;"	t	class:mtl::mat::compressed2D
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    typedef typename matrix_type::parameters                                      parameters;$/;"	t	struct:mtl::traits::detail::dense2D_iterator_range_generator
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef Parameters                        parameters;$/;"	t	class:mtl::mat::dense2D
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef Parameters                                 parameters;$/;"	t	class:mtl::mat::ell_matrix
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    typedef typename matrix_type::parameters                                      parameters;$/;"	t	struct:mtl::traits::detail::morton_dense_iterator_range_generator
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef Parameters                        parameters;$/;"	t	class:mtl::mat::morton_dense
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/parameter.hpp	/^struct parameters $/;"	s	namespace:mtl::mat
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef mat::parameters<orientation, index_type, dim_type> parameters;$/;"	t	struct:mtl::mat::transposed_view
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	/^struct parameters$/;"	s	namespace:mtl::traits
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	/^struct parameters<mtl::mat::hilbert_matrix<Value> >$/;"	s	namespace:mtl::traits
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	/^struct parameters<mtl::mat::implicit_dense<Functor> >$/;"	s	namespace:mtl::traits
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	/^struct parameters<mtl::mat::multi_vector<Vector> >$/;"	s	namespace:mtl::traits
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	/^struct parameters<mtl::mat::ones_matrix<Value> >$/;"	s	namespace:mtl::traits
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	/^struct parameters<mtl::mat::outer_product_matrix<Vector1, Vector2> >$/;"	s	namespace:mtl::traits
parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/parameter.hpp	/^struct parameters $/;"	s	namespace:mtl::vec
parameters_by_user	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	typedef typename type_para::set_parameters<type_para::init, Values...>::type parameters_by_user;$/;"	t	struct:mtl::set_parameters
paras	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	/^    typedef mat::parameters<row_major, index::c_index, mtl::non_fixed::dimensions, false, size_type> paras;$/;"	t	struct:mtl::vec::make_sparse_trait
pattern_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    class pattern_type {};$/;"	c	class:mtl::io::matrix_market_istream
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/itl_fwd.hpp	/^    namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^namespace itl { namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^namespace itl { namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^namespace itl { namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^namespace itl { namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^namespace itl { namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu_0.hpp	/^namespace itl { namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilut.hpp	/^namespace itl { namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_algorithms.hpp	/^namespace itl {   namespace pc { $/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^namespace itl {   namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/is_identity.hpp	/^namespace itl { namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	/^namespace itl { namespace pc {$/;"	n	namespace:itl
pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^namespace itl { namespace pc {$/;"	n	namespace:itl
pc1	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    pc1_type 	  pc1;$/;"	m	class:itl::pc::concat
pc1_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    typedef typename boost::mpl::if_c<Store1, PC1, const PC1&>::type pc1_type;$/;"	t	class:itl::pc::concat
pc2	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    pc2_type   	  pc2;$/;"	m	class:itl::pc::concat
pc2_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    typedef typename boost::mpl::if_c<Store2, PC2, const PC2&>::type pc2_type;$/;"	t	class:itl::pc::concat
pc_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef typename Solver::pc_type                        pc_type;$/;"	t	struct:itl::pc::ic_0_evaluator
pc_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	/^    typedef PC  pc_type;$/;"	t	struct:itl::pc::solver
pc_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    typedef typename boost::mpl::if_c<Store, Preconditioner, const Preconditioner&>::type pc_type;$/;"	t	class:itl::pc::sub_matrix_pc
permutation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/permutation.hpp	/^    struct permutation$/;"	s	namespace:mtl::mat::traits
permutation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/permutation.hpp	/^inline permutation(const PermutationVector& v)$/;"	f	class:mtl::mat::traits::permutation
permutation_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^    typedef mtl::vec::dense_vector<std::size_t, mtl::vec::parameters<> > permutation_type;$/;"	t	class:mtl::mat::lu_solver
pf	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^    test_ostream& operator<<(test_ostream& (*pf)(test_ostream&))$/;"	f	struct:mtl::io::test_ostream
plus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct plus$/;"	s	namespace:mtl::sfunctor
plus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct plus : boost::mpl::if_< boost::mpl::less<X, Y>, Y, X> {};$/;"	s	namespace:mtl::complexity_classes
plus_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct plus_assign$/;"	s	namespace:mtl::sfunctor
plus_sum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^struct plus_sum$/;"	s	namespace:mtl::assign
point	CS207/GLCamera.hpp	/^  Point point;$/;"	m	class:CS207::GLCamera
point_type	BoundingBox.hpp	/^  typedef Point point_type;$/;"	t	class:BoundingBox
pointer	Graph.hpp	/^    typedef Edge* pointer;$/;"	t	class:Graph::EdgeIterator
pointer	Graph.hpp	/^    typedef Edge* pointer;$/;"	t	class:Graph::IncidentIterator
pointer	Graph.hpp	/^    typedef Node* pointer;$/;"	t	class:Graph::NodeIterator
pointer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^	typedef ref_type*             pointer;$/;"	t	struct:std::iterator_traits
pointer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef Value*            pointer ;$/;"	t	class:mtl::vec::dense_vector
pointer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef Value*                                                                   pointer ;$/;"	t	class:mtl::vec::strided_vector_ref
pointer	Mesh.hpp	/^			typedef Triangle* pointer;$/;"	t	class:Mesh::AdjacentIterator
pointer	Mesh.hpp	/^			typedef Triangle* pointer;$/;"	t	class:Mesh::TriangleIterator
pointer	subgraph.cpp	/^  typedef typename std::iterator_traits<It>::pointer           pointer;$/;"	t	class:filter_iterator	file:
pointer_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    typedef value_type*                       pointer_type;$/;"	t	struct:mtl::detail::memory_crtp
poisson	poisson.cpp	/^	double poisson;$/;"	m	struct:NodeData	file:
poisson2D_dirichlet	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^    poisson2D_dirichlet(int m, int n) : m(m), n(n), s(m * n) {}$/;"	f	struct:mtl::mat::poisson2D_dirichlet
poisson2D_dirichlet	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^struct poisson2D_dirichlet$/;"	s	namespace:mtl::mat
polylog_n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct polylog_n : boost::mpl::int_<5> {};$/;"	s	namespace:mtl::complexity_classes
polynomial	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct polynomial : boost::mpl::int_<200> {};$/;"	s	namespace:mtl::complexity_classes
pop	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	void pop() {$/;"	f	class:utils::binary_heap
pos	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    size_type pos(size_type i) const $/;"	f	class:mtl::vec::sparse_vector
pos_	Graph.hpp	/^	adj_list_iterator pos_;$/;"	m	class:Graph::IncidentIterator
pos_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^	    typedef typename mtl::traits::pos_type<Vector>::type  pos_type;$/;"	t	struct:mtl::vec::max_pos_functor
pos_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^	    typedef typename mtl::traits::pos_type<Vector>::type  pos_type;$/;"	t	struct:mtl::vec::min_pos_functor
pos_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/pos_type.hpp	/^struct pos_type$/;"	s	namespace:mtl::traits
pos_type_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/pos_type.hpp	/^struct pos_type_aux$/;"	s	namespace:mtl::traits
pos_type_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/pos_type.hpp	/^struct pos_type_aux<T, true>$/;"	s	namespace:mtl::traits
position	Graph.hpp	/^	Point& position() {$/;"	f	class:Graph::Node
position	Graph.hpp	/^    const Point& position() const {$/;"	f	class:Graph::Node
position	Mesh.hpp	/^		Point position() const {$/;"	f	class:Mesh::Triangle
post_process	shallow_water.cpp	/^void post_process(MESH& m) {$/;"	f
post_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline Value post_reduction(const Value& value)$/;"	f	struct:mtl::vec::infinity_norm_functor
post_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline Value post_reduction(const Value& value)$/;"	f	struct:mtl::vec::max_functor
post_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline Value post_reduction(const Value& value)$/;"	f	struct:mtl::vec::min_functor
post_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline Value post_reduction(const Value& value)$/;"	f	struct:mtl::vec::one_norm_functor
post_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline Value post_reduction(const Value& value)$/;"	f	struct:mtl::vec::product_functor
post_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline Value post_reduction(const Value& value)$/;"	f	struct:mtl::vec::sum_functor
post_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline Value post_reduction(const Value& value)$/;"	f	struct:mtl::vec::two_norm_functor
post_reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline Value post_reduction(const Value& value)$/;"	f	struct:mtl::vec::unary_dot_functor
power	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/power.hpp	/^    inline Element power(const Element& a, Exponent n, Op op)$/;"	f	namespace:math
power_of_2	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/power_of_2.hpp	/^struct power_of_2$/;"	s	namespace:meta_math
precision	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^	int width, precision;$/;"	m	struct:mtl::detail::with_format_t
print	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void print() const$/;"	f	struct:mtl::mat::compressed2D_inserter
print	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void print(size_type i) const$/;"	f	struct:mtl::mat::compressed2D_inserter
print	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^    print(Value const& value, std::ostream& out= std::cout, int width= 3, int precision= 2)$/;"	f	namespace:mtl::mat
print	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^    print(Value const& value, std::ostream& out= std::cout, int width= 3, int precision= 2)$/;"	f	namespace:mtl::vec
print_internal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void print_internal() const { print(std::cout); }$/;"	f	class:mtl::mat::coordinate2D
print_internal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void print_internal(OStream& os) const$/;"	f	class:mtl::mat::coordinate2D
print_internal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    void print_internal(OStream& os) const$/;"	f	class:mtl::mat::ell_matrix
print_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_matrix.hpp	/^std::ostream& print_matrix(Matrix const& matrix, std::ostream& out= std::cout, int width= 3, int precision= 2)$/;"	f	namespace:mtl::mat
print_resid	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      void print_resid()$/;"	f	class:itl::cyclic_iteration
print_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_size.hpp	/^	int inline print_size(const Matrix& A)$/;"	f	namespace:mtl::mat
print_size_max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_size.hpp	/^	print_size_max() : max(0) {}$/;"	f	struct:mtl::print_size_max
print_size_max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_size.hpp	/^    struct print_size_max$/;"	s	namespace:mtl
print_stl_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void print_stl_vector(OStream& os, const Vector& v) const$/;"	f	class:mtl::mat::coordinate2D
print_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_vector.hpp	/^std::ostream& print_vector(Vector const& vector, std::ostream& out= std::cout, int width= 0, int precision= 0)$/;"	f	namespace:mtl::vec
prod	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    matrix_type  prod;$/;"	m	struct:mtl::traits::eval
product	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/product.hpp	/^	    inline product(const Vector& vector, tag::vector)$/;"	f	class:mtl::vec::impl::Collection
product	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/product.hpp	/^	inline product(const Value& value)$/;"	f	class:mtl::vec::Collection
product_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^struct product_functor$/;"	s	namespace:mtl::vec
prolongate	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    void prolongate(const VectorIn& x, const VectorOut& y0, VectorOut& y) const$/;"	f	class:itl::pc::sub_matrix_pc
proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^    typedef detail::const_iterator_proxy<PropertyMap, Cursor, ValueType>     proxy;$/;"	t	struct:mtl::utilities::const_iterator_adaptor
proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^    typedef detail::iterator_proxy<PropertyMap, Cursor, ValueType>   proxy;$/;"	t	struct:mtl::utilities::iterator_adaptor
proxy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/matrix.hpp	/^	typedef associated_type  proxy_type;$/;"	t	struct:mtl::MatrixInserter
proxy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    typedef operations::update_proxy<self, size_type>   proxy_type;$/;"	t	struct:mtl::detail::trivial_inserter
proxy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef operations::update_proxy<self, size_type>   proxy_type;$/;"	t	struct:mtl::mat::compressed2D_inserter
proxy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef operations::update_proxy<self, size_type>   proxy_type;$/;"	t	struct:mtl::mat::coordinate2D_inserter
proxy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^    typedef operations::update_proxy<BaseInserter, size_type>   proxy_type;$/;"	t	class:mtl::mat::mapped_inserter
proxy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    typedef operations::update_proxy<BaseInserter, size_type>   proxy_type;$/;"	t	class:mtl::mat::shifted_inserter
proxy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef operations::update_proxy<self, size_type>                        proxy_type;$/;"	t	struct:mtl::mat::sparse_banded_inserter
proxy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    typedef update_proxy<self, size_type>            proxy_type;$/;"	t	struct:mtl::vec::inserter
proxy_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^    typedef update_proxy<BaseInserter, size_type>          proxy_type;$/;"	t	class:mtl::vec::mapped_inserter
psb	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/psb.hpp	/^struct psb$/;"	s	namespace:itl
push_back	Examples/proxy_example.cpp	/^  SimpleElement push_back(const std::string& text) {$/;"	f	class:SimpleSet
push_back	Examples/trivial_copy.cpp	/^  void push_back(const T& x) {$/;"	f	class:Vector
push_back	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void push_back(size_type r, size_type c, const_reference v) $/;"	f	class:mtl::mat::coordinate2D
push_back	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	void push_back(size_type i) { indices.push_back(i); }$/;"	f	class:mtl::iset
push_back_comma_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/push_back_comma_inserter.hpp	/^	push_back_comma_inserter(T& ref) : ref(ref) {}$/;"	f	class:mtl::push_back_comma_inserter
push_back_comma_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/push_back_comma_inserter.hpp	/^    class push_back_comma_inserter$/;"	c	namespace:mtl
qmr	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^int qmr(const Matrix& A, Vector& x, const Vector& b, LeftPreconditioner& L, $/;"	f	namespace:itl
qmr_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^    explicit qmr_solver(const LinearOperator& A) : A(A), L(A), R(A) {}$/;"	f	class:itl::qmr_solver
qmr_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^    qmr_solver(const LinearOperator& A, const Preconditioner& L) : A(A), L(L), R(A) {}$/;"	f	class:itl::qmr_solver
qmr_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^    qmr_solver(const LinearOperator& A, const Preconditioner& L, const RightPreconditioner& R) $/;"	f	class:itl::qmr_solver
qmr_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^class qmr_solver$/;"	c	namespace:itl
qr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr.hpp	/^inline qr(const Matrix& A)$/;"	f	class:mtl::mat::std
qr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr.hpp	/^void qr(const Matrix& A, MatrixQ& Q, MatrixR& R)$/;"	f	namespace:mtl::mat
qr_algo	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue_symmetric.hpp	/^inline qr_algo(const Matrix& A, typename Collection<Matrix>::size_type itMax)$/;"	f	class:mtl::mat::mtl::vec
qr_factors	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr.hpp	/^inline qr_factors(const Matrix& A)$/;"	f	class:mtl::mat::std
qr_givens	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^inline qr_givens(const Matrix& A)$/;"	f	class:mtl::mat::std
qr_givens_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    qr_givens_solver(const Matrix& IN) : R(IN), G(2,2), Q(num_cols(IN), num_rows(IN)) {$/;"	f	class:mtl::mat::qr_givens_solver
qr_givens_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^class qr_givens_solver {$/;"	c	namespace:mtl::mat
qr_sym_imp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue_symmetric.hpp	/^inline qr_sym_imp(const Matrix& A)$/;"	f	class:mtl::mat::mtl::vec
qsub_divisible	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct qsub_divisible : virtual has_sub_matrix {};$/;"	s	namespace:mtl::tag
quadratic	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct quadratic : boost::mpl::int_<41> {};$/;"	s	namespace:mtl::complexity_classes
quasi_newton	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/minimization/quasi_newton.hpp	/^Vector inline quasi_newton(Vector& x, F f, Grad grad_f, Step step, Update update, Iter& iter) $/;"	f	namespace:itl
quasi_newton	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/minimization/quasi_newton.hpp	/^Vector quasi_newton(Vector& x, F f, Grad grad_f, Step step, Update update, Iter& iter) $/;"	f	namespace:itl
quicksort	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	/^void quicksort (Vector& a, PermVec& p, typename Collection<Vector>::size_type lo, typename Collection<Vector>::size_type hi)  $/;"	f	namespace:mtl::vec
quicksort	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	/^void quicksort (Vector& a, Vector& b, PermVec& p, typename Collection<Vector>::size_type lo, typename Collection<Vector>::size_type hi)  $/;"	f	namespace:mtl::vec
quicksort	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	/^void quicksort (Vector& a, typename Collection<Vector>::size_type lo, typename Collection<Vector>::size_type hi)  $/;"	f	namespace:mtl::vec
quicksort_xy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	/^void quicksort_xy(Vector& a, Vector& b, PermVec& p, typename Collection<Vector>::size_type lo, $/;"	f	namespace:mtl::vec
quotient	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/sqrt.hpp	/^	static long int const quotient = x \/ guess,$/;"	m	struct:meta_math::impl::sqrt_impl
r	CS207/Color.hpp	/^  value_type r, g, b;$/;"	m	struct:CS207::Color
r	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^	SizeType       r, c;$/;"	m	struct:mtl::mat::crtp_matrix_assign::scalar_assign
r	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	size_type r, c;$/;"	m	struct:mtl::non_fixed::dimensions
r	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    const irange                r;$/;"	m	class:mtl::mat::multi_vector_range
ra_adaptor_operators	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^struct ra_adaptor_operators $/;"	s	namespace:mtl::utilities::detail
radix_sort	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sorting.hpp	/^void radix_sort($/;"	f
random	CS207/Util.hpp	/^double random() {$/;"	f	namespace:CS207
random	CS207/Util.hpp	/^double random(double a, double b) {$/;"	f	namespace:CS207
random	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^    inline random(Matrix& A) $/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
random	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^    inline random(Matrix& A, Generator& generator) $/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
random	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^    inline random(Vector& v)$/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
random	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^    inline random(Vector& v, Generator& generator) $/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
random	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^    void inline random(Coll& A, Generator& generator, tag::universe, tag::matrix)$/;"	f	namespace:mtl::impl
random	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^    void inline random(Coll& A, Generator&, tag::universe, tag::multi_vector)$/;"	f	namespace:mtl::impl
range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    namespace range {$/;"	n	namespace:mtl::traits
range_bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	explicit range_bracket_proxy(Ref matrix, const irange& row_range) : matrix(matrix), row_range(row_range) {}$/;"	f	struct:mtl::operations::range_bracket_proxy
range_bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^    struct range_bracket_proxy$/;"	s	namespace:mtl::operations
range_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit range_error(const char *s= "Invalid range") : std::range_error(s) {}$/;"	f	struct:mtl::range_error
range_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct range_error : public std::range_error$/;"	s	namespace:mtl
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    struct range_generator<Tag, banded_view<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    struct range_generator<tag::major, banded_view<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    struct range_generator<glas::tag::col, compressed2D<Elt, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    struct range_generator<glas::tag::major, compressed2D<Elt, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    struct range_generator<glas::tag::nz, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    struct range_generator<glas::tag::nz, compressed2D<Elt, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    struct range_generator<glas::tag::row, compressed2D<Elt, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    struct range_generator<tag::const_iter::nz, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    struct range_generator<glas::tag::col, mat::coordinate2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    struct range_generator<glas::tag::nz, mat::coordinate_major_cursor<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    struct range_generator<glas::tag::row, mat::coordinate2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct range_generator<glas::tag::all, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct range_generator<glas::tag::all, dense2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct range_generator<glas::tag::col, dense2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct range_generator<glas::tag::nz, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct range_generator<glas::tag::nz, dense2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct range_generator<glas::tag::row, dense2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct range_generator<tag::const_iter::all, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct range_generator<tag::const_iter::nz, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct range_generator<tag::iter::all, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct range_generator<tag::iter::nz, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^struct range_generator< Tag, mtl::mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^struct range_generator< tag::major, mtl::mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    struct range_generator<Tag, mtl::mat::hilbert_matrix<Value> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    struct range_generator<Tag, mtl::mat::ones_matrix<Value> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    struct range_generator<Tag, mtl::mat::outer_product_matrix<Vector1, Vector2> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    struct range_generator<glas::tag::col, mtl::mat::implicit_dense<Functor> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    struct range_generator<glas::tag::major, mtl::mat::hilbert_matrix<Value> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    struct range_generator<glas::tag::major, mtl::mat::implicit_dense<Functor> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    struct range_generator<glas::tag::major, mtl::mat::ones_matrix<Value> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    struct range_generator<glas::tag::major, mtl::mat::outer_product_matrix<Vector1, Vector2> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    struct range_generator<glas::tag::nz,$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    struct range_generator<glas::tag::row, mtl::mat::implicit_dense<Functor> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    struct range_generator<Tag, mtl::mat::map_view<Functor, Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    struct range_generator<tag::major, mtl::mat::map_view<Functor, Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct range_generator< Tag, mtl::mat::conj_view<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct range_generator< Tag, mtl::mat::divide_by_view<Matrix, Divisor> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct range_generator< Tag, mtl::mat::rscaled_view<Matrix, RScaling> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct range_generator< Tag, mtl::mat::scaled_view<Scaling, Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct range_generator< tag::major, mtl::mat::conj_view<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct range_generator< tag::major, mtl::mat::divide_by_view<Matrix, Divisor> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct range_generator< tag::major, mtl::mat::rscaled_view<Matrix, RScaling> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct range_generator< tag::major, mtl::mat::scaled_view<Scaling, Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct range_generator<glas::tag::all, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct range_generator<glas::tag::all, morton_dense<Elt, BitMask, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct range_generator<glas::tag::col, morton_dense<Elt, BitMask, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct range_generator<glas::tag::nz, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct range_generator<glas::tag::nz, morton_dense<Elt, BitMask, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct range_generator<glas::tag::row, morton_dense<Elt, BitMask, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct range_generator<tag::const_iter::all, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct range_generator<tag::const_iter::nz, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct range_generator<tag::iter::all, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct range_generator<tag::iter::nz, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    struct range_generator<glas::tag::major, sparse_banded<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    struct range_generator<glas::tag::nz, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    struct range_generator<glas::tag::row, sparse_banded<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    struct range_generator<Tag, mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    struct range_generator<glas::tag::col, mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    struct range_generator<glas::tag::row, mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    struct range_generator<tag::major, mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^struct range_generator<tag::const_iter::nz, Matrix>$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^    struct range_generator$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^    struct range_generator<glas::tag::all, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^    struct range_generator<glas::tag::col, mtl::mat::indirect<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^    struct range_generator<glas::tag::major, mtl::mat::indirect<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^    struct range_generator<glas::tag::nz, $/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^    struct range_generator<glas::tag::row, mtl::mat::indirect<Matrix> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^    struct range_generator<tag::major, Matrix>$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^    struct range_generator<tag::minor, Matrix>$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    struct range_generator<tag::all, mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    struct range_generator<tag::const_iter::all, mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    struct range_generator<tag::const_iter::nz, mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    struct range_generator<tag::iter::all, mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    struct range_generator<tag::iter::nz, mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    struct range_generator<tag::nz, mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    struct range_generator<Tag, vec::map_view<Functor, Vector> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    struct range_generator<tag::all, vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    struct range_generator<tag::const_iter::all, vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    struct range_generator<tag::const_iter::nz, vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    struct range_generator<tag::iter::all, vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    struct range_generator<tag::iter::nz, vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    struct range_generator<tag::nz, vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::traits
range_of	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^inline range_of(const T& x)$/;"	f	class:mtl::mtl::traits
range_transposer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	struct range_transposer$/;"	s	namespace:mtl::traits::detail
range_transposer_impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	struct range_transposer_impl$/;"	s	namespace:mtl::traits::detail
range_wrapper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^    explicit range_wrapper(const Collection& c) : c(c) {} \/\/< Initialize with collection$/;"	f	struct:mtl::traits::range_wrapper
range_wrapper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^struct range_wrapper$/;"	s	namespace:mtl::traits
rank_one_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rank_one_update.hpp	/^inline void rank_one_update(Matrix& matrix, const VectorX& x, const VectorY& y)$/;"	f	namespace:mtl::mat
rank_two_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rank_two_update.hpp	/^inline void rank_two_update(Matrix& matrix, const VectorX& x, const VectorY& y)$/;"	f	namespace:mtl::mat
raw_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void raw_copy(ValueIterator first_value, ValueIterator last_value, $/;"	f	class:mtl::mat::compressed2D
raw_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/raw_copy.hpp	/^void raw_copy(InputIterator first, InputIterator last, Matrix& matrix)$/;"	f	namespace:mtl
read	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^matrix_market_istream& matrix_market_istream::read(Matrix& A, tag::matrix)$/;"	f	class:mtl::io::matrix_market_istream
read	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    void read() {}$/;"	f	struct:mtl::utility::papi_t
read	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    void read()$/;"	f	class:mtl::utility::papi_t
read_el_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_el_matrix.hpp	/^inline void read_el_matrix(std::string& mat_file, element_structure<ValueType>& A) $/;"	f	namespace:mtl::mat
read_el_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_el_matrix.hpp	/^void read_el_matrix(StreamType& file, element_structure<ValueType>& A) $/;"	f	namespace:mtl::mat
read_el_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_el_matrix.hpp	/^void read_el_matrix(const char* mat_file, element_structure<ValueType>& A) $/;"	f	namespace:mtl::mat
read_filter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_filter.hpp	/^    explicit read_filter(const Inserter& inserter) : inserter(inserter) {}$/;"	f	class:mtl::io::read_filter
read_filter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_filter.hpp	/^class read_filter$/;"	c	namespace:mtl::io
read_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void read_matrix(Inserter& ins, Value)$/;"	f	class:mtl::io::matrix_market_istream
read_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void read_value(double& v) { my_stream >> v;}$/;"	f	class:mtl::io::matrix_market_istream
read_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void read_value(long& v) { my_stream >> v;}$/;"	f	class:mtl::io::matrix_market_istream
read_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void read_value(pattern_type) {}$/;"	f	class:mtl::io::matrix_market_istream
read_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void read_value(std::complex<double>& v) $/;"	f	class:mtl::io::matrix_market_istream
read_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/read_el_matrix.hpp	/^inline T read_value(StreamType& stream) $/;"	f	namespace:mtl::mat
real	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    typedef Real            real;$/;"	t	class:itl::basic_iteration
real	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^    inline real(const Matrix& v)$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
real	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^    inline real(const Vector& v)$/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
real	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^    struct real$/;"	s	namespace:mtl::sfunctor
real	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^    struct real<std::complex<Value> >$/;"	s	namespace:mtl::sfunctor
real	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^inline real(const Value& v)$/;"	f	class:mtl::mtl::traits::enable_if_scalar
real_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    real_view (const self& that) : base(that) {}$/;"	f	struct:mtl::mat::real_view
real_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    real_view (self&& that) : base(that) {}$/;"	f	struct:mtl::mat::real_view
real_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    real_view(boost::shared_ptr<Matrix> p) : base(functor_type(), p) {}$/;"	f	struct:mtl::mat::real_view
real_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    real_view(const Matrix& matrix) : base(functor_type(), matrix) {}$/;"	f	struct:mtl::mat::real_view
real_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct real_view$/;"	s	namespace:mtl::mat
real_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit real_view(boost::shared_ptr<Vector> p)$/;"	f	struct:mtl::vec::real_view
real_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit real_view(const Vector& vector)$/;"	f	struct:mtl::vec::real_view
real_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    real_view (const self& that) : base(that) {}$/;"	f	struct:mtl::vec::real_view
real_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    real_view (self&& that) : base(that) {}$/;"	f	struct:mtl::vec::real_view
real_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^struct real_view$/;"	s	namespace:mtl::vec
realloc	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void realloc(std::size_t size)$/;"	f	struct:mtl::detail::contiguous_memory_block
rec_part	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^	rec_part= (IOrder ? i_order_mask<rec_size>::value : z_order_mask<rec_size>::value) << 2*K;$/;"	m	class:mtl::generate_mask
rec_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const unsigned long rec_size= 8 * sizeof(unsigned long) - 2 * K,$/;"	m	class:mtl::generate_mask
reciprocal	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/inverse.hpp	/^inline Element reciprocal(const Element& v)$/;"	f	namespace:math
recursator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    explicit recursator(Matrix const& matrix,$/;"	f	struct:mtl::mat::recursator
recursator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^struct recursator$/;"	s	namespace:mtl::mat
recursion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace recursion {}$/;"	n	namespace:mtl
recursion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_cast.hpp	/^namespace mtl { namespace recursion {$/;"	n	namespace:mtl
recursion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_matrix.hpp	/^namespace mtl { namespace recursion {$/;"	n	namespace:mtl
recursion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^namespace mtl { namespace recursion {$/;"	n	namespace:mtl
recursion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^namespace mtl { namespace recursion {$/;"	n	namespace:mtl
recursion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/for_each.hpp	/^namespace mtl { namespace recursion {$/;"	n	namespace:mtl
recursion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^namespace mtl { namespace recursion {$/;"	n	namespace:mtl
recursion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/simplify_base_case_matrix.hpp	/^namespace mtl { namespace recursion {$/;"	n	namespace:mtl
recursion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/utility.hpp	/^namespace mtl { namespace recursion {$/;"	n	namespace:mtl
recursive_cholesky	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^inline void recursive_cholesky(Matrix& matrix)$/;"	f	namespace:mtl::mat
recursive_cholesky	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^inline void recursive_cholesky(Matrix& matrix, Visitor vis)$/;"	f	namespace:mtl::mat
recursive_cholesky_base_visitor_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^               recursive_cholesky_base_visitor_t;$/;"	t	namespace:mtl::mat::with_bracket
recursive_cholesky_default_visitor_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^typedef with_bracket::recursive_cholesky_base_visitor_t                    recursive_cholesky_default_visitor_t;$/;"	t	namespace:mtl::mat
recursive_cholesky_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^struct recursive_cholesky_t$/;"	s	namespace:mtl::mat
recursive_cholesky_visitor_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^struct recursive_cholesky_visitor_t$/;"	s	namespace:mtl::mat
reduce_slot	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void reduce_slot(size_type i)$/;"	f	struct:mtl::mat::compressed2D_inserter
reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^	struct reduction$/;"	s	namespace:mtl::vec::impl
reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^	struct reduction<Max0, Max0, Functor>$/;"	s	namespace:mtl::vec::impl
reduction	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^struct reduction$/;"	s	namespace:mtl::vec
reduction_index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^    reduction_index_evaluator(Scalar& scalar, const Vector& v) $/;"	f	struct:mtl::vec::reduction_index_evaluator
reduction_index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^struct reduction_index_evaluator$/;"	s	namespace:mtl::vec
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	Matrix const& ref;$/;"	m	struct:mtl::traits::detail::matrix_element_cursor
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	Matrix const& ref;$/;"	m	struct:mtl::traits::detail::matrix_element_key
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	Matrix const& ref;$/;"	m	struct:mtl::traits::detail::sub_matrix_cursor
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^	self&      ref;$/;"	m	struct:mtl::detail::trivial_inserter::bracket_proxy
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    const other&      ref;$/;"	m	struct:mtl::mat::banded_view
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	self&      ref;$/;"	m	struct:mtl::mat::compressed2D_inserter::bracket_proxy
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^	self&      ref;$/;"	m	struct:mtl::mat::coordinate2D_inserter::bracket_proxy
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^	self& ref;$/;"	m	struct:mtl::mat::coordinate2D_inserter::update_proxy
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    matrix_ref_type ref;$/;"	m	struct:mtl::mat::coordinate_major_cursor
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    matrix_ref_type ref;$/;"	m	struct:mtl::mat::coordinate_minor_cursor
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    const Matrix& ref;$/;"	m	struct:mtl::mat::indirect
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    const other&      ref;$/;"	m	struct:mtl::mat::map_view
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^	BaseInserter&   ref;$/;"	m	struct:mtl::mat::mapped_inserter::bracket_proxy
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    const multi_vector<Vector>& ref;$/;"	m	class:mtl::mat::multi_vector_range
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^	BaseInserter&   ref;$/;"	m	struct:mtl::mat::shifted_inserter::bracket_proxy
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	self&      ref;$/;"	m	struct:mtl::mat::sparse_banded_inserter::bracket_proxy
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    ref_type                            ref;$/;"	m	struct:mtl::mat::transposed_view
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^	    const T& ref;$/;"	m	struct:mtl::traits::impl::eval_self_ref
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/push_back_comma_inserter.hpp	/^	T& ref;$/;"	m	class:mtl::push_back_comma_inserter
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typename mtl::traits::copy_expression_const_ref_container<Vector>::type ref;$/;"	m	struct:mtl::vec::map_view
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    Vector&    ref;$/;"	m	class:mtl::vec::unrolled1
ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^    const Vector& ref;$/;"	m	struct:mtl::vec::vec_const_ref_expr
ref2_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    typedef mtl::mat::dense2D<Value, Parameters>         ref2_type;$/;"	t	struct:mtl::ColumnInMatrix
ref2_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    typedef mtl::mat::dense2D<Value, Parameters>         ref2_type;$/;"	t	struct:mtl::RowInMatrix
ref_bands	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    std::vector<band_size_type> const& ref_bands() const { return bands; } \/\/\/< Refer bands vector [advanced]$/;"	f	class:mtl::mat::sparse_banded::std
ref_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^          std::vector<value_type>& ref_data()        { return data; } \/\/\/< Refer data vector [advanced]$/;"	f	class:mtl::mat::ell_matrix
ref_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    const std::vector<value_type>& ref_data()  const { return data; } \/\/\/< Refer data vector [advanced]$/;"	f	class:mtl::mat::ell_matrix
ref_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    const value_type*                  ref_data() const { return data; } \/\/\/< Refer data pointer [advanced]$/;"	f	class:mtl::mat::sparse_banded
ref_elements	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<value_type> const& ref_elements() const { return elements; } \/\/\/< Refer element vector [advanced]$/;"	f	class:mtl::mat::compressed2D_inserter::std
ref_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^          std::vector<size_type>& ref_major()       { return starts; } \/\/\/< Refer start vector [advanced]$/;"	f	class:mtl::mat::compressed2D
ref_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    const std::vector<size_type>& ref_major() const { return starts; } \/\/\/< Refer start vector [advanced]$/;"	f	class:mtl::mat::compressed2D
ref_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<size_type> const& ref_major() const { return starts; } \/\/\/< Refer start vector [advanced]$/;"	f	class:mtl::mat::compressed2D_inserter::std
ref_minor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^          std::vector<size_type>& ref_minor()       { return indices; } \/\/\/< Refer index vector [advanced]$/;"	f	class:mtl::mat::compressed2D
ref_minor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    const std::vector<size_type>& ref_minor() const { return indices; } \/\/\/< Refer index vector [advanced]$/;"	f	class:mtl::mat::compressed2D
ref_minor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<size_type> const& ref_minor() const { return indices; } \/\/\/< Refer index vector [advanced]$/;"	f	class:mtl::mat::compressed2D_inserter::std
ref_minor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^          std::vector<size_type>&  ref_minor()       { return indices; } \/\/\/< Refer index vector [advanced]$/;"	f	class:mtl::mat::ell_matrix
ref_minor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    const std::vector<size_type>&  ref_minor() const { return indices; } \/\/\/< Refer index vector [advanced]$/;"	f	class:mtl::mat::ell_matrix
ref_on_stack	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct ref_on_stack$/;"	s	namespace:mtl::mat::detail
ref_on_stack	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct ref_on_stack<Matrix, true>$/;"	s	namespace:mtl::mat::detail
ref_slot_ends	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<size_type> const& ref_slot_ends() const { return slot_ends; } \/\/\/< Refer slot-end vector [advanced]$/;"	f	class:mtl::mat::compressed2D_inserter::std
ref_sub_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef typename sub_matrix_t<Matrix>::sub_matrix_type                        ref_sub_type;$/;"	t	struct:mtl::mat::sub_matrix_t
ref_sub_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef typename sub_matrix_t<Matrix>::const_sub_matrix_type                       ref_sub_type;$/;"	t	struct:mtl::mat::sub_matrix_t
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef Matrix                                           ref_type;$/;"	t	struct:mtl::traits::detail::all_rows_range_generator
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef Matrix                           ref_type;$/;"	t	struct:mtl::traits::detail::sub_matrix_cursor
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename Cursor::ref_type                        ref_type;$/;"	t	struct:mtl::traits::detail::all_cols_in_row_range_generator
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename Cursor::ref_type                        ref_type;$/;"	t	struct:mtl::traits::detail::all_rows_in_col_range_generator
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_expr.hpp	/^    typedef Matrix   ref_type;$/;"	t	struct:mtl::mat::mat_expr
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^				    >::type                  ref_type;$/;"	t	struct:mtl::mat::transposed_view
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    typedef mtl::mat::dense2D<Value, Parameters>         ref_type;$/;"	t	struct:mtl::ColumnInMatrix
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    typedef mtl::mat::dense2D<Value, Parameters> const   ref_type;$/;"	t	class:mtl::ColumnInMatrix::mtl::mat
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    typedef mtl::mat::dense2D<Value, Parameters> const   ref_type;$/;"	t	class:mtl::RowInMatrix::mtl::mat
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    typedef mtl::mat::dense2D<Value, Parameters> ref_type;$/;"	t	struct:mtl::RowInMatrix
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^	    typedef typename boost::mpl::if_c<(IsConst == 1), const Matrix&, Matrix&>::type ref_type;$/;"	t	struct:mtl::mat::detail::trans
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^	typedef mtl::utility::zip_ref<T, U>    ref_type;$/;"	t	struct:std::iterator_traits
ref_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    typedef zip_ref<T, U>        ref_type;$/;"	t	struct:mtl::utility::zip_it
refer_ctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    struct refer_ctor {};$/;"	s	namespace:mtl
reference	Graph.hpp	/^    typedef Edge& reference;$/;"	t	class:Graph::EdgeIterator
reference	Graph.hpp	/^    typedef Edge& reference;$/;"	t	class:Graph::IncidentIterator
reference	Graph.hpp	/^    typedef Node& reference;$/;"	t	class:Graph::NodeIterator
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef Value&           reference;$/;"	t	struct:mtl::MutableCollection
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef associated_type reference;$/;"	t	struct:mtl::MutableCollection
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename std::vector<Value>::reference       reference;$/;"	t	struct:mtl::MutableCollection
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef Value&                                                      reference;$/;"	t	class:mtl::mat::coordinate2D
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef value_type&                       reference;$/;"	t	class:mtl::mat::dense2D
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef value_type&                       reference;$/;"	t	class:mtl::mat::morton_dense
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    typedef value_type&                              reference;$/;"	t	class:mtl::mat::multi_vector
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^	typedef ref_type&             reference;$/;"	t	struct:std::iterator_traits
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef value_type&       reference ;$/;"	t	class:mtl::vec::dense_vector
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef Value&                                                                   reference ;$/;"	t	class:mtl::vec::strided_vector_ref
reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    typedef value_type&                             reference ;$/;"	t	class:mtl::vec::unrolled1
reference	Mesh.hpp	/^			typedef Triangle& reference;$/;"	t	class:Mesh::AdjacentIterator
reference	Mesh.hpp	/^			typedef Triangle& reference;$/;"	t	class:Mesh::TriangleIterator
reference	Point.hpp	/^  typedef double&         reference;$/;"	t	struct:Point
reference	subgraph.cpp	/^  typedef typename std::iterator_traits<It>::reference         reference;$/;"	t	class:filter_iterator	file:
reference_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    typedef value_type reference_type ;$/;"	t	struct:mtl::vec::vec_scal_aop_expr
reference_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    typedef value_type reference_type ;$/;"	t	struct:mtl::vec::vec_vec_aop_expr
referred_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct referred_range_generator$/;"	s	namespace:mtl::traits::detail
regular_diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct regular_diagonal : universe_diagonal {};$/;"	s	namespace:mtl::tag
relresid	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    Real relresid() const { return resid_ \/ norm_r0; }$/;"	f	class:itl::basic_iteration
remove	Examples/proxy_example.cpp	/^  void remove(size_type i) {$/;"	f	class:SimpleSet
remove	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	void remove(value_type node) {$/;"	f	class:utils::binary_heap
remove_box	poisson.cpp	/^void remove_box(GraphType& g, const BoundingBox& bb) {$/;"	f
remove_edge	Graph.hpp	/^  edge_iterator remove_edge(edge_iterator e_it) const {$/;"	f	class:Graph
remove_edge	Graph.hpp	/^  size_type remove_edge(const Edge& e) const {$/;"	f	class:Graph
remove_edge	Graph.hpp	/^  size_type remove_edge(const Node& a, const Node& b) const {$/;"	f	class:Graph
remove_edge	Graph.hpp	/^  size_type remove_edge(const Node& n) const {$/;"	f	class:Graph
remove_edge_	Graph.hpp	/^  edge_iterator remove_edge_(uid_type uid_a, uid_type uid_b) const {$/;"	f	class:Graph
remove_node	Graph.hpp	/^  node_iterator remove_node(node_iterator n_it) const {$/;"	f	class:Graph
remove_node	Graph.hpp	/^  size_type remove_node(const Node& n) const {$/;"	f	class:Graph
remove_nodes	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    void remove_nodes(const Vector& nodes, element_type& el) {$/;"	f	class:mtl::mat::element
render	CS207/SDLViewer.hpp	/^  void render() {$/;"	f	class:CS207::SDLViewer
render_label	CS207/SDLViewer.hpp	/^  void render_label() {$/;"	f	class:CS207::SDLViewer
render_lcd_segments	CS207/SDLViewer.hpp	/^  void render_lcd_segments(unsigned segments) {$/;"	f	class:CS207::SDLViewer
render_requested_	CS207/SDLViewer.hpp	/^  bool render_requested_;$/;"	m	class:CS207::SDLViewer
reorder	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder.hpp	/^    struct reorder$/;"	s	namespace:mtl::mat::traits
reorder	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder.hpp	/^inline reorder(const ReorderVector& v, std::size_t cols= 0)$/;"	f	class:mtl::mat::traits::reorder
reorder	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder.hpp	/^reorder(const ReorderVector& v, std::size_t cols= 0)$/;"	f	namespace:mtl::mat
reorder_matrix_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder_matrix_rows.hpp	/^Matrix reorder_matrix_rows(const ReorderVector& v, const Matrix& A)$/;"	f	namespace:mtl::mat
reorder_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder_ref.hpp	/^void reorder_ref(const ReorderVector& v, Matrix& A, std::size_t cols= 0)$/;"	f	namespace:mtl::mat
repeated	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/repeated.hpp	/^    repeated(const Matrix& A) : smoother(A) {}$/;"	f	class:itl::repeated
repeated	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/repeated.hpp	/^    repeated(const Smoother& smoother) : smoother(smoother) {}$/;"	f	class:itl::repeated
repeated	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/repeated.hpp	/^class repeated$/;"	c	namespace:itl
repeating_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/repeating_solver.hpp	/^    explicit repeating_solver(const Matrix& A) : s(A)$/;"	f	class:itl::repeating_solver
repeating_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/repeating_solver.hpp	/^    explicit repeating_solver(const Solver& s) : s(s) {}$/;"	f	class:itl::repeating_solver
repeating_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/repeating_solver.hpp	/^class repeating_solver$/;"	c	namespace:itl
replace_defaults	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	struct replace_defaults$/;"	s	namespace:mtl::type_para
replace_defaults_common	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct replace_defaults_common$/;"	s	namespace:mtl::type_para
replace_defaults_local	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_local.hpp	/^	struct replace_defaults_local$/;"	s	namespace:mtl::type_para
request_render	CS207/SDLViewer.hpp	/^  void request_render() {$/;"	f	class:CS207::SDLViewer
res	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void col_init(size_type MTL_DEBUG_ARG(r), Cursor& MTL_DEBUG_ARG(aic), Cursor& aiend, Value& rr, Value& res, tag::inverse_diagonal) const$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
res	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void col_init(size_type MTL_DEBUG_ARG(r), Cursor& MTL_DEBUG_ARG(aic), Cursor& aiend, Value& rr, Value& res, tag::regular_diagonal) const$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
reset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    void reset() {}$/;"	f	struct:mtl::utility::papi_t
reset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    void reset()$/;"	f	class:mtl::utility::papi_t
resid	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    Real resid() const { return resid_; }$/;"	f	class:itl::basic_iteration
resid_	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    Real         rtol_, atol_, resid_;$/;"	m	class:itl::basic_iteration
resource	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/resource.hpp	/^	inline resource(const Vector& v)$/;"	f	class:mtl::vec::mtl::traits::vector_resource
rest_length	Graph.hpp	/^	scalar rest_length;$/;"	m	struct:Graph::edge_data
restart	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^    size_t                restart;$/;"	m	class:itl::gmres_solver
restrict	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    void restrict(const VectorIn& x, VectorIn& x0) const$/;"	f	class:itl::pc::sub_matrix_pc
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/std_concept.hpp	/^	typedef associated_type result_type;$/;"	t	struct:mtl::BinaryFunctor
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/std_concept.hpp	/^	typedef associated_type result_type;$/;"	t	struct:mtl::BinaryStaticFunctor
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/std_concept.hpp	/^	typedef associated_type result_type;$/;"	t	struct:mtl::UnaryFunctor
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/std_concept.hpp	/^	typedef associated_type result_type;$/;"	t	struct:mtl::UnaryStaticFunctor
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^				   typename Collection<Vector2>::value_type>::result_type   result_type;$/;"	t	class:mtl::mat::outer_product_functor
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef Value          result_type;$/;"	t	class:mtl::mat::hilbert_functor
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef Value          result_type;$/;"	t	class:mtl::mat::ones_functor
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	typedef mat::conj_view<Matrix> result_type;$/;"	t	struct:mtl::sfunctor::conj_aux
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	typedef Value result_type;$/;"	t	struct:mtl::sfunctor::conj_aux
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^	typedef std::complex<Value> result_type;$/;"	t	struct:mtl::sfunctor::conj_aux
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^	typedef mat::divide_by_view<Matrix,Value2> result_type;$/;"	t	struct:mtl::tfunctor::divide_by
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^	typedef typename Multiplicable<Value1, Value2>::result_type result_type;$/;"	t	struct:mtl::tfunctor::divide_by
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^	typedef vec::divide_by_view<Vector, Value2> result_type;$/;"	t	struct:mtl::tfunctor::divide_by
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    typedef typename detail::dot_result<Vector1, Vector2>::type result_type;$/;"	t	struct:mtl::vec::dot_class
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/hermitian.hpp	/^		typedef typename mtl::traits::compose_view<code, typename mtl::traits::viewed_collection<Matrix>::type>::type result_type;$/;"	t	struct:mtl::mat::detail::hermitian
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^	typedef Value result_type;$/;"	t	struct:mtl::sfunctor::imag
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^	    typedef std::pair<value_type, pos_type>               result_type;$/;"	t	struct:mtl::vec::max_pos_functor
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^	    typedef std::pair<value_type, pos_type>               result_type;$/;"	t	struct:mtl::vec::min_pos_functor
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^	typedef Value result_type;$/;"	t	struct:mtl::sfunctor::real
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^	typedef mat::rscaled_view<Matrix,Value2> result_type;$/;"	t	struct:mtl::tfunctor::rscale
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^	typedef typename Multiplicable<Value1, Value2>::result_type result_type;$/;"	t	struct:mtl::tfunctor::rscale
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^	typedef vec::rscaled_view<Vector, Value2> result_type;$/;"	t	struct:mtl::tfunctor::rscale
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    typedef mat::scaled_view<Value1, Matrix> result_type;	    $/;"	t	struct:mtl::tfunctor::scale
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    typedef typename Multiplicable<Value1, Value2>::result_type result_type;	    $/;"	t	struct:mtl::tfunctor::scale
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    typedef vec::scaled_view<type1, Vector> result_type;$/;"	t	struct:mtl::tfunctor::scale
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value                                         result_type;$/;"	t	struct:mtl::sfunctor::identity
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value                                         result_type;$/;"	t	struct:mtl::sfunctor::negate
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value                                         result_type;$/;"	t	struct:mtl::sfunctor::sqrt
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value                                         result_type;$/;"	t	struct:mtl::sfunctor::square
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value1&                                       result_type;$/;"	t	struct:mtl::sfunctor::assign
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value1&                                       result_type;$/;"	t	struct:mtl::sfunctor::divide_assign
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value1&                                       result_type;$/;"	t	struct:mtl::sfunctor::minus_assign
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value1&                                       result_type;$/;"	t	struct:mtl::sfunctor::plus_assign
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef Value1&                                       result_type;$/;"	t	struct:mtl::sfunctor::times_assign
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename Addable<Value1, Value2>::result_type result_type;$/;"	t	struct:mtl::sfunctor::plus
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename Divisible<Value1, Value2>::result_type result_type;$/;"	t	struct:mtl::sfunctor::divide
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename Magnitude<Value>::type               result_type;$/;"	t	struct:mtl::sfunctor::abs
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename Multiplicable<Value1, Value2>::result_type result_type;$/;"	t	struct:mtl::sfunctor::times
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticBinaryFunctor<F>::result_type          result_type;$/;"	t	struct:mtl::sfunctor::compose_both
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticBinaryFunctor<F>::result_type          result_type;$/;"	t	struct:mtl::sfunctor::compose_first
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticBinaryFunctor<F>::result_type          result_type;$/;"	t	struct:mtl::sfunctor::compose_second
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticUnaryFunctor<F>::result_type           result_type;$/;"	t	struct:mtl::sfunctor::compose_binary
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticUnaryFunctor<F>::result_type   result_type;$/;"	t	struct:mtl::sfunctor::compose
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename Subtractable<Value1, Value2>::result_type result_type;$/;"	t	struct:mtl::sfunctor::minus
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/signum.hpp	/^	typedef Value result_type;$/;"	t	struct:mtl::sfunctor::signum
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    typedef Value1 result_type;	    $/;"	t	struct:mtl::tfunctor::right_max
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    typedef Value1 result_type;	    $/;"	t	struct:mtl::tfunctor::right_min
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    typedef Value2 result_type;	    $/;"	t	struct:mtl::tfunctor::left_max
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    typedef Value2 result_type;	    $/;"	t	struct:mtl::tfunctor::left_min
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    typedef typename Addable<Value1, Value2>::result_type result_type;	    $/;"	t	struct:mtl::tfunctor::left_plus
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    typedef typename Addable<Value1, Value2>::result_type result_type;	    $/;"	t	struct:mtl::tfunctor::right_plus
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    typedef typename Subtractable<Value1, Value2>::result_type result_type;	    $/;"	t	struct:mtl::tfunctor::left_minus
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    typedef typename Subtractable<Value1, Value2>::result_type result_type;	    $/;"	t	struct:mtl::tfunctor::right_minus
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^	    typedef typename mtl::traits::compose_view<code, typename mtl::traits::viewed_collection<Matrix>::type>::type result_type;$/;"	t	struct:mtl::mat::detail::trans
result_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	typedef mtl::vec::conj_view<Vector> result_type;$/;"	t	struct:mtl::sfunctor::conj_aux
result_type_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/vector_concepts.hpp	/^    typedef associated_type result_type_norm;$/;"	t	struct:math::Norm
result_value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef typename Multiplicable<first_value_type, second_value_type>::result_type result_value_type;$/;"	t	struct:mtl::mat::mat_mat_times_expr
resume_suppressed	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    bool resume_suppressed() const { return my_suppress; }$/;"	f	class:itl::basic_iteration
rightV	CS207/GLCamera.hpp	/^  Point rightV;$/;"	m	class:CS207::GLCamera
right_max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    explicit right_max(const Value2& v2) : v2(v2) {}$/;"	f	struct:mtl::tfunctor::right_max
right_max	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^struct right_max$/;"	s	namespace:mtl::tfunctor
right_min	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    explicit right_min(const Value2& v2) : v2(v2) {}$/;"	f	struct:mtl::tfunctor::right_min
right_min	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^struct right_min$/;"	s	namespace:mtl::tfunctor
right_minus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    explicit right_minus(const Value2& v2) : v2(v2) {}$/;"	f	struct:mtl::tfunctor::right_minus
right_minus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^struct right_minus$/;"	s	namespace:mtl::tfunctor
right_plus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    explicit right_plus(const Value2& v2) : v2(v2) {}$/;"	f	struct:mtl::tfunctor::right_plus
right_plus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^struct right_plus$/;"	s	namespace:mtl::tfunctor
right_scale_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/right_scale_inplace.hpp	/^void right_scale_inplace(Coll& c, const Factor& alpha, tag::scalar)$/;"	f	namespace:mtl
right_scale_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/right_scale_inplace.hpp	/^void right_scale_inplace(Collection& c, const Factor& alpha)$/;"	f	namespace:mtl
right_scale_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/right_scale_inplace.hpp	/^void right_scale_inplace(Collection& c, const Factor& alpha, tag::matrix)$/;"	f	namespace:mtl
right_scale_inplace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/right_scale_inplace.hpp	/^void right_scale_inplace(Matrix& m, tag::matrix, const Factor& alpha, tag::matrix)$/;"	f	namespace:mtl
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::conj_view<Matrix> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::divide_by_view<Matrix, Divisor> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::imag_view<Matrix> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::mat_mat_ele_times_expr<M1, M2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::mat_mat_minus_expr<M1, M2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::mat_mat_plus_expr<M1, M2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::mat_mat_times_expr<M1, M2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::mv_mv_minus_expr<M1, M2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::mv_mv_plus_expr<M1, M2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::negate_view<Matrix> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::real_view<Matrix> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::rscaled_view<Matrix, RScaling> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< mtl::mat::scaled_view<Scaling, Matrix> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::conj_view<Vector> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::divide_by_view<Vector, Divisor> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::negate_view<Vector> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::rscaled_view<Vector, RScaling> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::scaled_view<Scaling, Vector> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::unrolled1<BSize, Vector> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::vec_scal_asgn_expr<E1, E2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::vec_scal_div_asgn_expr<E1, E2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::vec_scal_times_asgn_expr<E1, E2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::vec_vec_asgn_expr<E1, E2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::vec_vec_minus_asgn_expr<E1, E2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root< vec::vec_vec_plus_asgn_expr<E1, E2> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root<T&>$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root<const T>$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root<const T[R][C]>$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root<mtl::mat::hilbert_matrix<Value> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root<mtl::mat::ones_matrix<Value> >$/;"	s	namespace:mtl::traits
root	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^struct root<mtl::mat::outer_product_matrix<Vector1, Vector2> >$/;"	s	namespace:mtl::traits
roots	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^    Vector roots()$/;"	f	class:mtl::vec::secular_f
rotate_x	CS207/GLCamera.hpp	/^  inline void rotate_x(float angle) {$/;"	f	class:CS207::GLCamera
rotate_y	CS207/GLCamera.hpp	/^  inline void rotate_y(float angle) {$/;"	f	class:CS207::GLCamera
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^	size_type  row;$/;"	m	struct:mtl::detail::trivial_inserter::bracket_proxy
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    struct row<banded_view<Matrix> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	size_type  row;$/;"	m	struct:mtl::mat::compressed2D_inserter::bracket_proxy
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^	size_type  row;$/;"	m	struct:mtl::mat::coordinate2D_inserter::bracket_proxy
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^	size_type row, col;$/;"	m	struct:mtl::mat::coordinate2D_inserter::update_proxy
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_t row(const dense2D<Value, Parameters>& ma, $/;"	f	class:mtl::mat::dense2D_indexer
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_t row(size_t offset, size_t ldim, col_major) const $/;"	f	class:mtl::mat::dense2D_indexer
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    size_t row(size_t offset, size_t ldim, row_major) const $/;"	f	class:mtl::mat::dense2D_indexer
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^struct row< mtl::mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    struct row<mtl::mat::map_view<Functor, Matrix> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct row< mtl::mat::conj_view<Matrix> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct row< mtl::mat::divide_by_view<Matrix, Divisor> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct row< mtl::mat::rscaled_view<Matrix, RScaling> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct row< mtl::mat::scaled_view<Scaling, Matrix> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^	size_type row;$/;"	m	struct:mtl::mat::mapped_inserter::bracket_proxy
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    size_type row() const$/;"	f	struct:mtl::mat::morton_dense_key
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^	size_type       row, col_offset;$/;"	m	struct:mtl::mat::shifted_inserter::bracket_proxy
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	size_type  row;$/;"	m	struct:mtl::mat::sparse_banded_inserter::bracket_proxy
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    struct row<mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	size_type   row;$/;"	m	struct:mtl::operations::bracket_proxy
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    SizeType   row, col;$/;"	m	struct:mtl::operations::update_proxy
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/glas_tag.hpp	/^struct row {};$/;"	s	namespace:glas::tag
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct row<mtl::mat::compressed2D<Elt, Parameters> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct row<mtl::mat::coordinate2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct row<mtl::mat::dense2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct row<mtl::mat::hilbert_matrix<Value> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct row<mtl::mat::implicit_dense<Functor> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct row<mtl::mat::indirect<Matrix> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct row<mtl::mat::morton_dense<Elt, BitMask, Parameters> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct row<mtl::mat::ones_matrix<Value> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct row<mtl::mat::outer_product_matrix<Vector1, Vector2> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct row<mtl::mat::sparse_banded<Value, Parameters> >$/;"	s	namespace:mtl::traits
row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^template <class Matrix> struct row {};$/;"	s	namespace:mtl::traits
row_a	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	typename mtl::traits::row<Matrix>::type          row_a;$/;"	m	struct:mtl::mat::detail::lower_trisolve_t
row_a	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	typename mtl::traits::row<Matrix>::type          row_a;$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
row_in_element_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    row_in_element_key(const matrix_type&) {} $/;"	f	struct:mtl::detail::row_in_element_key
row_in_element_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct row_in_element_key$/;"	s	namespace:mtl::detail
row_in_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    row_in_key(const matrix_type&) {} $/;"	f	struct:mtl::detail::row_in_key
row_in_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^template <class Matrix> struct row_in_key$/;"	s	namespace:mtl::detail
row_index_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    row_index_array_type const& row_index_array() const { return rows; }       \/\/\/< Array of rows  (const)$/;"	f	class:mtl::mat::coordinate2D
row_index_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    row_index_array_type& row_index_array() { return rows; }       \/\/\/< Array of rows   (mutable)$/;"	f	class:mtl::mat::coordinate2D
row_index_array_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef std::vector< size_type >                                    row_index_array_type ;$/;"	t	class:mtl::mat::coordinate2D
row_init	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void row_init(size_type, Cursor&, Cursor&, Value&, tag::unit_diagonal) const {}$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct row_major {};$/;"	s	namespace:mtl
row_major	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct row_major {};$/;"	s	namespace:mtl::tag
row_major_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct row_major_mask$/;"	s	namespace:mtl
row_major_shark_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct row_major_shark_mask$/;"	s	namespace:mtl
row_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^inline row_map(const Matrix& A)$/;"	f	class:mtl::mat::mtl::traits::row
row_mat_cvec_index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    row_mat_cvec_index_evaluator(VectorOut& w, const Matrix& A, const VectorIn& v) : w(w), A(A), v(v) {}$/;"	f	struct:mtl::vec::row_mat_cvec_index_evaluator
row_mat_cvec_index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^struct row_mat_cvec_index_evaluator$/;"	s	namespace:mtl::vec
row_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    size_type    row_offset, col_offset;$/;"	m	class:mtl::mat::shifted_inserter
row_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	irange      row_range;$/;"	m	struct:mtl::operations::range_bracket_proxy
row_set	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	iset        row_set;$/;"	m	struct:mtl::operations::set_bracket_proxy
row_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type row_split() const$/;"	f	struct:mtl::recursion::half_splitter
row_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type row_split() const$/;"	f	struct:mtl::recursion::max_dim_splitter
row_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type row_split() const$/;"	f	struct:mtl::recursion::outer_bound_splitter
row_split	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    size_type row_split() const$/;"	f	struct:mtl::recursion::separate_dim_splitter
row_traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	typedef RowInMatrix<typename boost::remove_reference<Ref>::type> row_traits;$/;"	t	struct:mtl::operations::bracket_proxy
row_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	template <typename Value> void row_update(Value& res, Value& rr, const Value&    , tag::unit_diagonal)    const { res= rr; }$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
row_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	template <typename Value> void row_update(Value& res, Value& rr, const Value& dia, tag::inverse_diagonal) const { res= rr * dia; }$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
row_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	template <typename Value> void row_update(Value& res, Value& rr, const Value& dia, tag::regular_diagonal) const { res= rr \/ dia; }$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
row_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct row_vector : virtual vector {};$/;"	s	namespace:mtl::tag
rows	Examples/expr_template.cpp	/^  unsigned rows() const {$/;"	f	struct:MatAdd
rows	Examples/expr_template.cpp	/^  unsigned rows() const {$/;"	f	struct:MatExpr
rows	Examples/expr_template.cpp	/^  unsigned rows() const {$/;"	f	struct:MatMult
rows	Examples/expr_template.cpp	/^  unsigned rows() const {$/;"	f	struct:MatScale
rows	Examples/expr_template.cpp	/^  unsigned rows() const {$/;"	f	struct:Matrix
rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    row_index_array_type      rows;$/;"	m	class:mtl::mat::coordinate2D
rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_array.hpp	/^    const Rows&  rows;$/;"	m	struct:mtl::mat::element_array_t
rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_matrix.hpp	/^    const Rows&    rows;$/;"	m	struct:mtl::mat::element_matrix_t
rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    iset          rows, cols;$/;"	m	struct:mtl::mat::indirect
rows_	Examples/expr_template.cpp	/^  unsigned rows_, cols_;$/;"	m	struct:Matrix	file:
rows_of	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^inline rows_of(const T& x)$/;"	f	class:mtl::mtl::traits
rr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void col_init(size_type MTL_DEBUG_ARG(r), Cursor& MTL_DEBUG_ARG(aic), Cursor& aiend, Value& rr, Value& res, tag::inverse_diagonal) const$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
rr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	void col_init(size_type MTL_DEBUG_ARG(r), Cursor& MTL_DEBUG_ARG(aic), Cursor& aiend, Value& rr, Value& res, tag::regular_diagonal) const$/;"	m	struct:mtl::mat::detail::upper_trisolve_t
rscale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^	explicit rscale(const Value2& v2) : v2(v2) {}$/;"	f	struct:mtl::tfunctor::rscale
rscale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^    inline rscale(const Value1& value1, const Value2& value2)$/;"	f	class:mtl::mat::tfunctor::rscale
rscale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^    inline rscale(const Value1& value1, const Value2& value2)$/;"	f	class:mtl::vec::tfunctor::rscale
rscale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^    struct rscale$/;"	s	namespace:mtl::tfunctor
rscale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^    struct rscale<Matrix, Value2, tag::matrix>$/;"	s	namespace:mtl::tfunctor
rscale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^    struct rscale<Vector, Value2, tag::vector>$/;"	s	namespace:mtl::tfunctor
rscaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    rscaled_view (const self& that) : base(that) {}$/;"	f	struct:mtl::mat::rscaled_view
rscaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    rscaled_view (self&& that) : base(that) {}$/;"	f	struct:mtl::mat::rscaled_view
rscaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    rscaled_view(boost::shared_ptr<Matrix> p, const RScaling& rscaling)$/;"	f	struct:mtl::mat::rscaled_view
rscaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    rscaled_view(const Matrix& matrix, const RScaling& rscaling)$/;"	f	struct:mtl::mat::rscaled_view
rscaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct rscaled_view$/;"	s	namespace:mtl::mat
rscaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit rscaled_view(boost::shared_ptr<Vector> p, const RScaling& rscaling)$/;"	f	struct:mtl::vec::rscaled_view
rscaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit rscaled_view(const Vector& vector, const RScaling& rscaling)$/;"	f	struct:mtl::vec::rscaled_view
rscaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    rscaled_view (const self& that) : base(that) {}$/;"	f	struct:mtl::vec::rscaled_view
rscaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    rscaled_view (self&& that) : base(that) {}$/;"	f	struct:mtl::vec::rscaled_view
rscaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^struct rscaled_view$/;"	s	namespace:mtl::vec
rtol_	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    Real         rtol_, atol_, resid_;$/;"	m	class:itl::basic_iteration
runtime_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit runtime_error(const char *s= "Run-time error") : std::runtime_error(s) {}$/;"	f	struct:mtl::runtime_error
runtime_error	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct runtime_error : public std::runtime_error$/;"	s	namespace:mtl
rvec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^template <typename Value> struct rvec : nonscal {};$/;"	s	namespace:mtl::ashape
rvec_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct rvec_cvec_mult {}; \/\/ inner product (without conj)$/;"	s	namespace:mtl::ashape
rvec_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^inline void rvec_mat_mult(const VectorIn& v, const HermitianMatrix& A, VectorOut& w, Assign, tag::flat<tag::hermitian_multi_vector>)$/;"	f	namespace:mtl::vec
rvec_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^inline void rvec_mat_mult(const VectorIn& v, const Matrix& A, VectorOut& w, Assign, tag::flat<tag::dense>)$/;"	f	namespace:mtl::vec
rvec_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^inline void rvec_mat_mult(const VectorIn& v, const Matrix& A, VectorOut& w, Assign, tag::flat<tag::multi_vector>)$/;"	f	namespace:mtl::vec
rvec_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^inline void rvec_mat_mult(const VectorIn& v, const Matrix& A, VectorOut& w, Assign, tag::flat<tag::sparse>)$/;"	f	namespace:mtl::vec
rvec_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^inline void rvec_mat_mult(const VectorIn& v, const TransposedMatrix& A, VectorOut& w, Assign, tag::flat<tag::transposed_multi_vector>)$/;"	f	namespace:mtl::vec
rvec_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct rvec_mat_mult {};$/;"	s	namespace:mtl::ashape
rvec_mat_noop	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^    struct rvec_mat_noop$/;"	s	namespace:mtl::vec::impl
rvec_mat_times_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/rvec_mat_times_expr.hpp	/^    rvec_mat_times_expr( E1 const& v, E2 const& A ) : base(v, A) {}$/;"	f	struct:mtl::vec::rvec_mat_times_expr
rvec_mat_times_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/rvec_mat_times_expr.hpp	/^struct rvec_mat_times_expr $/;"	s	namespace:mtl::vec
rvec_scal_div	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct rvec_scal_div {};$/;"	s	namespace:mtl::ashape
rvec_scal_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct rvec_scal_mult {};$/;"	s	namespace:mtl::ashape
rvec_smat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^inline void rvec_smat_mult(const VectorIn& v, const Matrix& A, VectorOut& w, Assign, tag::col_major)$/;"	f	namespace:mtl::vec
rvec_smat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^inline void rvec_smat_mult(const VectorIn& v, const Matrix& A, VectorOut& w, Assign, tag::row_major)$/;"	f	namespace:mtl::vec
s	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^    size_t                s;$/;"	m	class:itl::idr_s_solver
s	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/repeating_solver.hpp	/^    solver_type   s;$/;"	m	class:itl::repeating_solver
s	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    const Solver&                            s;$/;"	m	struct:itl::pc::ic_0_evaluator
s	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^    int m, n, s;$/;"	m	struct:mtl::mat::poisson2D_dirichlet
s	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    value_type c, s;$/;"	m	class:mtl::mat::givens
s	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    value_type c, s, eps;$/;"	m	class:mtl::mat::qr_givens_solver
s	mtl_test.cpp	/^	int s;$/;"	m	struct:IdentityMatrix	file:
s_greater	Examples/func_params.cpp	/^struct s_greater {$/;"	s	file:
safe_lock	CS207/SDLViewer.hpp	/^    safe_lock(SDLViewer* v)$/;"	f	struct:CS207::SDLViewer::safe_lock
safe_lock	CS207/SDLViewer.hpp	/^  struct safe_lock {$/;"	s	class:CS207::SDLViewer
same_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct same_mask$/;"	s	namespace:mtl
same_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct same_mask<Mask, Mask>$/;"	s	namespace:mtl
scal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct scal : universe {};$/;"	s	namespace:mtl::ashape
scal_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct scal_cvec_mult {};$/;"	s	namespace:mtl::ashape
scal_mat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct scal_mat_mult {};$/;"	s	namespace:mtl::ashape
scal_rvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct scal_rvec_mult {};$/;"	s	namespace:mtl::ashape
scal_scal_div	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct scal_scal_div {};$/;"	s	namespace:mtl::ashape
scal_scal_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct scal_scal_mult {};$/;"	s	namespace:mtl::ashape
scalar	Graph.hpp	/^  typedef float scalar;$/;"	t	class:Graph
scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^    namespace scalar {$/;"	n	namespace:mtl
scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct scalar : virtual universe {};$/;"	s	namespace:mtl::tag
scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^    Scalar&        scalar;$/;"	m	struct:mtl::vec::dot_index_evaluator
scalar	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^    Scalar&        scalar;$/;"	m	struct:mtl::vec::reduction_index_evaluator
scalar	mass_spring.cpp	/^typedef Point::value_type scalar;$/;"	t	file:
scalar_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^	scalar_assign(Source src, Matrix& matrix) $/;"	f	struct:mtl::mat::crtp_matrix_assign::scalar_assign
scalar_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^    struct scalar_assign $/;"	s	struct:mtl::mat::crtp_matrix_assign
scale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    explicit scale(const Value1& v1) : v1(type1(v1)) {}$/;"	f	struct:mtl::tfunctor::scale
scale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    explicit scale(const Value1& v1) : v1(v1) {}$/;"	f	struct:mtl::tfunctor::scale
scale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	inline scale(const Value1& value1, const Matrix& matrix)$/;"	f	class:mtl::mat::traits::enable_if_matrix
scale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	inline scale(const Value1& value1, const Vector& vector)$/;"	f	class:mtl::vec::traits::enable_if_vector
scale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	struct scale$/;"	s	namespace:mtl::tfunctor
scale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	struct scale<Value1, Matrix, tag::matrix>$/;"	s	namespace:mtl::tfunctor
scale	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	struct scale<Value1, Vector, tag::vector>$/;"	s	namespace:mtl::tfunctor
scaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    scaled_view (const self& that) : base(that) {}$/;"	f	struct:mtl::mat::scaled_view
scaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    scaled_view (self&& that) : base(that) {}$/;"	f	struct:mtl::mat::scaled_view
scaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    scaled_view(const Scaling& scaling, boost::shared_ptr<Matrix> p)$/;"	f	struct:mtl::mat::scaled_view
scaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    scaled_view(const Scaling& scaling, const Matrix& matrix)$/;"	f	struct:mtl::mat::scaled_view
scaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct scaled_view$/;"	s	namespace:mtl::mat
scaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit scaled_view(const Scaling& scaling, boost::shared_ptr<Vector> p)$/;"	f	struct:mtl::vec::scaled_view
scaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    explicit scaled_view(const Scaling& scaling, const Vector& vector)$/;"	f	struct:mtl::vec::scaled_view
scaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    scaled_view (const self& that) : base(that) {}$/;"	f	struct:mtl::vec::scaled_view
scaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    scaled_view (self&& that) : base(that) {}$/;"	f	struct:mtl::vec::scaled_view
scaled_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^struct scaled_view$/;"	s	namespace:mtl::vec
schur_update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void schur_update(Recursator E, Recursator W, Recursator N, Visitor vis)$/;"	f	namespace:mtl::mat::with_recursator
schur_update_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void schur_update_base(MatrixNE & NE, const MatrixNW & NW, const MatrixSW & SW) const$/;"	f	struct:mtl::mat::recursive_cholesky_visitor_t
schur_update_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void schur_update_base(MatrixNE & NE, const MatrixNW & NW, const MatrixSW & SW)$/;"	f	namespace:mtl::mat::with_bracket
schur_update_base_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    struct schur_update_base_t$/;"	s	namespace:mtl::mat::with_bracket
search_space_exhaustion	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/utility/exception.hpp	/^    explicit search_space_exhaustion(const char *s= "Iterative solvers that exhausted the search space, i.e. search direction(s) parallel to already visited Krylov subspace")$/;"	f	struct:itl::search_space_exhaustion
search_space_exhaustion	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/utility/exception.hpp	/^struct search_space_exhaustion$/;"	s	namespace:itl
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    second_argument_type const& second ;$/;"	m	struct:mtl::mat::mat_mat_ele_times_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    second_argument_type const& second ;$/;"	m	struct:mtl::mat::mat_mat_minus_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    second_argument_type const& second ;$/;"	m	struct:mtl::mat::mat_mat_op_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    second_argument_type const& second ;$/;"	m	struct:mtl::mat::mat_mat_plus_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    second_argument_type const& second ;$/;"	m	struct:mtl::mat::mat_mat_times_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/bin_op_expr.hpp	/^    second_argument_type const& second ;$/;"	m	struct:mtl::bin_op_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    typename compute_one_factor<Result, E2>::const_reference second;$/;"	m	struct:mtl::operation::compute_factors
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^    const CVector& second;$/;"	m	struct:mtl::operation::compute_summand
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    U& second;$/;"	m	struct:mtl::fused_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	/^    typename traits::index_evaluator<U>::type second;$/;"	m	struct:mtl::vec::fused_index_evaluator
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lazy_assign.hpp	/^    const U& second;$/;"	m	struct:mtl::lazy_assign
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^     second_argument_type const& second ;$/;"	m	class:mtl::vec::vec_vec_asgn_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    second_argument_type const&  second ;$/;"	m	struct:mtl::vec::vec_scal_aop_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^     second_argument_type const&         second ;$/;"	m	struct:mtl::vec::vec_vec_aop_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    second_argument_type const& second ;$/;"	m	struct:mtl::vec::vec_vec_op_expr
second	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    operation::compute_summand<E2> second;$/;"	m	struct:mtl::vec::vec_vec_pmop_expr
second_argument	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    second_argument_type const& second_argument() const { return second; }$/;"	f	struct:mtl::vec::vec_vec_aop_expr
second_argument	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    operation::compute_summand<E2> const& second_argument() const { return second; }$/;"	f	class:mtl::vec::vec_vec_pmop_expr::operation
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    typedef E2                                   second_argument_type ;$/;"	t	struct:mtl::mat::mat_mat_ele_times_expr
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    typedef E2                                   second_argument_type ;$/;"	t	struct:mtl::mat::mat_mat_minus_expr
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    typedef E2                                   second_argument_type ;$/;"	t	struct:mtl::mat::mat_mat_op_expr
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    typedef E2                                   second_argument_type ;$/;"	t	struct:mtl::mat::mat_mat_plus_expr
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef E2                                   second_argument_type ;$/;"	t	struct:mtl::mat::mat_mat_times_expr
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/bin_op_expr.hpp	/^    typedef E2                                   second_argument_type ;$/;"	t	struct:mtl::bin_op_expr
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value2&                                 second_argument_type;$/;"	t	struct:mtl::sfunctor::assign
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value2&                                 second_argument_type;$/;"	t	struct:mtl::sfunctor::divide
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value2&                                 second_argument_type;$/;"	t	struct:mtl::sfunctor::divide_assign
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value2&                                 second_argument_type;$/;"	t	struct:mtl::sfunctor::minus
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value2&                                 second_argument_type;$/;"	t	struct:mtl::sfunctor::minus_assign
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value2&                                 second_argument_type;$/;"	t	struct:mtl::sfunctor::plus
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value2&                                 second_argument_type;$/;"	t	struct:mtl::sfunctor::plus_assign
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value2&                                 second_argument_type;$/;"	t	struct:mtl::sfunctor::times
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef const Value2&                                 second_argument_type;$/;"	t	struct:mtl::sfunctor::times_assign
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticBinaryFunctor<F>::second_argument_type second_argument_type;$/;"	t	struct:mtl::sfunctor::compose_first
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticBinaryFunctor<G>::second_argument_type second_argument_type;$/;"	t	struct:mtl::sfunctor::compose_binary
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticUnaryFunctor<G>::argument_type         second_argument_type;$/;"	t	struct:mtl::sfunctor::compose_second
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^    typedef typename StaticUnaryFunctor<H>::argument_type         second_argument_type;$/;"	t	struct:mtl::sfunctor::compose_both
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^    typedef E2 second_argument_type ;$/;"	t	class:mtl::vec::vec_vec_asgn_expr
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    typedef E2 second_argument_type ;$/;"	t	struct:mtl::vec::vec_scal_aop_expr
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    typedef E2 second_argument_type ;$/;"	t	struct:mtl::vec::vec_vec_aop_expr
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    typedef E2                                   second_argument_type ;$/;"	t	struct:mtl::vec::vec_vec_op_expr
second_argument_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    typedef typename mtl::operation::compute_summand<E2>::type    second_argument_type;$/;"	t	struct:mtl::vec::vec_vec_pmop_expr
second_factor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    compute_one_factor<Result, E2>                           second_factor;$/;"	m	struct:mtl::operation::compute_factors
second_factor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    compute_one_factor<Result, E2> second_factor;$/;"	m	struct:mtl::operation::compute_factors
second_part	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/utility.hpp	/^std::size_t inline second_part(std::size_t n)$/;"	f	class:mtl::recursion::std
second_value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef typename Collection<E2>::value_type  second_value_type;$/;"	t	struct:mtl::mat::mat_mat_times_expr
seconds	CS207/Util.hpp	/^  double seconds() const {$/;"	f	class:CS207::Clock
secular	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^inline Vector secular(const Vector& z, const Vector& d, Value sigma)$/;"	f	namespace:mtl::vec
secular_f	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^    secular_f(const Vector& z, const Vector& d, value_type sigma) $/;"	f	class:mtl::vec::secular_f
secular_f	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^class secular_f$/;"	c	namespace:mtl::vec
seed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^    seed() { srand(17 * ++counter); }$/;"	f	struct:mtl::seed
seed	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^struct seed $/;"	s	namespace:mtl
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    typedef basic_iteration self;$/;"	t	class:itl::basic_iteration
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      typedef cyclic_iteration self;$/;"	t	class:itl::cyclic_iteration
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^    typedef diagonal                                      self;$/;"	t	class:itl::pc::diagonal
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef ic_0                                                     self;$/;"	t	class:itl::pc::ic_0
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^    typedef identity                                      self;$/;"	t	class:itl::pc::identity
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef ilu                                           self;$/;"	t	class:itl::pc::ilu
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/sqrt.hpp	/^	typedef sqrt_impl   self;$/;"	t	struct:meta_math::impl::sqrt_impl
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    typedef base_cursor  self;$/;"	t	class:mtl::detail::base_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^	typedef alignment_helper self;$/;"	t	struct:mtl::detail::alignment_helper
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    typedef contiguous_memory_block           self;$/;"	t	struct:mtl::detail::contiguous_memory_block
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    typedef size_helper self;$/;"	t	struct:mtl::detail::size_helper
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    typedef dilated_int<T, BitMask, Normalized>     self;$/;"	t	struct:mtl::dilated::dilated_int
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    typedef masked_dilation_tables     self;$/;"	t	struct:mtl::dilated::masked_dilation_tables
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef matrix_element_cursor                            self;$/;"	t	struct:mtl::traits::detail::matrix_element_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef matrix_element_key                               self;$/;"	t	struct:mtl::traits::detail::matrix_element_key
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef sub_matrix_cursor                self;$/;"	t	struct:mtl::traits::detail::sub_matrix_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    typedef strided_base_cursor  self;$/;"	t	struct:mtl::detail::strided_base_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    typedef trivial_inserter                            self;$/;"	t	struct:mtl::detail::trivial_inserter
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    typedef matrix_market_istream        self;$/;"	t	class:mtl::io::matrix_market_istream
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    typedef matrix_market_ostream        self;$/;"	t	class:mtl::io::matrix_market_ostream
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef banded_view                                self;$/;"	t	struct:mtl::mat::banded_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    typedef base_matrix                       self;$/;"	t	struct:mtl::mat::base_matrix
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    typedef base_sub_matrix                   self;$/;"	t	struct:mtl::mat::base_sub_matrix
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    typedef block_diagonal2D<Matrix>  self;$/;"	t	class:mtl::mat::block_diagonal2D
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef compressed2D                             self;$/;"	t	class:mtl::mat::compressed2D
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef compressed2D_inserter             self;$/;"	t	struct:mtl::mat::compressed2D_inserter
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef compressed_el_cursor          self;$/;"	t	struct:mtl::mat::compressed_el_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef compressed_key                            self;$/;"	t	struct:mtl::mat::compressed_key
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef compressed_minor_cursor       self;$/;"	t	struct:mtl::mat::compressed_minor_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef coordinate2D                                                self;$/;"	t	class:mtl::mat::coordinate2D
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef coordinate2D_inserter                       self;$/;"	t	struct:mtl::mat::coordinate2D_inserter
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef coordinate_major_cursor<Value, Parameters>   self;$/;"	t	struct:mtl::mat::coordinate_major_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef coordinate_minor_cursor<Value, Parameters>   self;$/;"	t	struct:mtl::mat::coordinate_minor_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef dense2D                                           self;$/;"	t	class:mtl::mat::dense2D
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    typedef this_type                    self;$/;"	t	class:mtl::mat::element_structure
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef ell_matrix                                 self;$/;"	t	class:mtl::mat::ell_matrix
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    typedef hermitian_view                                         self;$/;"	t	struct:mtl::mat::hermitian_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef hilbert_functor    self;$/;"	t	class:mtl::mat::hilbert_functor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef implicit_dense                             self;$/;"	t	class:mtl::mat::implicit_dense
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef ones_functor    self;$/;"	t	class:mtl::mat::ones_functor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef outer_product_functor    self;$/;"	t	class:mtl::mat::outer_product_functor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef outer_product_matrix self;$/;"	t	class:mtl::mat::outer_product_matrix
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    typedef indirect                                self;$/;"	t	struct:mtl::mat::indirect
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef conj_view                                                   self;$/;"	t	struct:mtl::mat::conj_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef divide_by_view                                             self;$/;"	t	struct:mtl::mat::divide_by_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef imag_view                                                   self;$/;"	t	struct:mtl::mat::imag_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef map_view                                   self;$/;"	t	struct:mtl::mat::map_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef negate_view                                                   self;$/;"	t	struct:mtl::mat::negate_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef real_view                                                   self;$/;"	t	struct:mtl::mat::real_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef rscaled_view                                            self;$/;"	t	struct:mtl::mat::rscaled_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef scaled_view                                            self;$/;"	t	struct:mtl::mat::scaled_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^    typedef mapped_inserter                                self;$/;"	t	class:mtl::mat::mapped_inserter
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^    typedef mat_mat_ele_times_expr               self;$/;"	t	struct:mtl::mat::mat_mat_ele_times_expr
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    typedef mat_mat_op_expr                               self;$/;"	t	struct:mtl::mat::mat_mat_op_expr
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^    typedef mat_mat_times_expr                   self;$/;"	t	struct:mtl::mat::mat_mat_times_expr
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense                                               self;$/;"	t	class:mtl::mat::morton_dense
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_col_cursor                   self;$/;"	t	struct:mtl::mat::morton_dense_col_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_el_cursor                    self;$/;"	t	struct:mtl::mat::morton_dense_el_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_key                          self;$/;"	t	struct:mtl::mat::morton_dense_key
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef morton_dense_row_cursor                   self;$/;"	t	struct:mtl::mat::morton_dense_row_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    typedef multi_vector                             self;$/;"	t	class:mtl::mat::multi_vector
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    typedef multi_vector_range                       self;$/;"	t	class:mtl::mat::multi_vector_range
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    typedef shifted_inserter                                self;$/;"	t	class:mtl::mat::shifted_inserter
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef sparse_banded<Value, Parameters>           self;$/;"	t	class:mtl::mat::sparse_banded
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef sparse_banded_cursor                          self;$/;"	t	struct:mtl::mat::sparse_banded_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef sparse_banded_inserter                                           self;$/;"	t	struct:mtl::mat::sparse_banded_inserter
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef sparse_banded_key                             self;$/;"	t	struct:mtl::mat::sparse_banded_key
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef transposed_view               self;$/;"	t	struct:mtl::mat::transposed_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/bin_op_expr.hpp	/^    typedef bin_op_expr                          self;$/;"	t	struct:mtl::bin_op_expr
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_cvec_times_expr.hpp	/^    typedef mat_cvec_times_expr<E1, E2>   self;$/;"	t	struct:mtl::mat_cvec_times_expr
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    typedef update_proxy          self;$/;"	t	struct:mtl::operations::update_proxy
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    typedef recursator                                     self;$/;"	t	struct:mtl::mat::recursator
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^    typedef dense_el_cursor               self;$/;"	t	struct:mtl::dense_el_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^    typedef iterator_proxy                    self;$/;"	t	struct:mtl::utilities::detail::iterator_proxy
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^    typedef maybe<Value>           self;$/;"	t	struct:mtl::utilities::maybe
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/push_back_comma_inserter.hpp	/^	typedef push_back_comma_inserter self;$/;"	t	class:mtl::push_back_comma_inserter
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^	typedef static_vector<ValueType, FirstValue, Values...>  self;$/;"	t	struct:mtl::static_vector
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^	typedef static_vector<ValueType, FirstValue>             self;$/;"	t	struct:mtl::static_vector
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	/^    typedef strided_dense_el_cursor                      self;$/;"	t	struct:mtl::strided_dense_el_cursor
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    typedef strided_dense_el_const_iterator           self;$/;"	t	struct:mtl::strided_dense_el_const_iterator
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    typedef strided_dense_el_iterator                 self;$/;"	t	struct:mtl::strided_dense_el_iterator
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    typedef zip_ref       self;$/;"	t	struct:mtl::utility::zip_ref
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef dense_vector<Value, Parameters>                                          self;$/;"	t	class:mtl::vec::dense_vector
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    typedef indexbuffer self;$/;"	t	struct:mtl::vec::indexbuffer
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    typedef inserter                                 self;$/;"	t	struct:mtl::vec::inserter
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    typedef update_proxy          self;$/;"	t	struct:mtl::vec::update_proxy
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef conj_view                                                   self;$/;"	t	struct:mtl::vec::conj_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef divide_by_view                                             self;$/;"	t	struct:mtl::vec::divide_by_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef imag_view                                              self;$/;"	t	struct:mtl::vec::imag_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef map_view                                   self;$/;"	t	struct:mtl::vec::map_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef negate_view                                                   self;$/;"	t	struct:mtl::vec::negate_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef rscaled_view                                            self;$/;"	t	struct:mtl::vec::rscaled_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef scaled_view                                            self;$/;"	t	struct:mtl::vec::scaled_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^  typedef real_view                                              self;$/;"	t	struct:mtl::vec::real_view
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^    typedef mapped_inserter                                self;$/;"	t	class:mtl::vec::mapped_inserter
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/rvec_mat_times_expr.hpp	/^    typedef rvec_mat_times_expr<E1, E2>   self;$/;"	t	struct:mtl::vec::rvec_mat_times_expr
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    typedef sparse_vector                   self;$/;"	t	class:mtl::vec::sparse_vector
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef strided_vector_ref                                                       self;$/;"	t	class:mtl::vec::strided_vector_ref
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    typedef unrolled1                               self;$/;"	t	class:mtl::vec::unrolled1
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^    typedef vec_const_ref_expr                   self;$/;"	t	struct:mtl::vec::vec_const_ref_expr
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    typedef vec_scal_aop_expr                                self;$/;"	t	struct:mtl::vec::vec_scal_aop_expr
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    typedef vec_vec_aop_expr<E1, E2, SFunctor>   self;$/;"	t	struct:mtl::vec::vec_vec_aop_expr
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    typedef vec_vec_op_expr                     self;$/;"	t	struct:mtl::vec::vec_vec_op_expr
self	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    typedef vec_vec_pmop_expr<E1, E2, SFunctor>                   self;$/;"	t	struct:mtl::vec::vec_vec_pmop_expr
self	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/INITLIST_CHECK.cpp	/^    typedef my_vector<V> self;$/;"	t	struct:my_vector	file:
self	poisson.cpp	/^		typedef visual_iteration self;$/;"	t	class:itl::visual_iteration	file:
self_adjoint	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct self_adjoint {};$/;"	s	namespace:mtl
self_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    self& self_assign(const self& src, boost::mpl::true_)$/;"	f	class:mtl::mat::dense2D
self_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    self& self_assign(self& src, boost::mpl::false_)$/;"	f	class:mtl::mat::dense2D
self_assignment	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    void self_assignment(const self& src, boost::mpl::false_)$/;"	f	class:mtl::mat::multi_vector
self_assignment	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    void self_assignment(const self& src, boost::mpl::true_)$/;"	f	class:mtl::mat::multi_vector
self_type	subgraph.cpp	/^  typedef filter_iterator<Pred,It> self_type;$/;"	t	class:filter_iterator	file:
separate_dim_splitter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    explicit separate_dim_splitter(Matrix const& matrix) $/;"	f	struct:mtl::recursion::separate_dim_splitter
separate_dim_splitter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^struct separate_dim_splitter$/;"	s	namespace:mtl::recursion
set	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    void set(Real v) { norm_r0 = v; }$/;"	f	class:itl::basic_iteration
set	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^	irange& set(size_type finish) $/;"	f	class:mtl::irange
set	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^	irange& set(size_type start, size_type finish) $/;"	f	class:mtl::irange
setMaxIteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    void setMaxIteration(size_type in) {$/;"	f	class:mtl::mat::eigenvalue_solver
setTolerance	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    void setTolerance(value_type in) {$/;"	f	class:mtl::mat::eigenvalue_solver
setTolerance	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    void setTolerance(value_type tol) {$/;"	f	class:mtl::mat::qr_givens_solver
set_	Examples/proxy_example.cpp	/^    SimpleSet* set_;$/;"	m	class:SimpleSet::SimpleElement	file:
set_bound	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    void set_bound(size_type b)$/;"	f	struct:mtl::mat::recursator
set_bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	set_bracket_proxy(Ref matrix, const iset& row_set) : matrix(matrix), row_set(row_set) {}$/;"	f	struct:mtl::operations::set_bracket_proxy
set_bracket_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^    struct set_bracket_proxy$/;"	s	namespace:mtl::operations
set_col_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    void set_col_offset(size_type co) { col_offset= co; } \/\/\/< Change column offset$/;"	f	class:mtl::mat::shifted_inserter
set_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void set_empty(T& x, const U& y)$/;"	f	struct:mtl::assign::assign_sum
set_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void set_empty(T& x, const U& y)$/;"	f	struct:mtl::assign::divide_sum
set_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void set_empty(T& x, const U& y)$/;"	f	struct:mtl::assign::minus_sum
set_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void set_empty(T& x, const U& y)$/;"	f	struct:mtl::assign::plus_sum
set_empty	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void set_empty(T& x, const U&)$/;"	f	struct:mtl::assign::times_sum
set_label	CS207/SDLViewer.hpp	/^  void set_label(const std::string& str) {$/;"	f	class:CS207::SDLViewer
set_label	CS207/SDLViewer.hpp	/^  void set_label(double d) {$/;"	f	class:CS207::SDLViewer
set_ldim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void set_ldim() { set_ldim(orientation()); }$/;"	f	class:mtl::mat::dense2D
set_ldim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void set_ldim(col_major) { ldim= this->num_rows(); }$/;"	f	class:mtl::mat::dense2D
set_ldim	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void set_ldim(row_major) { ldim= this->num_cols(); }$/;"	f	class:mtl::mat::dense2D
set_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    void set_mask() $/;"	f	struct:mtl::dilated::masked_dilation_tables
set_matrix_dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct set_matrix_dimensions$/;"	s	namespace:mtl::type_para
set_matrix_dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct set_matrix_dimensions<dim<Rows, Cols> >$/;"	s	namespace:mtl::type_para
set_matrix_dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct set_matrix_dimensions<dim<Values...> >$/;"	s	namespace:mtl::type_para
set_matrix_dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	struct set_matrix_dimensions<none>$/;"	s	namespace:mtl::type_para
set_max_iterations	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    void set_max_iterations(int m) { max_iter= m; }$/;"	f	class:itl::basic_iteration
set_multi_print	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      void set_multi_print(bool m) { multi_print= m; }$/;"	f	class:itl::cyclic_iteration
set_nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void set_nnz(size_type n)$/;"	f	class:mtl::mat::compressed2D
set_nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void set_nnz() { this->my_nnz = this->num_rows() * this->num_cols(); }$/;"	f	class:mtl::mat::dense2D
set_nnz	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    void set_nnz()$/;"	f	class:mtl::mat::morton_dense
set_ortho	CS207/GLCamera.hpp	/^  void set_ortho(double left, double right, double bottom, double top,$/;"	f	class:CS207::GLCamera
set_para	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	struct set_para$/;"	s	namespace:mtl::type_para
set_parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	struct set_parameters$/;"	s	namespace:mtl::type_para
set_parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	struct set_parameters<TypePara, FirstValue, Values...>$/;"	s	namespace:mtl::type_para
set_parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^    struct set_parameters$/;"	s	namespace:mtl
set_perspective	CS207/GLCamera.hpp	/^  void set_perspective(double fovy, double aspect,$/;"	f	class:CS207::GLCamera
set_quite	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    void set_quite(bool q) { my_quite= q; }$/;"	f	class:itl::basic_iteration
set_ranges	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    void set_ranges(size_type br, size_type er, size_type bc, size_type ec)$/;"	f	struct:mtl::mat::base_sub_matrix
set_ranges	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void set_ranges(size_type begin_r, size_type end_r, size_type begin_c, size_type end_c)$/;"	f	class:mtl::mat::dense2D
set_ranges	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void set_ranges(size_type num_rows, size_type num_cols)$/;"	f	class:mtl::mat::dense2D
set_ranges	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    void set_ranges(size_type begin_r, size_type end_r, size_type begin_c, size_type end_c)$/;"	f	class:mtl::mat::morton_dense
set_ranges	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    void set_ranges(size_type num_rows, size_type num_cols)$/;"	f	class:mtl::mat::morton_dense
set_rotation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    void set_rotation(value_type a, value_type b)$/;"	f	class:mtl::mat::givens
set_rotation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    void set_rotation(value_type a, value_type b)$/;"	f	class:mtl::mat::qr_givens_solver
set_row_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    void set_row_offset(size_type ro) { row_offset= ro; } \/\/\/< Change row offset$/;"	f	class:mtl::mat::shifted_inserter
set_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void set_size(std::size_t size)$/;"	f	struct:mtl::detail::size_helper
set_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void set_size(std::size_t) {}$/;"	f	struct:mtl::detail::size_helper
set_sparsity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void set_sparsity(std::string& sparsity_text)$/;"	f	class:mtl::io::matrix_market_istream
set_stride	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    void set_stride()$/;"	f	class:mtl::mat::ell_matrix
set_symmetry	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void set_symmetry(std::string& symmetry_text)$/;"	f	class:mtl::io::matrix_market_istream
set_text	Examples/proxy_example.cpp	/^    void set_text(const std::string& text) {$/;"	f	class:SimpleSet::SimpleElement
set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	void set_to_zero(Coll& collection, tag::contiguous_dense, ashape::nonscal)$/;"	f	namespace:mtl::impl
set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	void set_to_zero(Coll& collection, tag::contiguous_dense, ashape::scal)$/;"	f	namespace:mtl::impl
set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	void set_to_zero(Coll& collection, tag::multi_vector, ashape::universe)$/;"	f	namespace:mtl::impl
set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	void set_to_zero(Coll& collection, tag::sparse, ashape::universe)$/;"	f	namespace:mtl::impl
set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	void set_to_zero(Coll& collection, tag::std_vector, ashape::scal)$/;"	f	namespace:mtl::impl
set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	void set_to_zero(Coll& collection, tag::vector_ref, ashape::scal)$/;"	f	namespace:mtl::impl
set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^	void set_to_zero(Matrix& matrix, tag::morton_dense, ashape::scal)$/;"	f	namespace:mtl::impl
set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^    set_to_zero(Coll& collection)$/;"	f	namespace:mtl::mat
set_to_zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^    set_to_zero(Coll& collection)$/;"	f	namespace:mtl::vec
set_vector_dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	struct set_vector_dimensions$/;"	s	namespace:mtl::type_para
set_vector_dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	struct set_vector_dimensions<dim<Size> >$/;"	s	namespace:mtl::type_para
set_vector_dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	struct set_vector_dimensions<dim<Values...> >$/;"	s	namespace:mtl::type_para
set_vector_dimensions	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	struct set_vector_dimensions<none>$/;"	s	namespace:mtl::type_para
set_view	CS207/GLCamera.hpp	/^  inline void set_view() const {$/;"	f	class:CS207::GLCamera
set_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    void set_view() { category= view; }$/;"	f	struct:mtl::detail::contiguous_memory_block
setup_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    void setup_data(size_type num_rows, size_type num_cols, boost::mpl::false_)$/;"	f	class:mtl::mat::multi_vector
setup_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    void setup_data(size_type num_rows, size_type num_cols, boost::mpl::true_)$/;"	f	class:mtl::mat::multi_vector
sf_print	test_edges.cpp	/^void sf_print(T a, string msg = "") {$/;"	f
sf_print	test_edges.cpp	/^void sf_print(bool sf, string msg = "") {$/;"	f
sf_print	test_nodes.cpp	/^void sf_print(T a, string msg = "") {$/;"	f
sf_print	test_nodes.cpp	/^void sf_print(bool sf, string msg = "") {$/;"	f
sfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^namespace mtl { namespace sfunctor {$/;"	n	namespace:mtl
sfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace sfunctor {$/;"	n	namespace:mtl
sfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^namespace sfunctor {$/;"	n	namespace:mtl
sfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copysign.hpp	/^namespace sfunctor {$/;"	n	namespace:mtl
sfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	namespace sfunctor {$/;"	n	namespace:mtl::vec
sfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^namespace sfunctor {$/;"	n	namespace:mtl
sfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^namespace sfunctor {$/;"	n	namespace:mtl
sfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^namespace mtl { namespace sfunctor {$/;"	n	namespace:mtl
sfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/signum.hpp	/^namespace sfunctor {$/;"	n	namespace:mtl
sfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^namespace mtl { namespace sfunctor {$/;"	n	namespace:mtl
shape_flatcat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct shape_flatcat$/;"	s	namespace:mtl::traits
shark_32_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			shark_32_col_mask= generate_mask<true, 5, col_major, 1>::value,$/;"	m	namespace:mtl::recursion
shark_32_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			shark_32_row_mask= generate_mask<true, 5, row_major, 1>::value,$/;"	m	namespace:mtl::recursion
shark_64_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			shark_64_col_mask= generate_mask<true, 6, col_major, 1>::value,$/;"	m	namespace:mtl::recursion
shark_64_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			shark_64_row_mask= generate_mask<true, 6, row_major, 1>::value,$/;"	m	namespace:mtl::recursion
shark_z_32_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			shark_z_32_col_mask= generate_mask<false, 5, col_major, 1>::value,$/;"	m	namespace:mtl::recursion
shark_z_32_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			shark_z_32_row_mask= generate_mask<false, 5, row_major, 1>::value,$/;"	m	namespace:mtl::recursion
shark_z_64_col_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			shark_z_64_col_mask= generate_mask<false, 6, col_major, 1>::value;$/;"	m	namespace:mtl::recursion
shark_z_64_row_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/predefined_masks.hpp	/^			shark_z_64_row_mask= generate_mask<false, 6, row_major, 1>::value,$/;"	m	namespace:mtl::recursion
shift_blocks	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/shift_block.hpp	/^void shift_blocks(Size blocks, Starts const& starts, NewStarts const& new_starts, $/;"	f	namespace:mtl::operations
shifted_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    shifted_inserter(matrix_type& A, size_type slot_size= 0,$/;"	f	class:mtl::mat::shifted_inserter
shifted_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^class shifted_inserter$/;"	c	namespace:mtl::mat
short_para	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	    typedef typename boost::mpl::erase_key<TypePara, kind>::type    short_para;$/;"	t	struct:mtl::type_para::set_para
shortest_path_lengths	shortest_path.cpp	/^int shortest_path_lengths(Graph<int, int>& g, const Point& point) {$/;"	f
shrink	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void shrink() $/;"	f	class:mtl::mat::compressed2D
shrink_stl_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/shrink_stl_vector.hpp	/^void inline shrink_stl_vector(std::vector<Value, Allocator>& v)$/;"	f	namespace:mtl
sigma	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^    value_type sigma;$/;"	m	class:mtl::vec::secular_f
signum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/signum.hpp	/^    struct signum$/;"	s	namespace:mtl::sfunctor
signum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/signum.hpp	/^    struct signum<std::complex<Value> >$/;"	s	namespace:mtl::sfunctor
signum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/signum.hpp	/^inline typename sfunctor::signum<Value>::result_type signum(const Value& v)$/;"	f	namespace:mtl
similar_values	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hessian_setup.hpp	/^    inline bool similar_values(Value x, Value y) $/;"	f	namespace:mtl::mat::impl
simple_matrix_view_category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    struct simple_matrix_view_category$/;"	s	namespace:mtl::traits::detail
simplify_base_case_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/simplify_base_case_matrix.hpp	/^    struct simplify_base_case_matrix$/;"	s	namespace:mtl::recursion::impl
simplify_base_case_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/simplify_base_case_matrix.hpp	/^    struct simplify_base_case_matrix<Matrix, Matrix, BaseCaseTest>$/;"	s	namespace:mtl::recursion::impl
simplify_base_case_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/simplify_base_case_matrix.hpp	/^simplify_base_case_matrix(Matrix const& matrix, BaseCaseTest test)$/;"	f	class:mtl::recursion::base_case_matrix
singleShift	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    void singleShift(irange r) {$/;"	f	class:mtl::mat::eigenvalue_solver
size	Examples/proxy_example.cpp	/^  size_type size() const {$/;"	f	class:SimpleSet
size	Examples/trivial_copy.cpp	/^  size_type size() const {$/;"	f	class:Vector
size	Graph.hpp	/^  size_type size() const {$/;"	f	class:Graph
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^inline std::size_t size(const ic_0_evaluator<VectorOut, Solver>& eval)$/;"	f	namespace:itl::pc
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^inline std::size_t size(const banded_view<Matrix>& A)$/;"	f	namespace:mtl::mat
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^inline size(const block_diagonal2D<Value>& matrix)$/;"	f	class:mtl::mat::block_diagonal2D
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^inline size(const compressed2D<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::std
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^inline size(const coordinate2D<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::coordinate2D
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^inline size(const dense2D<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::dense2D
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^inline std::size_t size(const element_structure<ValueType>& A)$/;"	f	namespace:mtl::mat
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^inline size(const ell_matrix<Value, Parameters>& matrix)$/;"	f	class:mtl::mat::std
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^inline std::size_t size(const hermitian_view<Matrix>& A)$/;"	f	namespace:mtl::mat
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^inline std::size_t size(const identity2D& A) { return A.m * A.n; } \/\/\/< Matrix size$/;"	f	namespace:mtl::mat
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^typename Functor::size_type inline size(const implicit_dense<Functor>& A) $/;"	f	class:mtl::mat::Functor
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^inline std::size_t size(const indirect<Matrix>& A)$/;"	f	namespace:mtl::mat
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^inline std::size_t size(const map_view<Functor, Matrix>& A)$/;"	f	namespace:mtl::mat
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_ele_times_expr.hpp	/^std::size_t inline size(const mat_mat_ele_times_expr<E1, E2>& expr) $/;"	f	class:mtl::mat::std
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^inline size(mat_mat_op_expr<E1, E2, SFunctor> const& expr)$/;"	f	class:mtl::mat::mat_mat_op_expr
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_times_expr.hpp	/^std::size_t inline size(const mat_mat_times_expr<E1, E2>& expr) $/;"	f	class:mtl::mat::std
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^inline size(const morton_dense<Value, Mask, Parameters>& matrix)$/;"	f	class:mtl::mat::morton_dense
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^typename Collection< Vector >::size_type size(const multi_vector< Vector >& A) { return num_rows(A) * num_cols(A); }$/;"	f	namespace:mtl::mat
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    friend size_type size(const self& A) { return num_rows(A) * num_cols(A); }$/;"	f	class:mtl::mat::multi_vector_range
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^inline std::size_t size(const poisson2D_dirichlet& A) { return A.s * A.s; } \/\/\/< Matrix size$/;"	f	namespace:mtl::mat
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^inline std::size_t size(const sparse_banded<Value, Parameters>& matrix)$/;"	f	namespace:mtl::mat
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^inline std::size_t size(const transposed_view<Matrix>& A)$/;"	f	namespace:mtl::mat
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	/^inline size_t size(const fused_index_evaluator<T, U>& expr) { return size(expr.first); }$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_cvec_times_expr.hpp	/^	std::size_t inline size(const mat_cvec_times_expr<E1, E2>& x)$/;"	f	class:mtl::vec::std
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^    struct size {};$/;"	s	namespace:mtl::traits
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^    struct size< std::vector<Value> > $/;"	s	namespace:mtl::traits
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^    struct size<Value[Rows][Cols]>$/;"	s	namespace:mtl::traits
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^    struct size<Value[Size]>$/;"	s	namespace:mtl::traits
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^inline size(const Collection& c)$/;"	f	class:mtl::traits::size
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^inline size(const recursator<Matrix>& rec)$/;"	f	class:mtl::mat::recursator
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        size_type size() const { return my_finish > my_start ? my_finish - my_start : 0; }$/;"	f	class:mtl::irange
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^	size_type size() const { return indices.size(); }$/;"	f	class:mtl::iset
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^    std::size_t inline size(const iset& i) $/;"	f	class:mtl::std
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    size_type size() const { return my_finish > my_start ? my_finish - my_start \/ my_stride : 0; }$/;"	f	class:mtl::srange
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^    size_type size() const {$/;"	f	class:mtl::vec::vec_vec_asgn_expr
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^size(const dense_vector<Value, Parameters>& v)  $/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^	friend inline size_type size(const dimension& d) { return d.my_size; } \/\/\/< Size$/;"	f	struct:mtl::vec::non_fixed::dimension
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^	friend inline size_type size(const dimension&) { return dimension::value; } \/\/\/< Size$/;"	f	struct:mtl::vec::fixed::dimension
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^inline std::size_t size(const dot_index_evaluator<Scalar, Vector1, Vector2, ConjOpt, Assign>& eval)$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/lazy_reduction.hpp	/^inline std::size_t size(const lazy_reduction<Vector, Functor>& lazy)$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^inline std::size_t size(const map_view<Functor, Vector>& v)$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^inline std::size_t size(const mat_cvec_multiplier<Matrix, VectorIn>& m) $/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^inline std::size_t size(const reduction_index_evaluator<Scalar, Vector, Functor, Assign>& eval)$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^inline std::size_t size(const row_mat_cvec_index_evaluator<VectorOut, Matrix, VectorIn, Assign>& eval)$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/rvec_mat_times_expr.hpp	/^std::size_t inline size(const rvec_mat_times_expr<E1, E2>& x)$/;"	f	class:mtl::vec::std
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^std::size_t inline size(const sparse_vector<Value, Parameter>& v)$/;"	f	class:mtl::vec::std
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^inline std::size_t size(const strided_vector_ref<Value, Parameters>& v)$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^inline std::size_t size(const unrolled1<BSize, Vector>& v)$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^    friend inline size_type size(const self& v) { return size(v.ref); }$/;"	f	struct:mtl::vec::vec_const_ref_expr
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^inline std::size_t size(const vec_scal_aop_expr<E1, E2, SFunctor>& v)$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^inline std::size_t size(const vec_vec_aop_expr<E1, E2, SFunctor>& v)$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^inline std::size_t size(const vec_vec_op_expr<E1, E2, SFunctor>& v)$/;"	f	namespace:mtl::vec
size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^inline std::size_t size(const vec_vec_pmop_expr<E1, E2, SFunctor>& v)$/;"	f	namespace:mtl::vec
size	Point.hpp	/^  static constexpr size_type     size() { return 3; }$/;"	f	struct:Point
size	mtl_test.cpp	/^inline std::size_t size(const IdentityMatrix& A) { return A.s * A.s; }$/;"	f
size	poisson.cpp	/^inline std::size_t size(const GraphSymmetricMatrix& A) { $/;"	f
size1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	    typedef typename boost::mpl::at<TypePara, size_type>::type              size1;$/;"	t	struct:mtl::type_para::replace_defaults_common
size1D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size1D.hpp	/^	inline size1D(multi_vector<Vector>& A)$/;"	f	class:mtl::mat::Collection
size1D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size1D.hpp	/^	std::size_t inline size1D(const dense_vector<Value, P>& v)$/;"	f	class:mtl::vec::std
size1D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size1D.hpp	/^inline size1D(const Vector& v)$/;"	f	class:mtl::traits::size
size2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^					     size1>::type                           size2;$/;"	t	struct:mtl::type_para::replace_defaults_common
size_	Examples/proxy_example.cpp	/^  size_type size_;$/;"	m	class:SimpleSet	file:
size_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    typedef size_helper<Size>                 size_base;$/;"	t	struct:mtl::detail::contiguous_memory_block
size_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    explicit size_helper(std::size_t size)$/;"	f	struct:mtl::detail::size_helper
size_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    size_helper() {}$/;"	f	struct:mtl::detail::size_helper
size_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    size_helper(std::size_t size= 0) : my_used_memory(size) {}$/;"	f	struct:mtl::detail::size_helper
size_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^struct size_helper$/;"	s	namespace:mtl::detail
size_helper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^struct size_helper<0>$/;"	s	namespace:mtl::detail
size_pair	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef std::pair<size_type, size_type>   size_pair;$/;"	t	struct:mtl::mat::compressed2D_indexer
size_pair	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef std::pair<size_type, size_type>   size_pair;$/;"	t	struct:mtl::mat::compressed2D_inserter
size_switch_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct size_switch_dmat_dmat_mult_t$/;"	s	namespace:mtl
size_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef std::size_t                               size_t;$/;"	t	struct:mtl::mat::compressed_key
size_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef std::size_t                              size_t;$/;"	t	class:mtl::mat::compressed2D
size_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef std::size_t                   size_t;$/;"	t	struct:mtl::mat::compressed_el_cursor
size_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef std::size_t                   size_t;$/;"	t	struct:mtl::mat::compressed_minor_cursor
size_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef std::size_t                               size_t;$/;"	t	struct:mtl::mat::coordinate_key
size_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef std::size_t                                   size_t;$/;"	t	struct:mtl::mat::sparse_banded_key
size_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef std::size_t                                size_t;$/;"	t	class:mtl::mat::sparse_banded
size_type	Examples/proxy_example.cpp	/^  typedef unsigned size_type;$/;"	t	class:SimpleSet	file:
size_type	Graph.hpp	/^  typedef unsigned size_type;$/;"	t	class:Graph
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^    typedef typename mtl::Collection<Matrix>::size_type   size_type;$/;"	t	class:itl::pc::diagonal
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef typename mtl::Collection<Matrix>::size_type              size_type;$/;"	t	class:itl::pc::ic_0
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef typename pc_type::size_type                     size_type;$/;"	t	struct:itl::pc::ic_0_evaluator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^    typedef typename mtl::Collection<Matrix>::size_type   size_type;$/;"	t	class:itl::pc::identity
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef typename mtl::Collection<Matrix>::size_type   size_type;$/;"	t	class:itl::pc::ilu
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/gauss_seidel.hpp	/^    typedef typename mtl::Collection<Matrix>::size_type  size_type;$/;"	t	class:itl::gauss_seidel
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jacobi.hpp	/^    typedef typename mtl::Collection<Matrix>::size_type  size_type;$/;"	t	class:itl::jacobi
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/jor.hpp	/^    typedef typename mtl::Collection<Matrix>::size_type  size_type;$/;"	t	class:itl::jor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^    typedef typename mtl::Collection<Matrix>::size_type  size_type;$/;"	t	class:itl::sor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef std::size_t size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection< Matrix >::size_type size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<E1>::size_type                    size_type; $/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<E1>::size_type                    size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<E1>::size_type  size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<Matrix>::size_type                size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<Matrix>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<Matrix>::size_type  size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<Vector>::size_type  size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Parameters::size_type size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::banded_view<Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::conj_view<Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::hilbert_matrix<Value>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::imag_view<Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::implicit_dense<Functor>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::negate_view<Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::ones_matrix<Value>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::outer_product_matrix<Vector1, Vector2>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::real_view<Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::rscaled_view<Coll,RScaling>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::scaled_view<Scaling, Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::multi_vector<Vector>::size_type        size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::multi_vector_range<Vector>::size_type        size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::transposed_view<Matrix>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::vec::strided_vector_ref<Value, Parameters>::size_type size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename std::vector<Value>::size_type       size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::conj_view<Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::imag_view<Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::map_view<Functor, Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::negate_view<Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::real_view<Coll>::size_type         size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^        typedef typename mtl::mat::dense2D<Value, Parameters>::size_type size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename Collection<Coll>::size_type  size_type;$/;"	t	struct:mtl::traits::detail::referred_range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename Collection<Matrix>::size_type           size_type;$/;"	t	struct:mtl::traits::detail::all_cols_range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename Collection<Matrix>::size_type           size_type;$/;"	t	struct:mtl::traits::detail::all_rows_range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename Collection<Matrix>::size_type           size_type;$/;"	t	struct:mtl::traits::detail::matrix_element_cursor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename Collection<Matrix>::size_type           size_type;$/;"	t	struct:mtl::traits::detail::matrix_element_key
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename Collection<ref_type>::size_type         size_type;$/;"	t	struct:mtl::traits::detail::all_cols_in_row_range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename Collection<ref_type>::size_type         size_type;$/;"	t	struct:mtl::traits::detail::all_rows_in_col_range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    typedef typename matrix_type::size_type             size_type;$/;"	t	struct:mtl::detail::trivial_inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef typename matrix_type::size_type           size_type;$/;"	t	class:mtl::mat::umfpack::solver
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef typename Matrix::size_type                 size_type;$/;"	t	struct:mtl::mat::banded_view
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef typename view_type::size_type                                         size_type;$/;"	t	struct:mtl::mat::sub_matrix_t
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    typedef typename Parameters::size_type    size_type;$/;"	t	struct:mtl::mat::base_matrix
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    typedef std::size_t                       size_type;$/;"	t	struct:mtl::mat::base_sub_matrix
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    typedef unsigned int	      size_type;$/;"	t	class:mtl::mat::block_diagonal2D
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef typename Collection<compressed2D<Elt, Parameters> >::size_type  size_type;$/;"	t	struct:mtl::traits::range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef typename matrix_type::size_type                                       size_type;$/;"	t	struct:mtl::traits::range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef SizeType                          size_type;$/;"	t	struct:mtl::mat::compressed2D_indexer
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef typename Parameters::size_type           size_type;$/;"	t	class:mtl::mat::compressed2D
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef typename matrix_type::size_type   size_type;$/;"	t	struct:mtl::mat::compressed2D_inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef typename Parameters::size_type				  size_type;$/;"	t	class:mtl::mat::coordinate2D
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef typename Parameters::size_type               size_type;$/;"	t	struct:mtl::mat::coordinate_major_cursor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef typename Parameters::size_type               size_type;$/;"	t	struct:mtl::mat::coordinate_minor_cursor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef typename matrix_type::size_type             size_type;$/;"	t	struct:mtl::mat::coordinate2D_inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    typedef typename matrix_type::size_type                                       size_type;$/;"	t	struct:mtl::traits::detail::dense2D_iterator_range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	typedef typename matrix::size_type                                            size_type;$/;"	t	struct:mtl::traits::range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        typedef typename matrix_type::size_type size_type;$/;"	t	struct:mtl::mat::sub_matrix_t
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef std::size_t                       size_type;$/;"	t	class:mtl::mat::dense2D
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	typedef std::size_t  size_type;$/;"	t	struct:mtl::fixed::dimensions
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	typedef std::size_t  size_type;$/;"	t	struct:mtl::non_fixed::dimensions
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef typename Parameters::size_type             size_type;$/;"	t	class:mtl::mat::ell_matrix
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef typename Parameters::size_type    size_type;$/;"	t	struct:mtl::mat::ell_matrix_inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    typedef typename Collection<Matrix>::size_type                 size_type;$/;"	t	struct:mtl::mat::hermitian_view
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^	typedef std::size_t    size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef std::size_t              size_type;$/;"	t	class:mtl::mat::outer_product_functor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef std::size_t    size_type;$/;"	t	class:mtl::mat::hilbert_functor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef std::size_t    size_type;$/;"	t	class:mtl::mat::ones_functor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef typename Functor::size_type                size_type;$/;"	t	class:mtl::mat::implicit_dense
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef typename functor_type::size_type  size_type;$/;"	t	class:mtl::mat::hilbert_matrix
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef typename functor_type::size_type  size_type;$/;"	t	class:mtl::mat::ones_matrix
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef typename functor_type::size_type  size_type;$/;"	t	class:mtl::mat::outer_product_matrix
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    typedef typename Collection<Matrix>::size_type  size_type;$/;"	t	struct:mtl::mat::indirect
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef typename Matrix::size_type                         size_type;$/;"	t	struct:mtl::mat::inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef typename Parameters::size_type                                   size_type;$/;"	t	struct:mtl::mat::inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/inserter.hpp	/^    typedef typename matrix_type::size_type                    size_type;$/;"	t	struct:mtl::mat::inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    typedef typename Matrix::size_type  size_type;$/;"	t	struct:mtl::traits::detail::mapped_col
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    typedef typename Matrix::size_type  size_type;$/;"	t	struct:mtl::traits::detail::mapped_row
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef typename Matrix::size_type                 size_type;$/;"	t	struct:mtl::mat::map_view
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef typename view_type::size_type                                              size_type;$/;"	t	struct:mtl::mat::sub_matrix_t
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mapped_inserter.hpp	/^    typedef typename Collection<matrix_type>::size_type     size_type;$/;"	t	class:mtl::mat::mapped_inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    typedef typename E1::size_type               size_type;$/;"	t	struct:mtl::mat::mat_mat_op_expr
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    typedef typename matrix_type::size_type                                       size_type;$/;"	t	struct:mtl::traits::detail::morton_dense_iterator_range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	typedef typename Collection<matrix>::size_type                   size_type;$/;"	t	struct:mtl::traits::range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^        typedef typename matrix_type::size_type size_type;$/;"	t	struct:mtl::mat::sub_matrix_t
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef std::size_t                               size_type;$/;"	t	struct:mtl::mat::morton_dense_col_cursor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef std::size_t                               size_type;$/;"	t	struct:mtl::mat::morton_dense_el_cursor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef std::size_t                               size_type;$/;"	t	struct:mtl::mat::morton_dense_key
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef std::size_t                               size_type;$/;"	t	struct:mtl::mat::morton_dense_row_cursor
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Matrix::size_type                  size_type;$/;"	t	struct:mtl::mat::morton_dense_col_const_iterator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Matrix::size_type                  size_type;$/;"	t	struct:mtl::mat::morton_dense_col_iterator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Matrix::size_type                  size_type;$/;"	t	struct:mtl::mat::morton_dense_row_const_iterator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Matrix::size_type                  size_type;$/;"	t	struct:mtl::mat::morton_dense_row_iterator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename parameters::size_type    size_type;$/;"	t	class:mtl::mat::morton_dense
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    typedef typename Collection<Vector>::size_type   size_type;$/;"	t	class:mtl::mat::multi_vector
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    typedef typename Collection<Vector>::size_type   size_type;$/;"	t	class:mtl::mat::multi_vector_range
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/parameter.hpp	/^    typedef SizeType    size_type;$/;"	t	struct:mtl::mat::parameters
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^	typedef int    size_type;$/;"	t	struct:mtl::Collection
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/shifted_inserter.hpp	/^    typedef typename Collection<matrix_type>::size_type     size_type;$/;"	t	class:mtl::mat::shifted_inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	typedef typename Parameters::size_type                                                 size_type;$/;"	t	struct:mtl::traits::range_generator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef typename Parameters::size_type                                   size_type;$/;"	t	struct:mtl::mat::sparse_banded_inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef typename Parameters::size_type             size_type;$/;"	t	class:mtl::mat::sparse_banded
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    typedef typename Matrix::size_type  size_type;$/;"	t	struct:mtl::traits::detail::transposed_col
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    typedef typename Matrix::size_type  size_type;$/;"	t	struct:mtl::traits::detail::transposed_row
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef typename Matrix::size_type                 size_type;$/;"	t	struct:mtl::mat::transposed_view
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef typename matrix_type::size_type                                       size_type;$/;"	t	struct:mtl::mat::sub_matrix_t
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    typedef typename ref2_type::size_type      size_type;$/;"	t	struct:mtl::ColumnInMatrix
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    typedef typename ref_type::size_type       size_type;$/;"	t	struct:mtl::ColumnInMatrix
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    typedef typename Collection<Matrix>::size_type    size_type;  $/;"	t	class:mtl::mat::eigenvalue_solver
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    typedef typename Collection<Matrix>::size_type    size_type;$/;"	t	class:mtl::mat::givens
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    typedef typename Collection<Vector>::size_type    size_type;$/;"	t	class:mtl::vec::givens
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	typedef typename Collection<Matrix>::size_type          	       	    size_type;$/;"	t	struct:mtl::mat::detail::lower_trisolve_t
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	/^    typedef typename Collection<SizeVector>::value_type  size_type;$/;"	t	struct:mtl::vec::make_sparse_trait
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_cvec_times_expr.hpp	/^    typedef typename Collection<E2>::size_type    size_type;$/;"	t	struct:mtl::mat_cvec_times_expr
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	typedef typename Matrix::size_type       size_type;$/;"	t	struct:mtl::operations::bracket_proxy
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	typedef typename Matrix::size_type       size_type;$/;"	t	struct:mtl::operations::range_bracket_proxy
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    typedef typename Collection<Matrix>::size_type size_type;$/;"	t	class:mtl::mat::qr_givens_solver
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    typedef typename ref2_type::size_type      size_type;$/;"	t	struct:mtl::RowInMatrix
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    typedef typename ref_type::size_type       size_type;$/;"	t	struct:mtl::RowInMatrix
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^    typedef typename Collection<Vector>::size_type    size_type;$/;"	t	class:mtl::vec::secular_f
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	typedef typename Collection<Matrix>::size_type            size_type;$/;"	t	struct:mtl::mat::detail::upper_trisolve_t
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    typedef typename Matrix::size_type                            size_type;$/;"	t	struct:mtl::recursion::half_splitter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    typedef typename Matrix::size_type                            size_type;$/;"	t	struct:mtl::recursion::max_dim_splitter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    typedef typename Matrix::size_type                            size_type;$/;"	t	struct:mtl::recursion::separate_dim_splitter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/dim_splitter.hpp	/^    typedef typename Recursator::size_type                            size_type;$/;"	t	struct:mtl::recursion::outer_bound_splitter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    typedef typename Collection<Matrix>::size_type                size_type;$/;"	t	struct:mtl::mat::recursator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        typedef std::size_t                    size_type;$/;"	t	class:mtl::irange
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iset.hpp	/^        typedef std::size_t size_type;$/;"	t	class:mtl::iset
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/pos_type.hpp	/^    typedef typename Collection<T>::size_type size_type;$/;"	t	struct:mtl::traits::pos_type_aux
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::size_type  size_type;$/;"	t	struct:mtl::detail::offset_from_key
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Parameters::size_type                        size_type; $/;"	t	struct:mtl::detail::sparse_banded_col
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Parameters::size_type                        size_type; $/;"	t	struct:mtl::detail::sparse_banded_row
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    typedef std::size_t size_type;$/;"	t	class:mtl::srange
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct size_type {};$/;"	s	namespace:mtl::type_para
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^    typedef typename E1::size_type               size_type;$/;"	t	class:mtl::vec::vec_vec_asgn_expr
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef std::size_t       size_type ;$/;"	t	class:mtl::vec::dense_vector
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^	typedef std::size_t  size_type;$/;"	t	struct:mtl::vec::fixed::dimension
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^	typedef std::size_t  size_type;$/;"	t	struct:mtl::vec::non_fixed::dimension
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    typedef typename Collection<Vector>::size_type  size_type;$/;"	t	class:mtl::vec::extracter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    typedef typename Collection<Vector>::size_type size_type;$/;"	t	struct:mtl::vec::indexbuffer
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    typedef typename Collection<Vector>::size_type   size_type;$/;"	t	struct:mtl::vec::inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef typename Collection<Vector>::size_type     size_type;$/;"	t	struct:mtl::vec::map_view
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^    typedef typename BaseInserter::size_type               size_type;$/;"	t	class:mtl::vec::mapped_inserter
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/parameter.hpp	/^    typedef SizeType    size_type;$/;"	t	struct:mtl::vec::parameters
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    typedef typename mtl::Collection<Matrix>::size_type            size_type; $/;"	t	struct:mtl::vec::row_mat_cvec_index_evaluator
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/rvec_mat_times_expr.hpp	/^    typedef typename Collection<E2>::size_type    size_type;$/;"	t	struct:mtl::vec::rvec_mat_times_expr
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    typedef typename Parameter::size_type   size_type;$/;"	t	class:mtl::vec::sparse_vector
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef std::size_t                                                              size_type ;$/;"	t	class:mtl::vec::strided_vector_ref
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    typedef typename Collection<Vector>::size_type  size_type;$/;"	t	class:mtl::vec::unrolled1
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^    typedef typename Vector::size_type           size_type;$/;"	t	struct:mtl::vec::vec_const_ref_expr
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    typedef typename E1::size_type               size_type;$/;"	t	struct:mtl::vec::vec_scal_aop_expr
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    typedef typename Collection<E1>::size_type   size_type;$/;"	t	struct:mtl::vec::vec_vec_aop_expr
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    typedef typename E1::size_type               size_type;$/;"	t	struct:mtl::vec::vec_vec_op_expr
size_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    typedef typename Collection<first_argument_type>::size_type   size_type;$/;"	t	struct:mtl::vec::vec_vec_pmop_expr
size_type	Mesh.hpp	/^	typedef unsigned size_type;$/;"	t	class:Mesh
size_type	Point.hpp	/^  typedef std::size_t     size_type;$/;"	t	struct:Point
size_type	mtl_test.cpp	/^	typedef unsigned size_type;$/;"	t	struct:mtl::Collection	file:
size_type	poisson.cpp	/^	typedef unsigned size_type;$/;"	t	struct:mtl::Collection	file:
skew	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    enum symmetry {general, symmetric, skew, Hermitian} my_symmetry;$/;"	e	enum:mtl::io::matrix_market_istream::symmetry
sleep	CS207/Util.hpp	/^int sleep(double t) {$/;"	f	namespace:CS207
slot_ends	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<size_type>              slot_ends;$/;"	m	struct:mtl::mat::compressed2D_inserter
slot_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    size_type                           slot_size;$/;"	m	struct:mtl::mat::compressed2D_inserter
slots	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    size_type slots() const { return my_slots; } \/\/\/ Slots, i.e. maximum number of entries per row\/column$/;"	f	class:mtl::mat::ell_matrix
small_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef typename mult_assign_mode<FunctorSmall, Assign>::type                small_type;$/;"	t	struct:mtl::assign::mult_assign_mode
smat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline smat_cvec_mult(const compressed2D<MValue, MPara>& A, const VectorIn& v, VectorOut& w, Assign as, tag::row_major)$/;"	f	class:mtl::mat::mtl::traits::enable_if_scalar
smat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline smat_cvec_mult(const compressed2D<MValue, MPara>& A, const VectorIn& v, VectorOut& w, Assign, tag::row_major)$/;"	f	class:mtl::mat::mtl::traits::enable_if_scalar
smat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline smat_cvec_mult(const ell_matrix<MValue, MPara>& A, const VectorIn& v, VectorOut& w, Assign, tag::row_major)$/;"	f	class:mtl::mat::mtl::traits::enable_if_scalar
smat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline smat_cvec_mult(const sparse_banded<MValue, MPara>& A, const VectorIn& v, VectorOut& w, Assign, tag::row_major)$/;"	f	class:mtl::mat::mtl::traits::enable_if_scalar
smat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void smat_cvec_mult(const Matrix& A, const VectorIn& v, VectorOut& w, Assign, tag::col_major)$/;"	f	namespace:mtl::mat
smat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void smat_cvec_mult(const Matrix& A, const VectorIn& v, VectorOut& w, Assign, tag::row_major)$/;"	f	namespace:mtl::mat
smat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void smat_cvec_mult(const compressed2D<MValue, MPara>& A, const VectorIn& v, VectorOut& w, Assign as, tag::row_major)$/;"	f	namespace:mtl::mat
smat_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_expr.hpp	/^struct smat_expr$/;"	s	namespace:mtl::mat
smat_smat_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_smat_mult.hpp	/^inline void smat_smat_mult(const MatrixA& A, const MatrixB& B, MatrixC& C, Assign, $/;"	f	namespace:mtl
smoother	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/repeated.hpp	/^    Smoother    smoother;$/;"	m	class:itl::repeated
smoother_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/repeated.hpp	/^    typedef Smoother smoother_type; $/;"	t	class:itl::repeated
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicg.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x) const$/;"	f	class:itl::bicg_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicg.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x, Iteration& iter) const$/;"	f	class:itl::bicg_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x) const$/;"	f	class:itl::bicgstab_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x, Iteration& iter) const$/;"	f	class:itl::bicgstab_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_2.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x) const$/;"	f	class:itl::bicgstab_2_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_2.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x, Iteration& iter) const$/;"	f	class:itl::bicgstab_2_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x) const$/;"	f	class:itl::bicgstab_ell_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/bicgstab_ell.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x, Iteration& iter) const$/;"	f	class:itl::bicgstab_ell_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cg.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x) const$/;"	f	class:itl::cg_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cg.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x, Iteration& iter) const$/;"	f	class:itl::cg_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cgs.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x) const$/;"	f	class:itl::cgs_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/cgs.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x, Iteration& iter) const$/;"	f	class:itl::cgs_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x) const$/;"	f	class:itl::gmres_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/gmres.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x, Iteration& iter) const$/;"	f	class:itl::gmres_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x) const$/;"	f	class:itl::idr_s_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/idr_s.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x, Iteration& iter) const$/;"	f	class:itl::idr_s_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x) const$/;"	f	class:itl::qmr_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/qmr.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x, Iteration& iter) const$/;"	f	class:itl::qmr_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/repeating_solver.hpp	/^    int solve(const VectorIn& b, VectorOut& x) const$/;"	f	class:itl::repeating_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x) const$/;"	f	class:itl::tfqmr_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^    int solve(const HilbertSpaceB& b, HilbertSpaceX& x, Iteration& iter) const$/;"	f	class:itl::tfqmr_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^    void solve(const VectorIn& x, VectorOut& y) const$/;"	f	class:itl::pc::concat
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/concat.hpp	/^inline solve(const concat<PC1, PC2, Matrix, Store1, Store2>& P, const Vector& x)$/;"	f	namespace:itl::pc
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^    Vector solve(const Vector& x) const$/;"	f	class:itl::pc::diagonal
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^    void solve(const VectorIn& x, VectorOut& y) const$/;"	f	class:itl::pc::diagonal
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^inline solve(const diagonal<Matrix>& P, const Vector& x)$/;"	f	namespace:itl::pc
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    Vector solve(const Vector& x) const$/;"	f	class:itl::pc::ic_0
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    void solve(const VectorIn& x, VectorOut& y) const$/;"	f	class:itl::pc::ic_0
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^inline solve(const ic_0<Matrix, Value>& P, const Vector& x)$/;"	f	namespace:itl::pc
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^    Vector solve(const Vector& x) const$/;"	f	class:itl::pc::identity
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^    void solve(const VectorIn& b, VectorOut& x) const$/;"	f	class:itl::pc::identity
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^inline solve(const identity<Matrix>& P, const Vector& x)$/;"	f	namespace:itl::pc
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    Vector solve(const Vector& b) const { return lu_apply(LU, P, b); }$/;"	f	class:itl::pc::ilu
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    Vector solve(const Vector& x) const$/;"	f	class:itl::pc::ilu
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    void solve(const VectorIn& b, VectorOut& x) const { x= lu_apply(LU, P, b); }$/;"	f	class:itl::pc::ilu
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    void solve(const VectorIn& x, VectorOut& y) const$/;"	f	class:itl::pc::ilu
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^inline solve(const ilu<Matrix, Factorizer, Value>& P, const Vector& x)$/;"	f	namespace:itl::pc
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^        void solve(const VectorIn& b, VectorOut& x) const $/;"	f	class:itl::pc::imf_preconditioner
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^inline solve(const imf_preconditioner<Matrix>& P, const Vector& b)$/;"	f	namespace:itl::pc
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    void solve(const VectorIn& x, VectorOut& y) const$/;"	f	class:itl::pc::sub_matrix_pc
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^inline solve(const sub_matrix_pc<Preconditioner, Matrix, Store>& P, const Vector& x)$/;"	f	namespace:itl::pc
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    int solve(const VectorB& b, VectorX& x) const$/;"	f	class:mtl::mat::umfpack::solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    int solve(const VectorB& b, VectorX& x)$/;"	f	class:mtl::mat::umfpack::solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lu.hpp	/^    void solve(const VectorIn& b, VectorOut& x) const$/;"	f	class:mtl::mat::lu_solver
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/solve.hpp	/^	Vector inline solve(const Matrix& A, const Vector& b, tag::compressed2D)$/;"	f	namespace:mtl::mat::detail
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/solve.hpp	/^	Vector inline solve(const Matrix& A, const Vector& b, tag::dense)$/;"	f	namespace:mtl::mat::detail
solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/solve.hpp	/^Vector inline solve(const Matrix& A, const Vector& b)$/;"	f	namespace:mtl::mat
solve_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void solve_aux(int sys, VectorX& Xx, VectorX& Xz, const VectorB& Bx, const VectorB& Bz, false_)$/;"	f	class:mtl::mat::umfpack::solver
solve_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void solve_aux(int sys, VectorX& Xx, VectorX& Xz, const VectorB& Bx, const VectorB& Bz, true_)$/;"	f	class:mtl::mat::umfpack::solver
solve_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void solve_aux(int sys, VectorX& xx, const VectorB& bb, false_)$/;"	f	class:mtl::mat::umfpack::solver
solve_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void solve_aux(int sys, VectorX& xx, const VectorB& bb, true_)$/;"	f	class:mtl::mat::umfpack::solver
solve_lower	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    const VectorOut& solve_lower(const VectorIn& x, VectorOut&) const$/;"	f	class:itl::pc::ic_0
solve_lower	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    const VectorOut& solve_lower(const VectorIn& x, VectorOut&) const$/;"	f	class:itl::pc::ilu
solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	/^    solver(const pc_type& P, const Vector& x) : P(P), x(x) {}$/;"	f	struct:itl::pc::solver
solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	/^struct solver$/;"	s	namespace:itl::pc
solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    explicit solver(const T& A) {}$/;"	f	class:mtl::mat::umfpack::solver
solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    explicit solver(const compressed2D<Value, Parameters>& A) $/;"	f	class:mtl::mat::umfpack::solver
solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    explicit solver(const compressed2D<value_type, Parameters>& A, int strategy = UMFPACK_STRATEGY_AUTO, double alloc_init = 0.7) $/;"	f	class:mtl::mat::umfpack::solver
solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    solver(const matrix_type& A, int strategy = UMFPACK_STRATEGY_AUTO, double alloc_init = 0.7) $/;"	f	class:mtl::mat::umfpack::solver
solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	class solver {$/;"	c	namespace:mtl::mat::umfpack
solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	class solver<compressed2D<Value, Parameters> >$/;"	c	namespace:mtl::mat::umfpack
solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	class solver<compressed2D<double, Parameters> >$/;"	c	namespace:mtl::mat::umfpack
solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	class solver<compressed2D<std::complex<double>, Parameters> >$/;"	c	namespace:mtl::mat::umfpack
solver_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/repeating_solver.hpp	/^    typedef typename boost::mpl::if_c<Stored, Solver, const Solver&>::type solver_type;$/;"	t	class:itl::repeating_solver
solver_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef solver<typename matrix_copy<compressed2D<Value, Parameters>, Value, typename Parameters::orientation>::matrix_type > solver_type;$/;"	t	class:mtl::mat::umfpack::solver
sometimes_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/sometimes_data.hpp	/^    sometimes_data(const T& data) : data(data) {}$/;"	f	struct:mtl::utility::sometimes_data
sometimes_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/sometimes_data.hpp	/^    sometimes_data(const T&) {}$/;"	f	struct:mtl::utility::sometimes_data
sometimes_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/sometimes_data.hpp	/^struct sometimes_data$/;"	s	namespace:mtl::utility
sometimes_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/sometimes_data.hpp	/^struct sometimes_data<false, T>$/;"	s	namespace:mtl::utility
sor	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^    sor(const Matrix& A) $/;"	f	class:itl::sor
sor	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^    sor(const Matrix& A) : A(A), dia_inv(num_rows(A)) $/;"	f	class:itl::sor
sor	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^class sor$/;"	c	namespace:itl
sor	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/sor.hpp	/^class sor<mtl::mat::compressed2D<Value, Parameters> , Omega>$/;"	c	namespace:itl
sort	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void sort() $/;"	f	class:mtl::mat::coordinate2D
sort	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void sort(boost::mpl::false_)$/;"	f	class:mtl::mat::coordinate2D
sort	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void sort(boost::mpl::true_)$/;"	f	class:mtl::mat::coordinate2D
sort	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	/^void inline sort(Vector& x)$/;"	f	namespace:mtl::vec
sort	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	/^void inline sort(Vector& x, PermVec& p)$/;"	f	namespace:mtl::vec
sort	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	/^void inline sort(Vector& x, Vector& y, PermVec& p)$/;"	f	namespace:mtl::vec
sort_along	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sorting.hpp	/^inline void sort_along(Key* keys, Value* values, int size) {$/;"	f
sort_indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    void sort_indices() {$/;"	f	class:mtl::mat::element
sort_on_data	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    void sort_on_data() \/\/ largest magnitude first$/;"	f	class:mtl::vec::sparse_vector
sort_on_indices	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    void sort_on_indices()$/;"	f	class:mtl::vec::sparse_vector
sort_xy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	/^void inline sort_xy(Vector& x, Vector& y, PermVec& z)$/;"	f	namespace:mtl::vec
sorted_block_insertion	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^compressed2D_inserter<Elt, Parameters, Updater>::sorted_block_insertion(const element_matrix_t<Matrix, Rows, Cols>& iblock)$/;"	f	class:mtl::mat::compressed2D_inserter
sorted_block_insertion_limit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t sorted_block_insertion_limit= 5;$/;"	m	namespace:mtl::mat
sorted_block_insertion_limit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t sorted_block_insertion_limit= MTL_SORTED_BLOCK_INSERTION_LIMIT;$/;"	m	namespace:mtl::mat
south_east	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    self south_east() const$/;"	f	struct:mtl::mat::recursator
south_east	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^recursator<Matrix> inline south_east(const recursator<Matrix>& rec)$/;"	f	namespace:mtl::mat
south_west	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    self south_west() const$/;"	f	struct:mtl::mat::recursator
south_west	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^recursator<Matrix> inline south_west(const recursator<Matrix>& rec)$/;"	f	namespace:mtl::mat
spare	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    map_type                            spare;$/;"	m	struct:mtl::mat::compressed2D_inserter
sparse	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct sparse : virtual universe {};$/;"	s	namespace:mtl::tag
sparse	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct sparse {};$/;"	s	namespace:mtl
sparse_banded	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    explicit sparse_banded(const MatrixSrc& src) : data(0), inserting(false)$/;"	f	class:mtl::mat::sparse_banded
sparse_banded	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    explicit sparse_banded(size_type nr= 0, size_type nc= 0) $/;"	f	class:mtl::mat::sparse_banded
sparse_banded	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^class sparse_banded$/;"	c	namespace:mtl::mat
sparse_banded_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    explicit sparse_banded_col(matrix_ref_type A) : A(A) {}$/;"	f	struct:mtl::detail::sparse_banded_col
sparse_banded_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^struct sparse_banded_col \/\/ maybe refactor into sparse_banded_minor$/;"	s	namespace:mtl::detail
sparse_banded_const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    explicit sparse_banded_const_value(matrix_ref_type A) : A(A) {}$/;"	f	struct:mtl::detail::sparse_banded_const_value
sparse_banded_const_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^struct sparse_banded_const_value$/;"	s	namespace:mtl::detail
sparse_banded_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    explicit sparse_banded_cursor(const matrix_type& A, size_t offset) $/;"	f	struct:mtl::mat::sparse_banded_cursor
sparse_banded_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^struct sparse_banded_cursor $/;"	s	namespace:mtl::mat
sparse_banded_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    sparse_banded_inserter(matrix_type& A, size_type) : A(A) $/;"	f	struct:mtl::mat::sparse_banded_inserter
sparse_banded_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^struct sparse_banded_inserter$/;"	s	namespace:mtl::mat
sparse_banded_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    explicit sparse_banded_key(const matrix_type& A, size_t offset) $/;"	f	struct:mtl::mat::sparse_banded_key
sparse_banded_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^struct sparse_banded_key$/;"	s	namespace:mtl::mat
sparse_banded_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct sparse_banded_matrix$/;"	s	namespace:mtl::tag
sparse_banded_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    explicit sparse_banded_row(matrix_ref_type A) : A(A) {}$/;"	f	struct:mtl::detail::sparse_banded_row
sparse_banded_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^struct sparse_banded_row  \/\/ maybe refactor into sparse_banded_major$/;"	s	namespace:mtl::detail
sparse_col_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct sparse_col_vector$/;"	s	namespace:mtl::tag
sparse_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct sparse_matrix : virtual sparse, virtual matrix {};$/;"	s	namespace:mtl::tag
sparse_row_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct sparse_row_vector$/;"	s	namespace:mtl::tag
sparse_type_lower	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	typedef mtl::mat::coordinate2D<value_type> sparse_type_lower;$/;"	t	class:itl::pc::imf_preconditioner
sparse_type_upper	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	typedef mtl::mat::coordinate2D<value_type> sparse_type_upper;$/;"	t	class:itl::pc::imf_preconditioner
sparse_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    sparse_vector(size_type n= 0) : n(n), on_indices(true) \/*, longest(0) *\/ {}$/;"	f	class:mtl::vec::sparse_vector
sparse_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^class sparse_vector$/;"	c	namespace:mtl::vec
sparsity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    enum sparsity {coordinate, array} my_sparsity;$/;"	g	class:mtl::io::matrix_market_istream
sparsity	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::string sparsity(const Matrix&) const $/;"	f	class:mtl::io::matrix_market_ostream
sparsity_flatcat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct sparsity_flatcat$/;"	s	namespace:mtl::traits
split_complex_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/split_complex_vector.hpp	/^inline void split_complex_vector(const VectorComplex& c, VectorReal& r, VectorImaginary& i)$/;"	f	namespace:mtl::vec
splitter_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    typedef recursion::outer_bound_splitter<self>                 splitter_type;$/;"	t	struct:mtl::mat::recursator
sqrt	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct sqrt$/;"	s	namespace:mtl::sfunctor
sqrt_check	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/sqrt.hpp	/^struct sqrt_check$/;"	s	namespace:meta_math
sqrt_impl	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/sqrt.hpp	/^    struct sqrt_impl$/;"	s	namespace:meta_math::impl
square	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/misc.hpp	/^    T square(const T& x)$/;"	f	namespace:mtl
square	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    inline T square(T x) const { return x * x; }$/;"	f	class:mtl::mat::qr_givens_solver
square	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^    value_type square(value_type x) const { return x*x; }$/;"	f	class:mtl::vec::secular_f
square	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct square$/;"	s	namespace:mtl::sfunctor
square_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void square_cvec_mult(const dense2D<MValue, MPara>& A, const mtl::vec::dense_vector<ValueIn, ParaIn>& v, VectorOut& w, Assign)$/;"	f	namespace:mtl::mat
square_cvec_mult_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^struct square_cvec_mult_cols$/;"	s	namespace:mtl::mat
square_cvec_mult_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^struct square_cvec_mult_cols<Size, Size>$/;"	s	namespace:mtl::mat
square_cvec_mult_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^struct square_cvec_mult_rows$/;"	s	namespace:mtl::mat
square_cvec_mult_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^struct square_cvec_mult_rows<Size, Size>$/;"	s	namespace:mtl::mat
squared_abs	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/squared_abs.hpp	/^T inline squared_abs(const std::complex<T>& z)$/;"	f	namespace:mtl
squared_abs	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/squared_abs.hpp	/^inline squared_abs(const T& x)$/;"	f	class:mtl::boost::disable_if
squared_abs	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/squared_abs.hpp	/^inline squared_abs(const T& x)$/;"	f	class:mtl::boost::enable_if
sr1	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/updater/sr1.hpp	/^struct sr1$/;"	s	namespace:itl
srange	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    explicit srange(size_type start, size_type finish, size_type stride) $/;"	f	class:mtl::srange
srange	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^class srange$/;"	c	namespace:mtl
src	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^	Source         src;$/;"	m	struct:mtl::mat::crtp_matrix_assign::scalar_assign
src	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    Source& src;$/;"	m	struct:mtl::make_in_out_copy_or_reference
src	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    Source& src;$/;"	m	struct:mtl::make_out_copy_or_reference
st	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<E2>::value_type                   st;$/;"	t	struct:mtl::Collection
start	CS207/Util.hpp	/^  void start() {$/;"	f	class:CS207::Clock
start	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^        size_type start() const { return my_start; } $/;"	f	class:mtl::irange
start	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    void start() $/;"	f	class:mtl::utility::papi_t
start	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    void start() {}$/;"	f	struct:mtl::utility::papi_t
start	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    size_type start() const { return my_start; } $/;"	f	class:mtl::srange
start_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    index_vector_type  	start_block, end_block;$/;"	m	class:mtl::mat::block_diagonal2D
starts	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<size_type>  starts;$/;"	m	class:mtl::mat::compressed2D
starts	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    std::vector<size_type>&             starts;$/;"	m	struct:mtl::mat::compressed2D_inserter
starttime_	CS207/Util.hpp	/^  time_point starttime_;$/;"	m	class:CS207::Clock
static_bool	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    typedef mtl::traits::is_static<dim_type>       static_bool;$/;"	t	struct:mtl::mat::base_matrix
static_is_identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/is_identity.hpp	/^struct static_is_identity$/;"	s	namespace:itl::pc
static_is_identity	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/is_identity.hpp	/^struct static_is_identity<itl::pc::identity<Matrix, Value> >$/;"	s	namespace:itl::pc
static_num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef associated_type static_num_cols;$/;"	t	struct:mtl::ConstantSizeAlgebraicCollection
static_num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^struct static_num_cols {$/;"	s	namespace:mtl
static_num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^struct static_num_cols< fixed::dimensions<Rows, Cols> >$/;"	s	namespace:mtl
static_num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^struct static_num_cols< vec::fixed::dimension<Size> >$/;"	s	namespace:mtl
static_num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^struct static_num_cols<Value[Rows][Cols]>$/;"	s	namespace:mtl
static_num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^struct static_num_cols<Value[Size]>$/;"	s	namespace:mtl
static_num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^struct static_num_cols<mtl::mat::compressed2D<V, P> > $/;"	s	namespace:mtl
static_num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^struct static_num_cols<mtl::mat::dense2D<V, P> > $/;"	s	namespace:mtl
static_num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^struct static_num_cols<mtl::mat::morton_dense<V, M, P> > $/;"	s	namespace:mtl
static_num_cols	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^struct static_num_cols<mtl::vec::dense_vector<V, P> > $/;"	s	namespace:mtl
static_num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef associated_type static_num_rows;$/;"	t	struct:mtl::ConstantSizeAlgebraicCollection
static_num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^struct static_num_rows {$/;"	s	namespace:mtl
static_num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^struct static_num_rows< fixed::dimensions<Rows, Cols> >$/;"	s	namespace:mtl
static_num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^struct static_num_rows< vec::fixed::dimension<Size> >$/;"	s	namespace:mtl
static_num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^struct static_num_rows<Value[Rows][Cols]>$/;"	s	namespace:mtl
static_num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^struct static_num_rows<Value[Size]>$/;"	s	namespace:mtl
static_num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^struct static_num_rows<mtl::mat::compressed2D<V, P> > $/;"	s	namespace:mtl
static_num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^struct static_num_rows<mtl::mat::dense2D<V, P> > $/;"	s	namespace:mtl
static_num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^struct static_num_rows<mtl::mat::morton_dense<V, M, P> > $/;"	s	namespace:mtl
static_num_rows	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^struct static_num_rows<mtl::vec::dense_vector<V, P> > $/;"	s	namespace:mtl
static_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef associated_type static_size;$/;"	t	struct:mtl::ConstantSizeAlgebraicCollection
static_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_size.hpp	/^struct static_size {$/;"	s	namespace:mtl
static_switch_dmat_dmat_mult_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^struct static_switch_dmat_dmat_mult_t$/;"	s	namespace:mtl
static_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef typename mult_assign_mode<FunctorStatic, Assign>::type               static_type;$/;"	t	struct:mtl::assign::mult_assign_mode
static_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^    struct static_vector$/;"	s	namespace:mtl
static_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^    struct static_vector<ValueType, FirstValue>$/;"	s	namespace:mtl
static_vector	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/VARIADIC_TEMPLATE_CHECK.cpp	/^struct static_vector$/;"	s	file:
static_vector	MTL-4.0.9555-Linux/usr/share/mtl/tools/cmake/VARIADIC_TEMPLATE_CHECK.cpp	/^struct static_vector<ValueType, FirstValue>$/;"	s	file:
static_vector_get	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^	struct static_vector_get$/;"	s	namespace:mtl::impl
std	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^namespace std {$/;"	n
std	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/extended_complex.hpp	/^namespace std {$/;"	n
std	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/std_output_operator.hpp	/^namespace std {$/;"	n
std	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^namespace std {$/;"	n
std_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct std_vector$/;"	s	namespace:mtl::tag
step	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	/^    static unsigned const step= MaxSteps - 1;$/;"	m	struct:mtl::multi_action_helper
step	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/multi_action_block.hpp	/^    static unsigned const step= MaxSteps - RemainingSteps;$/;"	m	struct:mtl::multi_action_helper
straight_dmat_dmat_mult_limit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t straight_dmat_dmat_mult_limit= 1000;$/;"	m	namespace:mtl::mat
straight_dmat_dmat_mult_limit	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/config.hpp	/^	const std::size_t straight_dmat_dmat_mult_limit= MTL_STRAIGHT_DMAT_DMAT_MULT_LIMIT;$/;"	m	namespace:mtl::mat
stretch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^void compressed2D_inserter<Elt, Parameters, Updater>::stretch()$/;"	f	class:mtl::mat::compressed2D_inserter
strict_lower	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_lower.hpp	/^    struct strict_lower$/;"	s	namespace:mtl::mat::traits
strict_lower	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_lower.hpp	/^inline strict_lower(const Matrix& A)$/;"	f	class:mtl::mat::traits::strict_lower
strict_upper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_upper.hpp	/^    struct strict_upper$/;"	s	namespace:mtl::mat::traits
strict_upper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_upper.hpp	/^inline strict_upper(const Matrix& A)$/;"	f	class:mtl::mat::traits::strict_upper
stride	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    std::size_t stride;$/;"	m	struct:mtl::detail::strided_base_cursor
stride	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    size_type stride() const { return my_stride; } \/\/\/ Stride [advanced]$/;"	f	class:mtl::mat::ell_matrix
stride	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    size_type stride() const { return my_stride; }$/;"	f	class:mtl::srange
stride	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    size_type stride() const { return 1 ; }$/;"	f	class:mtl::vec::dense_vector
stride	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    size_type stride() const { 	return ref.stride(); }$/;"	f	struct:mtl::vec::map_view
stride	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    size_type stride() const { return my_stride ; }$/;"	f	class:mtl::vec::strided_vector_ref
strided_base_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    strided_base_cursor () {} $/;"	f	struct:mtl::detail::strided_base_cursor
strided_base_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^    strided_base_cursor (key_type key, std::size_t stride) $/;"	f	struct:mtl::detail::strided_base_cursor
strided_base_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/strided_base_cursor.hpp	/^template <class Key> struct strided_base_cursor $/;"	s	namespace:mtl::detail
strided_col_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct strided_col_vector$/;"	s	namespace:mtl::tag
strided_dense_el_const_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    strided_dense_el_const_iterator(key_type me, size_t stride) : super(me, stride) {}$/;"	f	struct:mtl::strided_dense_el_const_iterator
strided_dense_el_const_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    strided_dense_el_const_iterator(mtl::mat::dense2D<Value, Parameters> const& ma, size_t r, size_t c, size_t stride)$/;"	f	struct:mtl::strided_dense_el_const_iterator
strided_dense_el_const_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^struct strided_dense_el_const_iterator$/;"	s	namespace:mtl
strided_dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	/^    strided_dense_el_cursor (const_pointer_type me, size_t stride) : super(me, stride) {}$/;"	f	struct:mtl::strided_dense_el_cursor
strided_dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	/^    strided_dense_el_cursor(mtl::mat::dense2D<Value, Parameters> const& ma, size_t r, size_t c, size_t stride)$/;"	f	struct:mtl::strided_dense_el_cursor
strided_dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	/^    strided_dense_el_cursor(super const& x) : super(x) {}$/;"	f	struct:mtl::strided_dense_el_cursor
strided_dense_el_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	/^struct strided_dense_el_cursor : public detail::strided_base_cursor<const Value*> $/;"	s	namespace:mtl
strided_dense_el_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    strided_dense_el_iterator(key_type me, size_t stride) : super(me, stride) {}$/;"	f	struct:mtl::strided_dense_el_iterator
strided_dense_el_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    strided_dense_el_iterator(mtl::mat::dense2D<Value, Parameters>& ma, size_t r, size_t c, size_t stride)$/;"	f	struct:mtl::strided_dense_el_iterator
strided_dense_el_iterator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^struct strided_dense_el_iterator$/;"	s	namespace:mtl
strided_element_range_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct strided_element_range_generator$/;"	s	namespace:mtl::traits::detail
strided_row_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct strided_row_vector$/;"	s	namespace:mtl::tag
strided_vector_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    strided_vector_ref( size_type length, pointer start_address, size_type stride= 1)$/;"	f	class:mtl::vec::strided_vector_ref
strided_vector_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    strided_vector_ref(const strided_vector_ref& other, clone_ctor)$/;"	f	class:mtl::vec::strided_vector_ref
strided_vector_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^class strided_vector_ref$/;"	c	namespace:mtl::vec
string_to_enum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/string_to_enum.hpp	/^EnumType inline string_to_enum(const std::string& s, const Array& l, EnumType)$/;"	f	namespace:mtl
sub	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    crs_cvec_mult_block<Index+1, BSize, SizeType> sub;$/;"	m	struct:mtl::mat::crs_cvec_mult_block
sub	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    sub_type    sub;$/;"	m	struct:mtl::multi_constant_from_array
sub	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    sub_type sub;$/;"	m	struct:mtl::multi_tmp
sub_divisible	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct sub_divisible : virtual qsub_divisible {};$/;"	s	namespace:mtl::tag
sub_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sub_matrix.hpp	/^sub_matrix(Matrix const& matrix, $/;"	f	namespace:mtl::mat
sub_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sub_matrix.hpp	/^sub_matrix(Matrix& matrix, $/;"	f	namespace:mtl::mat
sub_matrix_constructor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void sub_matrix_constructor(MatrixSrc& matrix, size_type begin_r, size_type end_r, $/;"	f	class:mtl::mat::dense2D
sub_matrix_constructor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    void sub_matrix_constructor(MatrixSrc&, size_type, size_type, $/;"	f	class:mtl::mat::dense2D
sub_matrix_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	sub_matrix_cursor(int i, Matrix const& c)$/;"	f	struct:mtl::traits::detail::sub_matrix_cursor
sub_matrix_cursor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^    struct sub_matrix_cursor$/;"	s	namespace:mtl::traits::detail
sub_matrix_flatcat	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^struct sub_matrix_flatcat$/;"	s	namespace:mtl::traits
sub_matrix_pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    sub_matrix_pc(const tag_type& tags, const Matrix& A)$/;"	f	class:itl::pc::sub_matrix_pc
sub_matrix_pc	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^class sub_matrix_pc$/;"	c	namespace:itl::pc
sub_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^struct sub_matrix_t< mtl::mat::banded_view<Matrix> >$/;"	s	namespace:mtl::mat
sub_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    struct sub_matrix_t<dense2D<Value, Parameters> >$/;"	s	namespace:mtl::mat
sub_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct sub_matrix_t< mtl::mat::conj_view<Matrix> >$/;"	s	namespace:mtl::mat
sub_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct sub_matrix_t< mtl::mat::divide_by_view<Matrix, Divisor> >$/;"	s	namespace:mtl::mat
sub_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct sub_matrix_t< mtl::mat::map_view<Functor, Matrix> >$/;"	s	namespace:mtl::mat
sub_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct sub_matrix_t< mtl::mat::rscaled_view<Matrix, RScaling> >$/;"	s	namespace:mtl::mat
sub_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^struct sub_matrix_t< mtl::mat::scaled_view<Scaling, Matrix> >$/;"	s	namespace:mtl::mat
sub_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    struct sub_matrix_t<morton_dense<Value, BitMask, Parameters> >$/;"	s	namespace:mtl::mat
sub_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^struct sub_matrix_t< transposed_view<Matrix> >$/;"	s	namespace:mtl::mat
sub_matrix_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sub_matrix.hpp	/^struct sub_matrix_t$/;"	s	namespace:mtl::mat
sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef mtl::mat::banded_view<ref_sub_type>                                     sub_matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^        typedef dense2D<Value, para_type>       sub_matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef self                              sub_matrix_type;  $/;"	t	class:mtl::mat::dense2D
sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^        typedef matrix_type                     sub_matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef transposed_view<typename sub_matrix_t<tmp_type>::sub_matrix_type>       sub_matrix_type;$/;"	t	struct:mtl::mat::sub_matrix_t
sub_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/matrix_recursator.hpp	/^    typedef typename sub_matrix_t<Matrix>::sub_matrix_type        sub_matrix_type;$/;"	t	struct:mtl::mat::recursator
sub_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    typedef multi_constant_from_array<Index+1, Size, Value> sub_type;$/;"	t	struct:mtl::multi_constant_from_array
sub_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    typedef multi_tmp<Size-1, Value> sub_type;$/;"	t	struct:mtl::multi_tmp
sub_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^inline sub_vector(const dense_vector<Value, Parameters>& v, $/;"	f	namespace:mtl::vec
sub_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^inline sub_vector(dense_vector<Value, Parameters>& v, $/;"	f	namespace:mtl::vec
sub_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^inline sub_vector(const strided_vector_ref<Value, Parameters>& v, $/;"	f	namespace:mtl::vec
sub_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^inline sub_vector(strided_vector_ref<Value, Parameters>& v, $/;"	f	namespace:mtl::vec
subm_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    struct subm_assign$/;"	s	namespace:mtl::assign::detail
subm_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    struct subm_assign<assign_sum>$/;"	s	namespace:mtl::assign::detail
sum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sum.hpp	/^	inline sum(const Vector& vector, tag::vector)$/;"	f	class:mtl::impl::Collection
sum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sum.hpp	/^inline sum(const Value& value)$/;"	f	class:mtl::Collection
sum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    Value sum() { return 0; }$/;"	f	struct:mtl::multi_tmp
sum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    Value sum() { return value + sub.sum(); }$/;"	f	struct:mtl::multi_tmp
sum_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^struct sum_functor$/;"	s	namespace:mtl::vec
sum_of_sizes	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	struct sum_of_sizes$/;"	s	namespace:mtl::detail
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/cyclic_iteration.hpp	/^      typedef basic_iteration<Real> super;$/;"	t	class:itl::cyclic_iteration
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef base_matrix<Elt, Parameters>             super;$/;"	t	class:mtl::mat::compressed2D
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef base_matrix<Value, Parameters>                              super;$/;"	t	class:mtl::mat::coordinate2D
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef base_sub_matrix<Value, Parameters>                super;$/;"	t	class:mtl::mat::dense2D
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef base_matrix<Value, Parameters>             super;$/;"	t	class:mtl::mat::ell_matrix
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef base_sub_matrix<Elt, Parameters>                           super;$/;"	t	class:mtl::mat::morton_dense
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    typedef base_matrix<typename Collection<Vector>::value_type, parameters<> >           super;$/;"	t	class:mtl::mat::multi_vector
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef base_matrix<Value, Parameters>             super;$/;"	t	class:mtl::mat::sparse_banded
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^    typedef detail::base_cursor<const Value*> super;$/;"	t	struct:mtl::dense_el_cursor
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	/^    typedef detail::strided_base_cursor<const Value*>    super;$/;"	t	struct:mtl::strided_dense_el_cursor
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    typedef detail::strided_base_cursor<key_type>     super;$/;"	t	struct:mtl::strided_dense_el_const_iterator
super	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_iterator.hpp	/^    typedef detail::strided_base_cursor<key_type>     super;$/;"	t	struct:mtl::strided_dense_el_iterator
super	poisson.cpp	/^		typedef cyclic_iteration<Real, std::ostream> super;$/;"	t	class:itl::visual_iteration	file:
super_type	Examples/iterator_adaptor.cpp	/^  typedef this_type                             super_type;$/;"	t	class:iterator_adaptor	file:
super_type	Examples/iterator_adaptor_boost.cpp	/^  typedef my_position_iterator::iterator_adaptor_ super_type;$/;"	t	struct:my_position_iterator	file:
super_type	Examples/iterator_adaptor_boost.cpp	/^  typedef my_stride_iterator::iterator_adaptor_ super_type;$/;"	t	struct:my_stride_iterator	file:
super_type	Examples/iterator_adaptor_boost.cpp	/^  typedef my_transform_iterator::iterator_adaptor_ super_type;$/;"	t	struct:my_transform_iterator	file:
suppress_resume	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    void suppress_resume(bool s) { my_suppress= s; }$/;"	f	class:itl::basic_iteration
surface_	CS207/SDLViewer.hpp	/^  SDL_Surface* surface_;$/;"	m	class:CS207::SDLViewer
sv_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    typedef std::vector<size_type>          sv_type;$/;"	t	class:mtl::vec::sparse_vector
svd	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/svd.hpp	/^inline svd(const Matrix& A, double tol= 10e-10)$/;"	f	class:mtl::mat::boost
svd	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/svd.hpp	/^inline void svd(const Matrix& A, Matrix& S, Matrix& V, Matrix& D, double tol= 10e-10)$/;"	f	namespace:mtl::mat
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sorting.hpp	/^inline void swap(Key& key0, Val& val0, Key& key1, Val& val1) {$/;"	f
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^	friend void swap(self& x, self& y) $/;"	f	struct:mtl::detail::alignment_helper
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^	friend void swap(self&, self&) {}$/;"	f	struct:mtl::detail::alignment_helper
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    friend void swap(self& x, self& y) $/;"	f	struct:mtl::detail::size_helper
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    friend void swap(self& x, self& y)$/;"	f	struct:mtl::detail::contiguous_memory_block
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    friend void swap(self&, self&) {}$/;"	f	struct:mtl::detail::size_helper
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    friend void swap(self& x, self& y)$/;"	f	struct:mtl::mat::base_matrix
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    friend void swap(self& x, self& y)$/;"	f	struct:mtl::mat::base_sub_matrix
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    friend void swap(self& matrix1, self& matrix2)$/;"	f	class:mtl::mat::compressed2D
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    friend void swap(self& matrix1, self& matrix2)$/;"	f	class:mtl::mat::dense2D
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^inline void swap(element_structure<ValueType>& x, element_structure<ValueType>& y)$/;"	f	namespace:mtl::mat
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    friend void swap(self& matrix1, self& matrix2)$/;"	f	class:mtl::mat::morton_dense
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^inline void swap(const zip_ref<T, U>& x, const zip_ref<T, U>& y)$/;"	f	namespace:mtl::utility
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    friend void swap(self& vector1, self& vector2)$/;"	f	class:mtl::vec::dense_vector
swap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    friend void swap(self& vector1, self& vector2)$/;"	f	class:mtl::vec::strided_vector_ref
swap_	Graph.hpp	/^  void swap_(idx_type a, idx_type b) const {$/;"	f	class:Graph
swap_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/swap_row.hpp	/^	inline void swap_row(Matrix& A, typename Collection<Matrix>::size_type i,$/;"	f	namespace:mtl::mat::detail
swap_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/swap_row.hpp	/^	inline void swap_row(Matrix&, typename Collection<Matrix>::size_type,$/;"	f	namespace:mtl::mat::detail
swap_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/swap_row.hpp	/^    inline swap_row(Matrix& A, typename Collection<Matrix>::size_type i,$/;"	f	class:mtl::mat::mtl::traits::enable_if_matrix
swap_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/swap_row.hpp	/^    inline swap_row(Vector& v, typename Collection<Vector>::size_type i,$/;"	f	class:mtl::vec::mtl::traits::enable_if_vector
symmetric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    enum symmetry {general, symmetric, skew, Hermitian} my_symmetry;$/;"	e	enum:mtl::io::matrix_market_istream::symmetry
symmetric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct symmetric {};$/;"	s	namespace:mtl
symmetry	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    enum symmetry {general, symmetric, skew, Hermitian} my_symmetry;$/;"	g	class:mtl::io::matrix_market_istream
symmetry	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::string symmetry(const Matrix&) const { return std::string("general\\n"); }$/;"	f	class:mtl::io::matrix_market_ostream
symmetry	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	struct symmetry {};$/;"	s	namespace:mtl::type_para
symp_euler_step	mass_spring.cpp	/^double symp_euler_step(G& g, double t, double dt, F force) {$/;"	f
tag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace tag {$/;"	n	namespace:mtl
tag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/glas_tag.hpp	/^namespace glas { namespace tag {$/;"	n	namespace:glas
tag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^	typedef Tag                  tag;$/;"	t	struct:mtl::traits::range_generator
tag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^namespace mtl { namespace tag {$/;"	n	namespace:mtl
tag	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^namespace tag {$/;"	n	namespace:mtl
tag_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    typedef mtl::dense_vector<bool>                                               tag_type;$/;"	t	class:itl::pc::sub_matrix_pc
tags	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^    tag_type          tags;$/;"	m	class:itl::pc::sub_matrix_pc
tail	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^	typedef static_vector<ValueType, Values...>              tail;$/;"	t	struct:mtl::static_vector
terminate	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    int terminate(const T& r) { finished(r); return error; }$/;"	f	class:itl::basic_iteration
test	mass_spring.cpp	/^	int test;$/;"	m	struct:EdgeData	file:
test_ostream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^    test_ostream(std::ostream& out = std::cout) : out(out) {}$/;"	f	struct:mtl::io::test_ostream
test_ostream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^struct test_ostream $/;"	s	namespace:mtl::io
text	Examples/proxy_example.cpp	/^    std::string text(){$/;"	f	class:SimpleSet::SimpleElement
text	Examples/proxy_example.cpp	/^    std::string text;   \/\/ The text held by an element$/;"	m	struct:SimpleSet::internal_element	file:
tfqmr	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^int tfqmr(const Matrix &A, Vector &x, const Vector &b, const LeftPreconditioner &L, $/;"	f	namespace:itl
tfqmr_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^    explicit tfqmr_solver(const LinearOperator& A) : A(A), L(A), R(A) {}$/;"	f	class:itl::tfqmr_solver
tfqmr_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^    tfqmr_solver(const LinearOperator& A, const Preconditioner& L) : A(A), L(L), R(A) {}$/;"	f	class:itl::tfqmr_solver
tfqmr_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^    tfqmr_solver(const LinearOperator& A, const Preconditioner& L, const RightPreconditioner& R) $/;"	f	class:itl::tfqmr_solver
tfqmr_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/krylov/tfqmr.hpp	/^class tfqmr_solver$/;"	c	namespace:itl
tfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace tfunctor {$/;"	n	namespace:mtl
tfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^namespace mtl { namespace tfunctor {$/;"	n	namespace:mtl
tfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^namespace mtl { namespace tfunctor {$/;"	n	namespace:mtl
tfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^    namespace tfunctor {$/;"	n	namespace:mtl
tfunctor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^namespace mtl { namespace tfunctor {$/;"	n	namespace:mtl
this_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    typedef element_structure<ValueType> this_type;$/;"	t	class:mtl::mat::element_structure
tick_type	CS207/Util.hpp	/^  typedef typename duration::rep             tick_type;$/;"	t	class:CS207::Clock
time_point	CS207/Util.hpp	/^  typedef typename clock::time_point         time_point;$/;"	t	class:CS207::Clock
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct times$/;"	s	namespace:mtl::sfunctor
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<linear, linear> : times<linear_cached, linear_cached> {};$/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<linear_cached, linear> : times<linear_cached, linear_cached> {};$/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<linear_cached, linear_cached> $/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<log_n, linear> : times<log_n, linear_cached> {};$/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<log_n, linear_cached> $/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<log_n, log_n> $/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<log_n, n_log_n> $/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<log_n, n_polylog_n> : times<log_n, n_log_n> {};$/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<log_n, polylog_n> : times<log_n, log_n> {};$/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<polylog_n, linear> : times<polylog_n, linear_cached> {};$/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<polylog_n, linear_cached> $/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<polylog_n, n_log_n> : times<polylog_n, linear_cached> {};$/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<polylog_n, n_polylog_n> : times<polylog_n, linear_cached> {};$/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <> struct times<polylog_n, polylog_n> $/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <typename X, typename Y> struct times $/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <typename Y> struct times<cached, Y> $/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    template <typename Y> struct times<constant, Y> $/;"	s	namespace:mtl::complexity_classes::detail
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct times$/;"	s	namespace:mtl::complexity_classes
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^struct times<X, infinite>$/;"	s	namespace:mtl::complexity_classes
times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^template <typename X> struct times<infinite, X> : times<X, infinite> {};$/;"	s	namespace:mtl::complexity_classes
times_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sfunctor.hpp	/^struct times_assign$/;"	s	namespace:mtl::sfunctor
times_sum	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^struct times_sum$/;"	s	namespace:mtl::assign
tmp	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^	static long int const tmp = sqrt<x>::value,$/;"	m	struct:meta_math::impl::max_prime_compare
tmp	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/log_2.hpp	/^    static const unsigned long tmp= X >> 1, value= log_2<tmp>::value + 1;$/;"	m	struct:meta_math::log_2
tmp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    static T const tmp = BitMask >> 1;$/;"	m	struct:mtl::dilated::last_bit_helper
tmp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^    Scalar         tmp[4];$/;"	m	struct:mtl::vec::dot_index_evaluator
tmp	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^    Scalar         tmp[4];$/;"	m	struct:mtl::vec::reduction_index_evaluator
tmp2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^      static const unsigned tmp2= Value == 0 || Value == 4 ? Value | 1 : Value, \/\/ if matrix ref or transposed, make it const$/;"	m	struct:mtl::traits::view_normalize_const
tmp_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef typename boost::remove_const<Matrix>::type                            tmp_type;$/;"	t	struct:mtl::mat::sub_matrix_t
to_end_	Graph.hpp	/^	EdgeIterator& to_end_() {$/;"	f	class:Graph::EdgeIterator
to_end_	Graph.hpp	/^	IncidentIterator& to_end_() {$/;"	f	class:Graph::IncidentIterator
to_lower	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void to_lower(std::string& s) const$/;"	f	class:mtl::io::matrix_market_istream
to_masked	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    T to_masked(T x) $/;"	f	struct:mtl::dilated::masked_dilation_tables
to_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/irange.hpp	/^	size_type to_range(size_type i) const$/;"	f	class:mtl::irange
to_range	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/srange.hpp	/^    size_type to_range(size_type i) const$/;"	f	class:mtl::srange
to_unmasked	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    T to_unmasked(T x) $/;"	f	struct:mtl::dilated::masked_dilation_tables
tol	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    Real tol() const { return rtol_; }$/;"	f	class:itl::basic_iteration
tooth_length	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	/^	static const unsigned long base_case_bits= 5, tooth_length = 1;$/;"	m	struct:mtl::detail::opteron_shark_teeth
top	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	value_type& top() {$/;"	f	class:utils::binary_heap
totally_ordered	CS207/Util.hpp	/^struct totally_ordered$/;"	s
tout	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/test_ostream.hpp	/^static test_ostream tout;$/;"	m	namespace:mtl::io
trace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trace.hpp	/^inline trace(const Matrix& matrix)$/;"	f	class:mtl::mat::Collection
tracer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^	vampir_trace<3033> tracer;$/;"	m	struct:mtl::traits::size
tracer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^    vampir_trace<2031> tracer;$/;"	m	struct:mtl::traits::size
tracer	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_size.hpp	/^	vampir_trace<1007> tracer;$/;"	m	struct:mtl::static_size
trafo	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    Matrix& trafo(const Matrix& G, size_type k)$/;"	f	class:mtl::mat::givens
trafo	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    Matrix& trafo(size_type k)$/;"	f	class:mtl::mat::givens
trafo	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    Vector& trafo(size_type k)$/;"	f	class:mtl::vec::givens
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^namespace mtl { namespace traits { namespace detail {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/arprec.hpp	/^    namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/bands.hpp	/^namespace traits {$/;"	n	namespace:mtl::mat
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^namespace mtl { namespace traits { namespace detail {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/lower.hpp	/^namespace traits {$/;"	n	namespace:mtl::mat
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/permutation.hpp	/^namespace traits {$/;"	n	namespace:mtl::mat
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder.hpp	/^namespace traits {$/;"	n	namespace:mtl::mat
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_lower.hpp	/^namespace traits {$/;"	n	namespace:mtl::mat
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_upper.hpp	/^namespace traits {$/;"	n	namespace:mtl::mat
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/upper.hpp	/^namespace traits {$/;"	n	namespace:mtl::mat
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjoint.hpp	/^namespace traits {$/;"	n	namespace:mtl::mat
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/div_result.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^namespace traits {$/;"	n	namespace:mtl::mat
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/resource.hpp	/^    namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/algebraic_category.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/different_non_complex.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/domain.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/enable_if.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval_dense.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/extended_complex.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/flatcat.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/gradient.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluator.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_composable_vector.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_distributed.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_lazy.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_multi_vector_expr.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_row_major.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_static.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_vector_reduction.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/is_what.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/linear_operator.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/lu_matrix_type.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/omp_size_type.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/pos_type.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^namespace mtl { namespace traits {    $/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_generator.hpp	/^namespace traits$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_orientation.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/true_copy.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/unroll_size1.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/updater_to_assigner.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/viewed_collection.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/with_unroll1.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^namespace mtl { namespace traits {$/;"	n	namespace:mtl
traits	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unit_vector.hpp	/^namespace traits {$/;"	n	namespace:mtl
trans	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^	struct trans {};$/;"	s	namespace:mtl::mat::detail
trans	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^	struct trans<Matrix, tag::matrix, IsConst>$/;"	s	namespace:mtl::mat::detail
trans	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^    inline trans(Value& v)$/;"	f	class:mtl::mat::detail::trans
trans	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^    inline trans(Vector& v)$/;"	f	class:mtl::vec::transposed_vector
trans	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^    inline trans(const Value& v)$/;"	f	class:mtl::mat::detail::trans
trans	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^    inline trans(const Vector& v)$/;"	f	class:mtl::vec::transposed_vector
trans_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    typedef transposed_view<Matrix>                                trans_base;$/;"	t	struct:mtl::mat::hermitian_view
transpose	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	transposed_type transpose() $/;"	f	struct:mtl::non_fixed::dimensions
transpose	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	transposed_type transpose() const $/;"	f	struct:mtl::fixed::dimensions
transposed_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^		transposed_col(mtl::mat::transposed_view<Ref> const& transposed_matrix) $/;"	f	struct:mtl::traits::detail::transposed_col
transposed_col	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^        struct transposed_col$/;"	s	namespace:mtl::traits::detail
transposed_matrix_parameter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^struct transposed_matrix_parameter<mat::parameters<O, I, D, S, ST> >$/;"	s	namespace:mtl::traits
transposed_matrix_parameter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^template <class T> struct transposed_matrix_parameter {};$/;"	s	namespace:mtl::traits
transposed_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^struct transposed_matrix_type<mat::compressed2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
transposed_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^struct transposed_matrix_type<mat::dense2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
transposed_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^struct transposed_matrix_type<mat::morton_dense<Value, Mask, Parameters> >$/;"	s	namespace:mtl::traits
transposed_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^template <class T> struct transposed_matrix_type {};$/;"	s	namespace:mtl::traits
transposed_multi_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct transposed_multi_vector$/;"	s	namespace:mtl::tag
transposed_orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_orientation.hpp	/^template <class T> struct transposed_orientation {};$/;"	s	namespace:mtl::traits
transposed_orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_orientation.hpp	/^template<> struct transposed_orientation<tag::col_major> $/;"	s	namespace:mtl::traits
transposed_orientation	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_orientation.hpp	/^template<> struct transposed_orientation<tag::row_major> $/;"	s	namespace:mtl::traits
transposed_parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^    struct transposed_parameters$/;"	s	namespace:mtl::vec
transposed_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    transposed_row(mtl::mat::transposed_view<Ref> const& transposed_matrix) $/;"	f	struct:mtl::traits::detail::transposed_row
transposed_row	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	struct transposed_row$/;"	s	namespace:mtl::traits::detail
transposed_sparse_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^struct transposed_sparse_matrix_type<mat::banded_view<Matrix> >$/;"	s	namespace:mtl::traits
transposed_sparse_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^struct transposed_sparse_matrix_type<mat::compressed2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
transposed_sparse_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^struct transposed_sparse_matrix_type<mat::transposed_view<const mat::compressed2D<Value, Parameters> > >$/;"	s	namespace:mtl::traits
transposed_sparse_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^struct transposed_sparse_matrix_type<mat::transposed_view<mat::compressed2D<Value, Parameters> > >$/;"	s	namespace:mtl::traits
transposed_sparse_matrix_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^template <class T> struct transposed_sparse_matrix_type {};$/;"	s	namespace:mtl::traits
transposed_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	typedef dimensions transposed_type;$/;"	t	struct:mtl::non_fixed::dimensions
transposed_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dimension.hpp	/^	typedef dimensions<Cols, Rows> transposed_type;$/;"	t	struct:mtl::fixed::dimensions
transposed_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^    struct transposed_vector {};$/;"	s	namespace:mtl::vec
transposed_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^    struct transposed_vector<dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::vec
transposed_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^    struct transposed_vector<strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::vec
transposed_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    transposed_view (const boost::shared_ptr<Matrix>& p) : my_copy(p), ref(*p) {}$/;"	f	struct:mtl::mat::transposed_view
transposed_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    transposed_view (const self& that) : ref(that.ref) { assert(that.my_copy.use_count() == 0); }$/;"	f	struct:mtl::mat::transposed_view
transposed_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    transposed_view (ref_type ref) : ref(ref) {}$/;"	f	struct:mtl::mat::transposed_view
transposed_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    transposed_view (self&& that) : my_copy(std::move(that.my_copy)), ref(that.ref) {}$/;"	f	struct:mtl::mat::transposed_view
transposed_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^struct transposed_view $/;"	s	namespace:mtl::mat
transposed_view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^	    mtl::mat::transposed_view<matrix_type>,$/;"	t	class:mtl::traits::matrix_compose_view::mtl::mat
tri_edge	Mesh.hpp	/^	typedef typename TriGraph::edge_type tri_edge;$/;"	t	class:Mesh
tri_node	Mesh.hpp	/^	typedef typename TriGraph::node_type tri_node;$/;"	t	class:Mesh
tri_node_iterator	Mesh.hpp	/^			typedef typename TriGraph::NodeIterator tri_node_iterator;$/;"	t	class:Mesh::TriangleIterator
tri_schur	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void tri_schur(Recursator E, Recursator W, Visitor vis)$/;"	f	namespace:mtl::mat::with_recursator
tri_schur_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void tri_schur_base(MatrixSE & SE, const MatrixSW & SW) const$/;"	f	struct:mtl::mat::recursive_cholesky_visitor_t
tri_schur_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void tri_schur_base(MatrixSE & SE, const MatrixSW & SW)$/;"	f	namespace:mtl::mat::with_bracket
tri_schur_base_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    struct tri_schur_base_t$/;"	s	namespace:mtl::mat::with_bracket
tri_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void tri_solve(Recursator S, Recursator N, Visitor vis)$/;"	f	namespace:mtl::mat::with_recursator
tri_solve_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void tri_solve_base(MatrixSW & SW, const MatrixNW & NW) const$/;"	f	struct:mtl::mat::recursive_cholesky_visitor_t
tri_solve_base	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    void tri_solve_base(MatrixSW & SW, const MatrixNW & NW)$/;"	f	namespace:mtl::mat::with_bracket
tri_solve_base_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^    struct tri_solve_base_t$/;"	s	namespace:mtl::mat::with_bracket
triangle_data	Mesh.hpp	/^		triangle_data() {std::cerr << "made empty triangle data " << std::endl;}$/;"	f	struct:Mesh::triangle_data
triangle_data	Mesh.hpp	/^		triangle_data(vert_node n1, vert_node n2, vert_node n3, UserTriData d = UserTriData()) :$/;"	f	struct:Mesh::triangle_data
triangle_data	Mesh.hpp	/^	typedef struct triangle_data {$/;"	s	class:Mesh
triangle_data	Mesh.hpp	/^	} triangle_data;$/;"	t	class:Mesh	typeref:struct:Mesh::triangle_data
triangle_graph_	Mesh.hpp	/^	TriGraph triangle_graph_;$/;"	m	class:Mesh
triangle_iterator	Mesh.hpp	/^	typedef TriangleIterator triangle_iterator;$/;"	t	class:Mesh
triangles_	Mesh.hpp	/^		std::set<Triangle> triangles_;$/;"	m	struct:Mesh::vertex_data
triangles_begin	Mesh.hpp	/^	triangle_iterator triangles_begin() const {$/;"	f	class:Mesh
triangles_end	Mesh.hpp	/^	triangle_iterator triangles_end() const {$/;"	f	class:Mesh
tril	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_lower.hpp	/^inline tril(const Matrix& A, long d= 0)$/;"	f	class:mtl::mat::traits::strict_lower
triu	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_upper.hpp	/^inline triu(const Matrix& A, long d= 0)$/;"	f	class:mtl::mat::traits::strict_upper
trivial_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    explicit trivial_inserter(matrix_type& matrix, size_type) : matrix(matrix) {}$/;"	f	struct:mtl::detail::trivial_inserter
trivial_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^struct trivial_inserter$/;"	s	namespace:mtl::detail
true_	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef boost::mpl::true_                         true_;$/;"	t	class:mtl::mat::umfpack::solver
true_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/arprec.hpp	/^	struct true_copy<mp_real_temp>$/;"	s	namespace:mtl::traits
true_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/true_copy.hpp	/^struct true_copy$/;"	s	namespace:mtl::traits
true_papi	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    const static bool true_papi = false;$/;"	m	struct:mtl::utility::papi_t
true_papi	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    const static bool true_papi = true;$/;"	m	class:mtl::utility::papi_t
two_norm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/two_norm.hpp	/^	inline two_norm(const Value& value)$/;"	f	class:mtl::vec::RealMagnitude
two_norm_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^struct two_norm_functor$/;"	s	namespace:mtl::vec
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    typedef T type;$/;"	t	struct:math::Magnitude
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    typedef T type;$/;"	t	struct:math::magnitude_type_trait
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/old_concepts.hpp	/^    typename type = T;$/;"	m	struct:math::Magnitude
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/max.hpp	/^    typedef long int type;$/;"	t	struct:meta_math::max
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/min.hpp	/^  typedef long int type;$/;"	t	struct:meta_math::min
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/sqrt.hpp	/^	typedef long int type;$/;"	t	struct:meta_math::impl::sqrt_impl
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	/^    typedef typename T::index_type type;$/;"	t	struct:mtl::index::which_index
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef Cursor              type;$/;"	t	struct:mtl::traits::detail::all_offsets_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef Cursor              type;$/;"	t	struct:mtl::traits::detail::dense_element_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef Traversor                   type;$/;"	t	struct:mtl::traits::detail::strided_element_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef matrix_element_cursor<ref_type, 0> type;$/;"	t	struct:mtl::traits::detail::all_rows_in_col_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef matrix_element_cursor<ref_type, 1>               type;$/;"	t	struct:mtl::traits::detail::all_cols_in_row_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef sub_matrix_cursor<Matrix, glas::tag::col, Level> type;$/;"	t	struct:mtl::traits::detail::all_cols_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef sub_matrix_cursor<Matrix, glas::tag::row, Level> type;$/;"	t	struct:mtl::traits::detail::all_rows_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/range_generator.hpp	/^	typedef typename RangeGenerator::type       type;$/;"	t	struct:mtl::traits::detail::referred_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/arprec.hpp	/^	    typedef mp_real type;$/;"	t	struct:mtl::traits::true_copy
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/arprec.hpp	/^	typedef mp_real type;$/;"	t	struct:mtl::Magnitude
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template <bool Larger> struct index_aux   { typedef int     type; };$/;"	t	struct:mtl::mat::umfpack::index_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct index_aux<true>         { typedef long type; };$/;"	t	struct:mtl::mat::umfpack::index_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<double>                	    { typedef double               type; };$/;"	t	struct:mtl::mat::umfpack::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<float>                 	    { typedef double               type; };$/;"	t	struct:mtl::mat::umfpack::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<long double>           	    { typedef double               type; };$/;"	t	struct:mtl::mat::umfpack::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<std::complex<double> > 	    { typedef std::complex<double> type; };$/;"	t	struct:mtl::mat::umfpack::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<std::complex<float> >  	    { typedef std::complex<double> type; };$/;"	t	struct:mtl::mat::umfpack::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<std::complex<long double> > { typedef std::complex<double> type; };$/;"	t	struct:mtl::mat::umfpack::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^        template<> struct index_aux<true>         { typedef UF_long type; };$/;"	t	struct:mtl::mat::umfpack::index_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	typedef detail::banded_value<Matrix>  type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	typedef detail::mapped_col<sfunctor::identity<typename Matrix::value_type>, Matrix>   type;$/;"	t	struct:mtl::traits::col
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	typedef detail::mapped_row<sfunctor::identity<typename Matrix::value_type>, Matrix>   type;$/;"	t	struct:mtl::traits::row
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/bands.hpp	/^	typedef banded_view<Matrix> type;$/;"	t	struct:mtl::mat::traits::bands
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef compressed_minor_cursor<Elt, Parameters>  type;$/;"	t	struct:mtl::traits::range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef const value_type*                                                     type;$/;"	t	struct:mtl::traits::range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef coordinate_major_cursor<Value, Parameters>   type;$/;"	t	struct:mtl::mat::coordinate_col_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef coordinate_major_cursor<Value, Parameters>   type;$/;"	t	struct:mtl::mat::coordinate_row_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef coordinate_minor_cursor<Value, Parameters>   type;$/;"	t	struct:mtl::mat::coordinate_minor_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    >::type type;  $/;"	t	struct:mtl::traits::detail::dense2D_iterator_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    typedef complexity_classes::linear type;$/;"	t	struct:mtl::traits::detail::dense2D_rc
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    typedef complexity_classes::linear_cached type;$/;"	t	struct:mtl::traits::detail::dense2D_rc
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	>::type type;  $/;"	t	struct:mtl::traits::range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	typedef Matrix type;$/;"	t	struct:mtl::mat::detail::ref_on_stack
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	typedef const Matrix& type;$/;"	t	struct:mtl::mat::detail::ref_on_stack
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^	{	typedef nonscal type;    };$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/lower.hpp	/^	typedef typename traits::bands<Matrix>::type type;$/;"	t	struct:mtl::mat::traits::lower
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	typedef detail::map_value<Functor, Matrix>  type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	typedef detail::mapped_col<Functor, Matrix>   type;$/;"	t	struct:mtl::traits::col
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	typedef detail::mapped_row<Functor, Matrix>   type;$/;"	t	struct:mtl::traits::row
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	typedef mtl::vec::map_view<Functor, Vector> type;$/;"	t	struct:mtl::mat::detail::map_vector
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    struct dummy { typedef void type; };$/;"	t	struct:mtl::mat::map_view::dummy
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    >::type type;  $/;"	t	struct:mtl::traits::detail::morton_dense_iterator_range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	typedef morton_dense_col_cursor<BitMask>                         type;$/;"	t	struct:mtl::traits::range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	typedef morton_dense_el_cursor<BitMask>  type;$/;"	t	struct:mtl::traits::range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	typedef morton_dense_row_cursor<BitMask>                         type;$/;"	t	struct:mtl::traits::range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/permutation.hpp	/^	typedef typename reorder<Value>::type  type;$/;"	t	struct:mtl::mat::traits::permutation
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^	{	typedef nonscal type;    };$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder.hpp	/^	typedef mtl::mat::compressed2D<Value, parameters<> >  type;$/;"	t	struct:mtl::mat::traits::reorder
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^	typedef mtl::mat::sparse_banded_cursor<Value, Parameters>                           type;$/;"	t	struct:mtl::traits::range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_lower.hpp	/^	typedef typename traits::bands<Matrix>::type type;$/;"	t	struct:mtl::mat::traits::strict_lower
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/strict_upper.hpp	/^	typedef typename bands<Matrix>::type type;$/;"	t	struct:mtl::mat::traits::strict_upper
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	    typedef typename generator::type         type;$/;"	t	struct:mtl::traits::detail::range_transposer_impl
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	typedef detail::transposed_col<Matrix, Matrix>  type;$/;"	t	struct:mtl::traits::col
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	typedef detail::transposed_row<Matrix, Matrix>  type;$/;"	t	struct:mtl::traits::row
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	typedef mtl::detail::const_value_from_other<mtl::mat::transposed_view<Matrix> > type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^	typedef mtl::detail::value_from_other<mtl::mat::transposed_view<Matrix> > type;$/;"	t	struct:mtl::traits::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/upper.hpp	/^	typedef typename traits::bands<Matrix>::type type;$/;"	t	struct:mtl::mat::traits::upper
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/adjoint.hpp	/^	typedef typename mtl::mat::detail::hermitian<LinOp>::result_type  type;$/;"	t	struct:mtl::mat::traits::adjoint
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    >::type type;$/;"	t	struct:mtl::ColumnInMatrix
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    typedef Result                type;$/;"	t	struct:mtl::operation::compute_one_factor
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    typedef const Expr&           type;$/;"	t	struct:mtl::operation::compute_one_factor
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^    typedef CVector    type;$/;"	t	struct:mtl::operation::compute_summand
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^    typedef Expr type;$/;"	t	struct:mtl::operation::compute_summand
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^		typedef typename mtl::traits::compose_view<code, typename mtl::traits::viewed_collection<Matrix>::type>::type type;$/;"	t	struct:mtl::mat::detail::conj_trait
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cross.hpp	/^	    typedef dense_vector<value>  type;$/;"	t	struct:mtl::vec::detail::cross_result
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/div_result.hpp	/^    typedef typename mat::divide_by_view<Op1,Op2> type;$/;"	t	struct:mtl::traits::div_result_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/div_result.hpp	/^    typedef typename vec::divide_by_view<Op1,Op2> type;$/;"	t	struct:mtl::traits::div_result_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^					       typename Collection<Vector2>::value_type>::result_type type;$/;"	t	struct:mtl::vec::detail::dot_result
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^	typedef ::mtl::mat::dense2D<value_type>         type;$/;"	t	struct:mtl::mat::traits::inv
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	/^    typedef mat::compressed2D<value_type, paras>   type;$/;"	t	struct:mtl::vec::make_sparse_trait
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^	typedef Assign type;$/;"	t	struct:mtl::assign::detail::subm_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^	typedef plus_sum type;$/;"	t	struct:mtl::assign::detail::subm_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef fully_unroll_fixed_size_dmat_dmat_mult_t<Assign, Backup>             type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef gen_blas_dmat_dmat_mult_t<Assign, backup_type>                       type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef gen_cursor_dmat_dmat_mult_t<Assign, backup_type> type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef gen_dmat_dmat_mult_t<Assign, backup_type> type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef gen_platform_dmat_dmat_mult_t<Assign, backup_type>                   type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef gen_recursive_dmat_dmat_mult_t<base_mult_type, BaseTest, Assign, backup_type>  type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef gen_tiling_22_dmat_dmat_mult_t<Assign, backup_type>                  type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef gen_tiling_44_dmat_dmat_mult_t<Assign, backup_type>                  type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef gen_tiling_dmat_dmat_mult_t<Tiling1, Tiling2, Assign, backup_type>   type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef no_op type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef size_switch_dmat_dmat_mult_t<SizeLimit, small_type, large_type>      type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_assign_mode.hpp	/^    typedef static_switch_dmat_dmat_mult_t<IsStatic, static_type, dynamic_type>  type;$/;"	t	struct:mtl::assign::mult_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^    typedef mat::mat_mat_times_expr<Op1, Op2> type;$/;"	t	struct:mtl::traits::mult_result_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^    typedef mat::rscaled_view<Op1, Op2> type;$/;"	t	struct:mtl::traits::mult_result_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^    typedef mat::scaled_view<Op1, Op2> type;$/;"	t	struct:mtl::traits::mult_result_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^    typedef mat_cvec_times_expr<Op1, Op2> type;$/;"	t	struct:mtl::traits::mult_result_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^    typedef mtl::mat::outer_product_matrix<Op1, Op2> type;$/;"	t	struct:mtl::traits::vec_mult_result_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^    typedef vec::rscaled_view<Op1, Op2> type;$/;"	t	struct:mtl::traits::vec_mult_result_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^    typedef vec::rvec_mat_times_expr<Op1, Op2> type;$/;"	t	struct:mtl::traits::vec_mult_result_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^    typedef vec::scaled_view<Op1, Op2> type;$/;"	t	struct:mtl::traits::vec_mult_result_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_cols.hpp	/^	typedef std::size_t   type;$/;"	t	struct:mtl::traits::num_cols
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/num_rows.hpp	/^	typedef std::size_t   type;$/;"	t	struct:mtl::traits::num_rows
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/resource.hpp	/^	    typedef typename Collection<Vector>::size_type type;$/;"	t	struct:mtl::traits::vector_resource
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    >::type type;$/;"	t	struct:mtl::RowInMatrix
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size.hpp	/^	typedef std::size_t   type;$/;"	t	struct:mtl::traits::size
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^    typedef std::size_t   type;$/;"	t	struct:mtl::static_num_cols
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^    typedef std::size_t   type;$/;"	t	struct:mtl::static_num_rows
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_size.hpp	/^    typedef typename static_num_rows<Collection>::type type; \/\/ Might not always work$/;"	t	struct:mtl::static_size
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^	typedef dense_vector<Value, typename transposed_parameters<Parameters>::type>           type;$/;"	t	struct:mtl::vec::transposed_vector
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^	typedef parameters<orientation, typename Parameters::dimension, false, typename Parameters::size_type>           type;        \/\/ not on stack!!!$/;"	t	struct:mtl::vec::transposed_parameters
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^	typedef strided_vector_ref<Value, typename transposed_parameters<Parameters>::type>     type;$/;"	t	struct:mtl::vec::transposed_vector
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    typedef update_minus<Value> type;$/;"	t	struct:mtl::operations::update_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    typedef update_plus<Value> type;$/;"	t	struct:mtl::operations::update_assign_mode
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_matrix.hpp	/^    >::type type;$/;"	t	struct:mtl::recursion::base_case_matrix
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_matrix.hpp	/^    typedef Matrix type;$/;"	t	struct:mtl::recursion::base_case_matrix
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^    typedef T const  type;$/;"	t	struct:mtl::traits::add_const_to_all
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^    typedef T const  type;$/;"	t	struct:mtl::traits::add_const_to_data
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^    typedef T const  type;$/;"	t	struct:mtl::traits::add_const_to_root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^    typedef T const *  type;$/;"	t	struct:mtl::traits::add_const_to_data
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^    typedef typename add_const_to_all<T>::type * const type;$/;"	t	class:mtl::traits::add_const_to_all::add_const_to_all
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/add_const.hpp	/^    typedef typename add_const_to_root<T>::type *  type;$/;"	t	struct:mtl::traits::add_const_to_root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^				typename ashape<E2>::type>::type type;$/;"	t	struct:mtl::ashape::ashape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^	>::type type;$/;"	t	struct:mtl::ashape::div_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^	>::type type;$/;"	t	struct:mtl::ashape::div_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^	typedef ndef type;$/;"	t	struct:mtl::ashape::div_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^	typedef ndef type;$/;"	t	struct:mtl::ashape::div_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^	typedef scal type;$/;"	t	struct:mtl::ashape::div_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^	typedef scal type;$/;"	t	struct:mtl::ashape::div_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    >::type type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    >::type type;$/;"	t	struct:mtl::ashape::emult_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef Shape1 type;$/;"	t	struct:mtl::ashape::mult_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef Shape2 type;$/;"	t	struct:mtl::ashape::mult_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef cvec<scal> type;$/;"	t	struct:mtl::ashape::ashape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef cvec<typename emult_shape<Value1, Value2>::type> type;$/;"	t	struct:mtl::ashape::emult_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef cvec_scal_mult type;$/;"	t	struct:mtl::ashape::mult_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef future<cvec<scal> > type; \/\/ might be a problem with nested matrices and vectors$/;"	t	struct:mtl::ashape::ashape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef mat<typename ashape<Value>::type> type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef mat<typename ashape<typename Functor::result_type>::type> type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef mat<typename ashape<typename mtl::Collection<Vector1>::value_type>::type> type;$/;"	t	struct:mtl::ashape::ashape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef mat<typename ashape<typename mtl::Collection<mtl::mat::multi_vector<Vector> >::value_type>::type> type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef mat<typename ashape<typename mtl::Collection<mtl::mat::multi_vector_range<Vector> >::value_type>::type> type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef mat<typename emult_shape<Value1, Value2>::type> type;$/;"	t	struct:mtl::ashape::emult_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef mat_scal_mult type;$/;"	t	struct:mtl::ashape::mult_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef ndef type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef ndef type;$/;"	t	struct:mtl::ashape::emult_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef ndef type;$/;"	t	struct:mtl::ashape::emult_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef rvec<typename ashape<Value>::type> type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef rvec<typename emult_shape<Value1, Value2>::type> type;$/;"	t	struct:mtl::ashape::emult_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef rvec_scal_mult type;$/;"	t	struct:mtl::ashape::mult_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef scal type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef scal type;$/;"	t	struct:mtl::ashape::emult_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef scal type;$/;"	t	struct:mtl::ashape::mult_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef scal_cvec_mult type;$/;"	t	struct:mtl::ashape::mult_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef scal_mat_mult type;$/;"	t	struct:mtl::ashape::mult_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef scal_rvec_mult type;$/;"	t	struct:mtl::ashape::mult_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef scal_scal_mult type;$/;"	t	struct:mtl::ashape::emult_op
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef typename ashape<Coll>::type type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef typename ashape<E1>::type type;$/;"	t	struct:mtl::ashape::ashape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef typename ashape<E1>::type type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef typename ashape<E2>::type type;$/;"	t	struct:mtl::ashape::ashape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef typename ashape<Matrix>::type type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef typename ashape<Vector>::type type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^    typedef typename emult_shape<Value1, Value2>::type type;$/;"	t	struct:mtl::ashape::emult_shape
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^   typedef mat<typename ashape<Value>::type> type;$/;"	t	struct:mtl::ashape::ashape_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    >::type type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    template <> struct view_category<tag::compressed2D> { typedef tag::compressed2D_view  type; };$/;"	t	struct:mtl::traits::detail::view_category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    template <> struct view_category<tag::dense2D>      { typedef tag::dense2D_view       type; };$/;"	t	struct:mtl::traits::detail::view_category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    template <> struct view_category<tag::morton_dense> { typedef tag::morton_view        type; };$/;"	t	struct:mtl::traits::detail::view_category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    template <typename Cat>  struct view_category       { typedef Cat                     type; };$/;"	t	struct:mtl::traits::detail::view_category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef category<E1> type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef mtl::tag::join<typename detail::simple_matrix_view_category<Matrix>::type, mtl::tag::dense> type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef mtl::tag::morton_dense type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::compressed2D type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::dense2D type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::element_structure type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::ell_matrix type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::hermitian_multi_vector type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::implicit_dense type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::mat_cvec_multiplier type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::multi_vector type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::sparse_banded_matrix type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::std_vector type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::transposed_multi_vector type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::unevaluated type; \/\/ might be a problem with nested matrices and vectors$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef tag::unknown type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    typedef typename category<T>::type type;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^	typedef Y type; $/;"	t	struct:mtl::complexity_classes::detail::times
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^	typedef n_log_n type; $/;"	t	struct:mtl::complexity_classes::detail::times
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^	typedef n_polylog_n type; $/;"	t	struct:mtl::complexity_classes::detail::times
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^	typedef polylog_n type; $/;"	t	struct:mtl::complexity_classes::detail::times
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^	typedef polynomial type;$/;"	t	struct:mtl::complexity_classes::detail::times
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^	typedef quadratic type; $/;"	t	struct:mtl::complexity_classes::detail::times
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/complexity.hpp	/^    typedef infinite type;$/;"	t	struct:mtl::complexity_classes::times
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^       >::type type;$/;"	t	struct:mtl::traits::matrix_compose_view
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^    typedef Matrix& type;$/;"	t	struct:mtl::traits::matrix_compose_view
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/compose_view.hpp	/^    typedef const Matrix& type;$/;"	t	struct:mtl::traits::matrix_compose_view
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^    typedef const Container& type;$/;"	t	struct:mtl::traits::copy_expression_const_ref_container
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^    typedef mtl::vec::conj_view<Vector> type;$/;"	t	struct:mtl::traits::copy_expression_const_ref_container
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^    typedef mtl::vec::divide_by_view<Vector, Divisor> type;$/;"	t	struct:mtl::traits::copy_expression_const_ref_container
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^    typedef mtl::vec::map_view<Functor, Vector> type;$/;"	t	struct:mtl::traits::copy_expression_const_ref_container
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^    typedef mtl::vec::rscaled_view<Vector, RScaling> type;$/;"	t	struct:mtl::traits::copy_expression_const_ref_container
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^    typedef mtl::vec::scaled_view<Scaling, Vector> type;$/;"	t	struct:mtl::traits::copy_expression_const_ref_container
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^    typedef mtl::vec::vec_vec_aop_expr<E1, E2, SFunctor> type;$/;"	t	struct:mtl::traits::copy_expression_const_ref_container
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/copy_expression_const_ref_container.hpp	/^    typedef mtl::vec::vec_vec_pmop_expr<E1, E2, SFunctor> type;$/;"	t	struct:mtl::traits::copy_expression_const_ref_container
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/domain.hpp	/^    typedef mtl::vec::dense_vector<typename Collection<Matrix>::value_type, vec::parameters<> > type;$/;"	t	struct:mtl::traits::domain_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/extended_complex.hpp	/^    typedef std::complex<typename mtl::Addable<T, U>::result_type> type;$/;"	t	struct:mtl::traits::extended_complex_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^    typedef Vector type;$/;"	t	struct:mtl::traits::fast_multi_vector_expr
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^    typedef mtl::vec::map_view<Functor, typename fast_multi_vector_expr<Matrix>::type> type;$/;"	t	struct:mtl::traits::fast_multi_vector_expr
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^    typedef mtl::vec::rscaled_view<Value1, typename fast_multi_vector_expr<Matrix>::type> type;$/;"	t	struct:mtl::traits::fast_multi_vector_expr
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^    typedef mtl::vec::scaled_view<Value1, typename fast_multi_vector_expr<Matrix>::type> type;$/;"	t	struct:mtl::traits::fast_multi_vector_expr
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/fast_multi_vector_expr.hpp	/^    typedef mtl::vec::vec_vec_pmop_expr<V1, V2, Functor> type;$/;"	t	struct:mtl::traits::fast_multi_vector_expr
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluator.hpp	/^    typedef mtl::vec::fused_index_evaluator<T, U> type;$/;"	t	struct:mtl::traits::index_evaluator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^    typedef utilities::const_iterator_adaptor<map_type, cursor_type, value_type>  type;$/;"	t	struct:mtl::traits::range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/linear_operator.hpp	/^    typedef mtl::mat::dense2D<Value1>   type;$/;"	t	struct:mtl::traits::linear_operator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/lu_matrix_type.hpp	/^    typedef Matrix type;$/;"	t	struct:mtl::traits::lu_matrix_type
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/lu_matrix_type.hpp	/^    typedef mat::dense2D<Value, Parameters> type;$/;"	t	struct:mtl::traits::lu_matrix_type
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    typedef Target             type;$/;"	t	struct:mtl::make_in_copy_or_reference
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    typedef const Target&      type;$/;"	t	struct:mtl::make_in_copy_or_reference
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    > type;$/;"	t	struct:mtl::type_para::matrix_parameter_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    >::type                                      type;$/;"	t	struct:mtl::type_para::matrix_default_density
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    typedef mtl::fixed::dimensions<Rows, Cols> type;$/;"	t	struct:mtl::type_para::set_matrix_dimensions
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    typedef mtl::non_fixed::dimensions type;$/;"	t	struct:mtl::type_para::set_matrix_dimensions
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    typedef typename boost::mpl::at<type_map, typename boost::mpl::at<TypePara, layout>::type>::type type;$/;"	t	struct:mtl::type_para::matrix_density_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    typedef typename matrix_density_generator<Value, my_density, TypePara, matrix_parameters>::type type;$/;"	t	struct:mtl::type_para::matrix_type_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	/^    typedef mtl::mat::parameters<>      type;$/;"	t	struct:mtl::traits::parameters
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/parameters.hpp	/^    typedef typename T::parameters  type;$/;"	t	struct:mtl::traits::parameters
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/pos_type.hpp	/^    typedef std::pair<size_type, size_type>   type;$/;"	t	struct:mtl::traits::pos_type_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/pos_type.hpp	/^    typedef typename Collection<T>::size_type type;$/;"	t	struct:mtl::traits::pos_type_aux
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    >::type type;  $/;"	t	struct:mtl::traits::col
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    >::type type;  $/;"	t	struct:mtl::traits::row
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::col_in_element_key<mtl::mat::implicit_dense<Functor> > type;$/;"	t	struct:mtl::traits::col
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::col_in_element_key<mtl::mat::indirect<Matrix> > type;$/;"	t	struct:mtl::traits::col
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::col_in_key<mtl::mat::morton_dense<Elt, BitMask, Parameters> > type;$/;"	t	struct:mtl::traits::col
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::const_value_in_element_key<mtl::mat::implicit_dense<Functor> > type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::const_value_in_element_key<mtl::mat::indirect<Matrix> > type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::coordinate2D_col<Value, Parameters>   type; $/;"	t	struct:mtl::traits::col
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::coordinate2D_const_value<Value, Parameters>   type; $/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::coordinate2D_row<Value, Parameters>   type; $/;"	t	struct:mtl::traits::row
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::direct_const_value<mtl::mat::dense2D<Value, Parameters> > type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::direct_const_value<mtl::vec::dense_vector<Value, Parameters> > type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::direct_const_value<vec::strided_vector_ref<Value, Parameters> > type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::direct_value<mtl::mat::dense2D<Value, Parameters> > type;$/;"	t	struct:mtl::traits::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::direct_value<mtl::vec::dense_vector<Value, Parameters> > type;$/;"	t	struct:mtl::traits::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::direct_value<vec::strided_vector_ref<Value, Parameters> > type;$/;"	t	struct:mtl::traits::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::index_from_offset< mtl::vec::dense_vector<Elt, Parameters> > type;$/;"	t	struct:mtl::traits::index
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::index_from_offset< vec::strided_vector_ref<Elt, Parameters> > type;$/;"	t	struct:mtl::traits::index
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::indexer_col_ref<mtl::mat::dense2D<Value, Parameters> > type;$/;"	t	struct:mtl::traits::col
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::indexer_row_ref<mtl::mat::dense2D<Value, Parameters> > type;$/;"	t	struct:mtl::traits::row
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::matrix_const_value_ref<mtl::mat::morton_dense<Elt, BitMask, Parameters> > type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::matrix_offset_const_value<mtl::mat::compressed2D<Elt, Parameters> > type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::matrix_offset_value<mtl::mat::compressed2D<Elt, Parameters> > type;$/;"	t	struct:mtl::traits::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::matrix_value_ref<mtl::mat::morton_dense<Elt, BitMask, Parameters> > type;$/;"	t	struct:mtl::traits::value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::offset_from_key<mtl::mat::compressed2D<Elt, Parameters> > type;$/;"	t	struct:mtl::traits::offset
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::row_in_element_key<mtl::mat::implicit_dense<Functor> > type;$/;"	t	struct:mtl::traits::row
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::row_in_element_key<mtl::mat::indirect<Matrix> > type;$/;"	t	struct:mtl::traits::row
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::row_in_key<mtl::mat::morton_dense<Elt, BitMask, Parameters> > type;$/;"	t	struct:mtl::traits::row
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::sparse_banded_col<Value, Parameters>   type; $/;"	t	struct:mtl::traits::col
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::sparse_banded_const_value<Value, Parameters>   type; $/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^    typedef mtl::detail::sparse_banded_row<Value, Parameters>   type; $/;"	t	struct:mtl::traits::row
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/range_wrapper.hpp	/^    typedef typename gen_type::type          type;$/;"	t	struct:mtl::traits::range_wrapper
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef T        type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef Vector type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::implicit_dense<mtl::mat::hilbert_functor<Value> > type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::implicit_dense<mtl::mat::ones_functor<Value> > type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::implicit_dense<mtl::mat::outer_product_functor<Vector1, Vector2> > type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::map_view<sfunctor::conj<typename Matrix::value_type>, Matrix> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::map_view<sfunctor::conj<typename Matrix::value_type>, mtl::mat::transposed_view<Matrix> > type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::map_view<sfunctor::imag<typename Matrix::value_type>, Matrix> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::map_view<sfunctor::negate<typename Matrix::value_type>, Matrix> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::map_view<sfunctor::real<typename Matrix::value_type>, Matrix> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::map_view<tfunctor::divide_by<typename Matrix::value_type, Divisor>, Matrix> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::map_view<tfunctor::rscale<typename Matrix::value_type, RScaling>, Matrix> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::map_view<tfunctor::scale<Scaling, typename Matrix::value_type>, Matrix> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef mtl::mat::mat_mat_op_expr<M1, M2, f_type> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef typename root< mtl::mat::mat_mat_minus_expr<M1, M2> >::type type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef typename root< mtl::mat::mat_mat_plus_expr<M1, M2> >::type type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::map_view<mtl::sfunctor::conj<typename Vector::value_type>, Vector> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::map_view<mtl::sfunctor::negate<typename Vector::value_type>, Vector> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::map_view<tfunctor::divide_by<typename Vector::value_type, Divisor>, Vector> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::map_view<tfunctor::rscale<typename Vector::value_type, RScaling>, Vector> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::map_view<tfunctor::scale<Scaling, typename Vector::value_type>, Vector> type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::vec_scal_aop_expr< E1, E2, mtl::sfunctor::assign<typename E1::value_type, E2> > type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::vec_scal_aop_expr< E1, E2, mtl::sfunctor::divide_assign<typename E1::value_type, E2> > type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::vec_scal_aop_expr< E1, E2, mtl::sfunctor::times_assign<typename E1::value_type, E2> > type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::vec_vec_aop_expr< E1, E2, mtl::sfunctor::assign<typename E1::value_type, typename E2::value_type> > type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::vec_vec_aop_expr< E1, E2, mtl::sfunctor::minus_assign<typename E1::value_type, typename E2::value_type> > type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/root.hpp	/^    typedef vec::vec_vec_aop_expr< E1, E2, mtl::sfunctor::plus_assign<typename E1::value_type, typename E2::value_type> > type;$/;"	t	struct:mtl::traits::root
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^	    typedef Vector   type;$/;"	t	struct:mtl::impl::static_vector_get
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^    typedef T type;$/;"	t	struct:mtl::as_size_type
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^    typedef mat::compressed2D<Value, Parameters> type;$/;"	t	struct:mtl::traits::transposed_sparse_matrix_type
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^    typedef mat::compressed2D<Value, typename transposed_matrix_parameter<Parameters>::type> type;$/;"	t	struct:mtl::traits::transposed_matrix_type
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^    typedef mat::compressed2D<Value, typename transposed_matrix_parameter<Parameters>::type> type;$/;"	t	struct:mtl::traits::transposed_sparse_matrix_type
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^    typedef mat::dense2D<Value, typename transposed_matrix_parameter<Parameters>::type> type;$/;"	t	struct:mtl::traits::transposed_matrix_type
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^    typedef mat::morton_dense<Value, Mask, typename transposed_matrix_parameter<Parameters>::type> type;$/;"	t	struct:mtl::traits::transposed_matrix_type
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^    typedef mat::parameters<typename transposed_orientation<O>::type, I, D, S, ST>  type;$/;"	t	struct:mtl::traits::transposed_matrix_parameter
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_matrix_type.hpp	/^    typedef typename transposed_sparse_matrix_type<Matrix>::type type;$/;"	t	struct:mtl::traits::transposed_sparse_matrix_type
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_orientation.hpp	/^    typedef tag::col_major type; $/;"	t	struct:mtl::traits::transposed_orientation
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/transposed_orientation.hpp	/^    typedef tag::row_major type; $/;"	t	struct:mtl::traits::transposed_orientation
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/true_copy.hpp	/^    typedef T type;$/;"	t	struct:mtl::traits::true_copy
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	    typedef TypePara       type;$/;"	t	struct:mtl::type_para::set_parameters
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	    typedef typename boost::mpl::insert<short_para, short_para, boost::mpl::pair<kind, Value> >::type type;$/;"	t	struct:mtl::type_para::set_para
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	    typedef typename set_parameters<next_parameters, Values...>::type  type;$/;"	t	struct:mtl::type_para::set_parameters
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	struct check<boost::mpl::pair<Key, none> > { typedef int type; };$/;"	t	struct:mtl::type_para::check
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	typedef typename type_para::replace_defaults<parameters_by_user>::type       type;$/;"	t	struct:mtl::set_parameters
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	    >                            type;       	$/;"	t	struct:mtl::type_para::replace_defaults_common
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	    typedef dimensionality type;$/;"	t	struct:mtl::type_para::find_kind
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	    typedef int type;$/;"	t	struct:mtl::type_para::error_message_common
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	    typedef masking type;$/;"	t	struct:mtl::type_para::find_kind
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	    typedef size_type type;$/;"	t	struct:mtl::type_para::find_kind
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^	    typedef typename boost::mpl::at<KindMap, Kind>::type type;$/;"	t	struct:mtl::type_para::find_kind
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/updater_to_assigner.hpp	/^    typedef mtl::assign::assign_sum type;$/;"	t	struct:mtl::traits::updater_to_assigner
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/updater_to_assigner.hpp	/^    typedef mtl::assign::minus_sum type;$/;"	t	struct:mtl::traits::updater_to_assigner
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/updater_to_assigner.hpp	/^    typedef mtl::assign::plus_sum type;$/;"	t	struct:mtl::traits::updater_to_assigner
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^		>::type                                                  type;$/;"	t	struct:mtl::type_para::vector_type_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	    > type;$/;"	t	struct:mtl::type_para::vector_parameter_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	    typedef mtl::vec::fixed::dimension<Size> type;$/;"	t	struct:mtl::type_para::set_vector_dimensions
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	    typedef mtl::vec::non_fixed::dimension type;$/;"	t	struct:mtl::type_para::set_vector_dimensions
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/viewed_collection.hpp	/^    typedef typename boost::remove_const<T>::type type;$/;"	t	struct:mtl::traits::viewed_collection
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^      typedef vec type ;$/;"	t	struct:mtl::traits::category
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef const Vector& type;$/;"	t	struct:mtl::vec::detail::assign_assigner
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef const Vector& type;$/;"	t	struct:mtl::vec::detail::assign_decrementer
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef const Vector& type;$/;"	t	struct:mtl::vec::detail::assign_divider
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef const Vector& type;$/;"	t	struct:mtl::vec::detail::assign_incrementer
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef const Vector& type;$/;"	t	struct:mtl::vec::detail::assign_multiplyer
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef vec_scal_asgn_expr<Vector, Source> type;$/;"	t	struct:mtl::vec::detail::crtp_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef vec_scal_div_asgn_expr<Vector, Source> type;$/;"	t	struct:mtl::vec::detail::crtp_div_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef vec_scal_minus_asgn_expr<Vector, Source> type;$/;"	t	struct:mtl::vec::detail::crtp_minus_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef vec_scal_plus_asgn_expr<Vector, Source> type;$/;"	t	struct:mtl::vec::detail::crtp_plus_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef vec_scal_times_asgn_expr<Vector, Source> type;$/;"	t	struct:mtl::vec::detail::crtp_times_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef vec_vec_asgn_expr<Vector, Source> type;$/;"	t	struct:mtl::vec::detail::crtp_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef vec_vec_div_asgn_expr<Vector, Source> type;$/;"	t	struct:mtl::vec::detail::crtp_div_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef vec_vec_minus_asgn_expr<Vector, Source> type;$/;"	t	struct:mtl::vec::detail::crtp_minus_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef vec_vec_plus_asgn_expr<Vector, Source> type;$/;"	t	struct:mtl::vec::detail::crtp_plus_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^	typedef vec_vec_times_asgn_expr<Vector, Source> type;$/;"	t	struct:mtl::vec::detail::crtp_times_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    typedef Vector& type;$/;"	t	struct:mtl::vec::crtp_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    typedef Vector& type;$/;"	t	struct:mtl::vec::crtp_div_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    typedef Vector& type;$/;"	t	struct:mtl::vec::crtp_minus_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    typedef Vector& type;$/;"	t	struct:mtl::vec::crtp_plus_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^    typedef Vector& type;$/;"	t	struct:mtl::vec::crtp_times_assign
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^	typedef typename collection_t::const_pointer type;$/;"	t	struct:mtl::traits::range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^	typedef typename collection_t::pointer    type;$/;"	t	struct:mtl::traits::range_generator
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	typedef vec::detail::map_value<Functor, Vector>  type;$/;"	t	struct:mtl::traits::const_value
type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unit_vector.hpp	/^	typedef mtl::vec::dense_vector<Value, mtl::vec::parameters<> >  type;$/;"	t	struct:mtl::traits::unit_vector
type	mtl_test.cpp	/^	typedef nonscal type;$/;"	t	struct:mtl::ashape::ashape_aux	file:
type	poisson.cpp	/^	typedef nonscal type;$/;"	t	struct:mtl::ashape::ashape_aux	file:
type1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    typedef typename mtl::traits::true_copy<Value1>::type type1;$/;"	t	struct:mtl::tfunctor::scale
type_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    >                                            type_map;$/;"	t	struct:mtl::type_para::matrix_density_generator
type_para	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^    namespace type_para {$/;"	n	namespace:mtl
type_para	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^    namespace type_para {$/;"	n	namespace:mtl
type_para	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_common.hpp	/^    namespace type_para {$/;"	n	namespace:mtl
type_para	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter_local.hpp	/^    namespace type_para {$/;"	n	namespace:mtl
type_para	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^    namespace type_para {$/;"	n	namespace:mtl
u	poisson.cpp	/^		const Vector& u;$/;"	m	class:itl::visual_iteration	file:
u2i_	Graph.hpp	/^	idx_type u2i_(uid_type u) const {$/;"	f	class:Graph
uid	Examples/proxy_example.cpp	/^    size_type uid;      \/\/ The unique identifcation for an element$/;"	m	struct:SimpleSet::internal_element	file:
uid	Graph.hpp	/^	uid_type uid;$/;"	m	struct:Graph::adjacency_data
uid	Graph.hpp	/^	uid_type uid;$/;"	m	struct:Graph::node_data
uid	Graph.hpp	/^  	uid_type uid;$/;"	m	struct:Graph::edge_data
uid	Graph.hpp	/^  	uid_type uid;$/;"	m	struct:Graph::uid_predicate
uid1_	Graph.hpp	/^	uid_type uid1_;$/;"	m	class:Graph::Edge
uid2_	Graph.hpp	/^	uid_type uid2_;$/;"	m	class:Graph::Edge
uid_	Examples/proxy_example.cpp	/^    size_type uid_;$/;"	m	class:SimpleSet::SimpleElement	file:
uid_	Graph.hpp	/^	uid_type uid_;$/;"	m	class:Graph::IncidentIterator
uid_	Graph.hpp	/^	uid_type uid_;$/;"	m	class:Graph::Node
uid_	Graph.hpp	/^	uid_type uid_;$/;"	m	class:Graph::NodeIterator
uid_	Mesh.hpp	/^		size_type uid_;$/;"	m	class:Mesh::Triangle
uid_predicate	Graph.hpp	/^	uid_predicate( uid_type u ) : uid(u) {$/;"	f	struct:Graph::uid_predicate
uid_predicate	Graph.hpp	/^  typedef struct uid_predicate {$/;"	s	class:Graph
uid_predicate	Graph.hpp	/^  } uid_predicate;$/;"	t	class:Graph	typeref:struct:Graph::uid_predicate
uid_type	Graph.hpp	/^  typedef unsigned uid_type;$/;"	t	class:Graph
umfpack	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^    namespace umfpack {$/;"	n	namespace:mtl::mat
umfpack_solve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^int umfpack_solve(const compressed2D<Value, Parameters>& A, VectorX& x, const VectorB& b)$/;"	f	namespace:mtl::mat
unary_dot	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/unary_dot.hpp	/^	inline unary_dot(const Value& value)$/;"	f	class:mtl::vec::Collection
unary_dot_functor	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^struct unary_dot_functor$/;"	s	namespace:mtl::vec
unchanged	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^	    bool unchanged() const { return value.second == math::identity(math::min<pos_type>(), pos_type()); }$/;"	f	struct:mtl::vec::max_pos_functor
unchanged	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^	    bool unchanged() const { return value.second == math::identity(math::min<pos_type>(), pos_type()); }$/;"	f	struct:mtl::vec::min_pos_functor
undilate	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    T undilate()$/;"	f	struct:mtl::dilated::dilated_int
undilate_lut	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilation_table.hpp	/^static const unsigned short int undilate_lut[256] = {$/;"	m	namespace:mtl::dilated
undivisible_min_dim_test	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^    undivisible_min_dim_test(std::size_t comp) : comp(comp) {}$/;"	f	struct:mtl::recursion::undivisible_min_dim_test
undivisible_min_dim_test	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/base_case_test.hpp	/^struct undivisible_min_dim_test$/;"	s	namespace:mtl::recursion
unevaluated	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct unevaluated : virtual universe {};$/;"	s	namespace:mtl::tag
unexpected_orthogonality	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/utility/exception.hpp	/^struct unexpected_orthogonality : search_space_exhaustion {};$/;"	s	namespace:itl
unexpected_result	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^    explicit unexpected_result(const char *s= "The result of an operation is not the expected one.")$/;"	f	struct:mtl::unexpected_result
unexpected_result	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/exception.hpp	/^struct unexpected_result : public domain_error$/;"	s	namespace:mtl
unit_diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct unit_diagonal : universe_diagonal {};$/;"	s	namespace:mtl::tag
unit_lower_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^Vector inline unit_lower_trisolve(const Matrix& A, const Vector& v)$/;"	f	namespace:mtl::mat
unit_lower_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^inline void unit_lower_trisolve(const Matrix& A, const VectorIn& v, VectorOut& w)$/;"	f	namespace:mtl::mat
unit_upper_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^Vector inline unit_upper_trisolve(const Matrix& A, const Vector& v)$/;"	f	namespace:mtl::mat
unit_upper_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^void inline unit_upper_trisolve(const Matrix& A, const VectorIn& v, VectorOut& w)$/;"	f	namespace:mtl::mat
unit_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unit_vector.hpp	/^    inline unit_vector(std::size_t k, std::size_t n)$/;"	f	class:mtl::vec::traits::unit_vector
unit_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unit_vector.hpp	/^    struct unit_vector$/;"	s	namespace:mtl::traits
universe	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/ashape.hpp	/^struct universe {};$/;"	s	namespace:mtl::ashape
universe	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct universe {};$/;"	s	namespace:mtl::tag
universe_diagonal	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct universe_diagonal {};$/;"	s	namespace:mtl::tag
unknown	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct unknown : virtual scalar {};$/;"	s	namespace:mtl::tag
unlock	CS207/SDLViewer.hpp	/^    void unlock() {$/;"	f	struct:CS207::SDLViewer::safe_lock
unmask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^inline T unmask(T const& value)$/;"	f	namespace:mtl::dilated
unmask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^inline T unmask(T const& value, masked_dilation_tables<T, Mask> tables)$/;"	f	namespace:mtl::dilated
unmask_lut	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    lookup_type& unmask_lut() { return *my_unmask_lut; }$/;"	f	struct:mtl::dilated::masked_dilation_tables
unmask_shift_table	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    it_type& unmask_shift_table() { return *my_unmask_shift_table; }$/;"	f	struct:mtl::dilated::masked_dilation_tables
unroll	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/unroll.hpp	/^inline unroll(Coll& v)$/;"	f	class:mtl::mtl::traits::enable_if_vector
unroll_size1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/unroll_size1.hpp	/^struct unroll_size1$/;"	s	namespace:mtl::traits
unroll_size1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/unroll_size1.hpp	/^struct unroll_size1<vec::unrolled1<BSize, Vector> >$/;"	s	namespace:mtl::traits
unrolled1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    unrolled1(Vector& ref) : ref(ref) {}$/;"	f	class:mtl::vec::unrolled1
unrolled1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^class unrolled1$/;"	c	namespace:mtl::vec
unrolled_index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct unrolled_index_evaluatable : boost::mpl::false_ {};$/;"	s	namespace:mtl::traits
unrolled_index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct unrolled_index_evaluatable<fused_expr<T, U> > $/;"	s	namespace:mtl::traits
unrolled_index_evaluatable	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/index_evaluatable.hpp	/^struct unrolled_index_evaluatable<lazy_assign<T, U, Assign> >$/;"	s	namespace:mtl::traits
unsigned_parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/parameter.hpp	/^typedef parameters<row_major, index::c_index, mtl::non_fixed::dimensions, false, unsigned> unsigned_parameters;$/;"	t	namespace:mtl::mat
unsupported	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct unsupported {};$/;"	s	namespace:mtl::tag
upV	CS207/GLCamera.hpp	/^  Point upV;$/;"	m	class:CS207::GLCamera
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    void update(size_type row, size_type col, Value val)$/;"	f	struct:mtl::detail::trivial_inserter
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void update() {}$/;"	f	class:mtl::mat::umfpack::solver
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void update()$/;"	f	class:mtl::mat::umfpack::solver
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    void update(size_type row, size_type col, value_type val)$/;"	f	struct:mtl::mat::compressed2D_inserter
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    void update(size_type row, size_type col, Value val)$/;"	f	struct:mtl::mat::coordinate2D_inserter
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    void update(size_type row, size_type col, Value val)$/;"	f	struct:mtl::mat::sparse_banded_inserter
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void update(T& x, const U& y)$/;"	f	struct:mtl::assign::assign_sum
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void update(T& x, const U& y)$/;"	f	struct:mtl::assign::divide_sum
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void update(T& x, const U& y)$/;"	f	struct:mtl::assign::minus_sum
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void update(T& x, const U& y)$/;"	f	struct:mtl::assign::plus_sum
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_mode.hpp	/^    static void update(T& x, const U& y)$/;"	f	struct:mtl::assign::times_sum
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    static inline void update(Value& tmp00, Value& tmp01, Value& tmp02, Value& tmp03, Value& tmp04, $/;"	f	struct:mtl::gen_tiling_dmat_dmat_mult_block
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    static inline void update(Value& tmp00, Value&, Value&, Value&, Value&, $/;"	f	struct:mtl::gen_tiling_dmat_dmat_mult_block
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    inline static void update(As, VectorOut& w, const Tmps& tmps)$/;"	f	struct:mtl::mat::square_cvec_mult_rows
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^    inline static void update(As, VectorOut&, const Tmps&) {}$/;"	f	struct:mtl::mat::square_cvec_mult_rows
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    static inline void update(Value& tmp00, Value& tmp01, Value& tmp02, Value& tmp03, Value& tmp04, $/;"	f	struct:mtl::functor::gen_tiling_smat_dmat_mult_block
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/smat_dmat_mult.hpp	/^    static inline void update(Value& tmp00, Value&, Value&, Value&, Value&, $/;"	f	struct:mtl::functor::gen_tiling_smat_dmat_mult_block
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    inline void update() {}$/;"	f	struct:mtl::vec::indexbuffer
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    void update(size_type n, value_type value) { modify<Updater>(n, value); }$/;"	f	struct:mtl::vec::inserter
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^	    static inline void update(Value& tmp00, Value& tmp01, Value& tmp02, Value& tmp03, Value& tmp04, $/;"	f	struct:mtl::vec::impl::reduction
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^	    static inline void update(Value& tmp00, Value&, Value&, Value&, Value&, Value&, Value&, Value&, $/;"	f	struct:mtl::vec::impl::reduction
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void update(Value& value, const Element& x)$/;"	f	struct:mtl::vec::infinity_norm_functor
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void update(Value& value, const Element& x)$/;"	f	struct:mtl::vec::max_functor
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void update(Value& value, const Element& x)$/;"	f	struct:mtl::vec::min_functor
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void update(Value& value, const Element& x)$/;"	f	struct:mtl::vec::one_norm_functor
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void update(Value& value, const Element& x)$/;"	f	struct:mtl::vec::product_functor
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void update(Value& value, const Element& x)$/;"	f	struct:mtl::vec::sum_functor
update	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^    static inline void update(Value& value, const Element& x)$/;"	f	struct:mtl::vec::two_norm_functor
update_adapter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^struct update_adapter$/;"	s	namespace:mtl::operations
update_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^struct update_assign_mode {};$/;"	s	namespace:mtl::operations
update_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^struct update_assign_mode<assign::assign_sum, Value>$/;"	s	namespace:mtl::operations
update_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^struct update_assign_mode<assign::minus_sum, Value>$/;"	s	namespace:mtl::operations
update_assign_mode	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^struct update_assign_mode<assign::plus_sum, Value>$/;"	s	namespace:mtl::operations
update_key	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	void update_key(value_type node, key_type new_key) {$/;"	f	class:utils::binary_heap
update_minus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^struct update_minus$/;"	s	namespace:mtl::operations
update_numeric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void update_numeric() {}$/;"	f	class:mtl::mat::umfpack::solver
update_numeric	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void update_numeric()$/;"	f	class:mtl::mat::umfpack::solver
update_numeric_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void update_numeric_aux(false_)$/;"	f	class:mtl::mat::umfpack::solver
update_numeric_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    void update_numeric_aux(true_)$/;"	f	class:mtl::mat::umfpack::solver
update_plus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^struct update_plus$/;"	s	namespace:mtl::operations
update_progress	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    void update_progress(const basic_iteration& that)$/;"	f	class:itl::basic_iteration
update_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^	update_proxy(self& ref, size_type row, size_type col) : ref(ref), row(row), col(col) {}$/;"	f	struct:mtl::mat::coordinate2D_inserter::update_proxy
update_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    struct update_proxy$/;"	s	struct:mtl::mat::coordinate2D_inserter
update_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    explicit update_proxy(Inserter& ins, SizeType row, SizeType col) $/;"	f	struct:mtl::operations::update_proxy
update_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^struct update_proxy$/;"	s	namespace:mtl::operations
update_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    explicit update_proxy(Inserter& ins, Size n) : ins(ins), n(n) {}$/;"	f	struct:mtl::vec::update_proxy
update_proxy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^struct update_proxy$/;"	s	namespace:mtl::vec
update_store	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^struct update_store$/;"	s	namespace:mtl::operations
update_times	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^struct update_times$/;"	s	namespace:mtl::operations
update_viewer	poisson.cpp	/^		void update_viewer() {$/;"	f	class:itl::visual_iteration	file:
updater_to_assigner	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/updater_to_assigner.hpp	/^struct updater_to_assigner$/;"	s	namespace:mtl::traits
updater_to_assigner	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/updater_to_assigner.hpp	/^struct updater_to_assigner<mtl::operations::update_minus<Element> >$/;"	s	namespace:mtl::traits
updater_to_assigner	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/updater_to_assigner.hpp	/^struct updater_to_assigner<mtl::operations::update_plus<Element> >$/;"	s	namespace:mtl::traits
updater_to_assigner	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/updater_to_assigner.hpp	/^struct updater_to_assigner<mtl::operations::update_store<Element> >$/;"	s	namespace:mtl::traits
upper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/upper.hpp	/^    struct upper$/;"	s	namespace:mtl::mat::traits
upper	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/upper.hpp	/^inline upper(const Matrix& A)$/;"	f	class:mtl::mat::traits::upper
upper_matrix_coll_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	typedef std::vector<mtl::mat::compressed2D<value_type> > upper_matrix_coll_type;$/;"	t	class:itl::pc::imf_preconditioner
upper_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    upper_solver_t               upper_solver;$/;"	m	class:itl::pc::ic_0
upper_solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    upper_solver_t              upper_solver;$/;"	m	class:itl::pc::ilu
upper_solver_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef mtl::mat::detail::upper_trisolve_t<U_type, mtl::tag::inverse_diagonal, true> upper_solver_t;$/;"	t	class:itl::pc::ic_0
upper_solver_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef mtl::mat::detail::upper_trisolve_t<U_type, mtl::tag::inverse_diagonal, true> upper_solver_t;$/;"	t	class:itl::pc::ilu
upper_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^Vector inline upper_trisolve(const Matrix& A, const Vector& v)$/;"	f	namespace:mtl::mat
upper_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^Vector inline upper_trisolve(const Matrix& A, const Vector& v, DiaTag)$/;"	f	namespace:mtl::mat
upper_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^void inline upper_trisolve(const Matrix& A, const VectorIn& v, VectorOut& w)$/;"	f	namespace:mtl::mat
upper_trisolve	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^void inline upper_trisolve(const Matrix& A, const VectorIn& v, VectorOut& w, DiaTag)$/;"	f	namespace:mtl::mat
upper_trisolve_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	upper_trisolve_t(const Matrix& A) : A(A), value_a(A), col_a(A), row_a(A)$/;"	f	struct:mtl::mat::detail::upper_trisolve_t
upper_trisolve_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^    struct upper_trisolve_t$/;"	s	namespace:mtl::mat::detail
use_long	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template <typename Value> struct use_long { static const bool value= sizeof(Value) > sizeof(int); };$/;"	s	namespace:mtl::mat::umfpack
used_memory	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    std::size_t used_memory() const { return Size;  }$/;"	f	struct:mtl::detail::size_helper
used_memory	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    std::size_t used_memory() const$/;"	f	struct:mtl::detail::contiguous_memory_block
used_memory	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    std::size_t used_memory() const$/;"	f	struct:mtl::detail::size_helper
utilities	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor.hpp	/^namespace mtl { namespace utilities {$/;"	n	namespace:mtl
utilities	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_detail.hpp	/^namespace mtl { namespace utilities { namespace detail {$/;"	n	namespace:mtl
utilities	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^namespace mtl { namespace utilities {$/;"	n	namespace:mtl
utility	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace utility {}$/;"	n	namespace:mtl
utility	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^namespace mtl { namespace utility {$/;"	n	namespace:mtl
utility	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/sometimes_data.hpp	/^namespace mtl { namespace utility {$/;"	n	namespace:mtl
utility	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^namespace mtl { namespace utility {$/;"	n	namespace:mtl
utils	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^namespace utils {$/;"	n
v	Graph.hpp	/^	edge_value_type v;$/;"	m	struct:Graph::edge_data
v	Graph.hpp	/^	mutable node_value_type v;$/;"	m	struct:Graph::node_data
v	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    Vector&    v;$/;"	m	class:mtl::vec::givens
v	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    U *v;$/;"	m	struct:mtl::utility::zip_ref
v	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    U*            v;$/;"	m	struct:mtl::utility::zip_it
v	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/lazy_reduction.hpp	/^    const Vector& v;$/;"	m	struct:mtl::vec::lazy_reduction
v	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^    const VectorIn& v;$/;"	m	struct:mtl::vec::mat_cvec_multiplier
v	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^    const Vector&  v;$/;"	m	struct:mtl::vec::reduction_index_evaluator
v	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    const VectorIn& v;$/;"	m	struct:mtl::vec::row_mat_cvec_index_evaluator
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Vector1 const& v1() const { return my_v1; }$/;"	f	class:mtl::mat::outer_product_functor
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Vector1 const& v1() const { return this->functor().v1(); }$/;"	f	class:mtl::mat::outer_product_matrix
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Vector1&       v1()       { return my_v1; }$/;"	f	class:mtl::mat::outer_product_functor
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Vector1&       v1()       { return this->functor().v1(); }$/;"	f	class:mtl::mat::outer_product_matrix
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    const Vector1& v1;$/;"	m	struct:mtl::vec::dot_class
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    Value1 v1; $/;"	m	struct:mtl::tfunctor::scale
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    type1 v1; $/;"	m	struct:mtl::tfunctor::scale
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    typename mtl::traits::true_copy<Value1>::type v1; $/;"	m	struct:mtl::tfunctor::scale
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    Value1 v1; $/;"	m	struct:mtl::tfunctor::left_max
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    Value1 v1; $/;"	m	struct:mtl::tfunctor::left_min
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    Value1 v1; $/;"	m	struct:mtl::tfunctor::left_minus
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    Value1 v1; $/;"	m	struct:mtl::tfunctor::left_plus
v1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^    const Vector1& v1;$/;"	m	struct:mtl::vec::dot_index_evaluator
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Vector2 const& v2() const { return my_v2; }$/;"	f	class:mtl::mat::outer_product_functor
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Vector2 const& v2() const { return this->functor().v2(); }$/;"	f	class:mtl::mat::outer_product_matrix
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Vector2&       v2()       { return my_v2; }$/;"	f	class:mtl::mat::outer_product_functor
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    Vector2&       v2()       { return this->functor().v2(); }$/;"	f	class:mtl::mat::outer_product_matrix
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^	Value2 v2; $/;"	m	struct:mtl::tfunctor::divide_by
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^	Value2 v2;$/;"	m	struct:mtl::tfunctor::divide_by
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    const Vector2& v2;$/;"	m	struct:mtl::vec::dot_class
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^	Value2 v2; $/;"	m	struct:mtl::tfunctor::rscale
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^	Value2 v2;$/;"	m	struct:mtl::tfunctor::rscale
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    Value2 v2; $/;"	m	struct:mtl::tfunctor::right_max
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    Value2 v2; $/;"	m	struct:mtl::tfunctor::right_min
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    Value2 v2; $/;"	m	struct:mtl::tfunctor::right_minus
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/tfunctor_mixed.hpp	/^    Value2 v2; $/;"	m	struct:mtl::tfunctor::right_plus
v2	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^    const Vector2& v2;$/;"	m	struct:mtl::vec::dot_index_evaluator
v_	CS207/SDLViewer.hpp	/^    SDLViewer* v_;$/;"	m	struct:CS207::SDLViewer::safe_lock
v_	Examples/expr_template.cpp	/^  std::vector<double> v_;$/;"	m	struct:Matrix	file:
v_	Examples/trivial_copy.cpp	/^  T* v_;$/;"	m	class:Vector	file:
value	CS207/SDLViewer.hpp	/^  static constexpr GLenum value = V;$/;"	m	struct:CS207::gltype_v
value	Examples/Metrics.hpp	/^  T value;$/;"	m	struct:Metrics::Unit
value	Graph.hpp	/^	const node_value_type& value() const {$/;"	f	class:Graph::Node
value	Graph.hpp	/^	edge_value_type& value() const {$/;"	f	class:Graph::Edge
value	Graph.hpp	/^	node_value_type& value() {$/;"	f	class:Graph::Node
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/relaxation_parameter.hpp	/^    static const double value;$/;"	m	struct:itl::default_omega
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/smoother/relaxation_parameter.hpp	/^const double default_omega::value= 2.\/3.;$/;"	m	class:itl::default_omega
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_power_of_2.hpp	/^    static const bool value= X == least_significant_one_bit<X>::value;$/;"	m	struct:meta_math::is_power_of_2
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^	static bool const value = false;$/;"	m	struct:meta_math::impl::check_odd
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^	static bool const value = is_prime_to_max_odd<x, max_prime_compare<x>::value>::value;$/;"	m	struct:meta_math::impl::check_odd
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^	static bool const value = x % max_odd != 0$/;"	m	struct:meta_math::impl::is_prime_to_max_odd
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^                              value = tmp % 2 == 0 ? tmp + 1 : tmp + 2;$/;"	m	struct:meta_math::impl::max_prime_compare
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/is_prime.hpp	/^  static bool const value = impl::check_odd<x, x % 2 == 0>::value;$/;"	m	struct:meta_math::is_prime
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/least_significant_one_bit.hpp	/^    static const unsigned long value= ((X ^ (X-1)) + 1) >> 1;$/;"	m	struct:meta_math::least_significant_one_bit
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/log_2.hpp	/^    static const unsigned long tmp= X >> 1, value= log_2<tmp>::value + 1;$/;"	m	struct:meta_math::log_2
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/log_2.hpp	/^    static const unsigned long value= 0;$/;"	m	struct:meta_math::log_2
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/power_of_2.hpp	/^    static const unsigned long value= 1 << N;$/;"	m	struct:meta_math::power_of_2
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/meta_math/sqrt.hpp	/^    static bool const value = root * root <= x && (root+1) * (root+1) > x;$/;"	m	struct:meta_math::sqrt_check
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/base_cursor.hpp	/^    key_type value() const $/;"	f	class:mtl::detail::base_cursor
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    static T const value = 0;$/;"	m	struct:mtl::dilated::last_bit_helper
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    static T const value = BitMask & 1 ? 1 : last_bit_helper<T, tmp, tmp == 0>::value << 1;$/;"	m	struct:mtl::dilated::last_bit_helper
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    static T const value = T(-1) \/ T(3);$/;"	m	struct:mtl::dilated::even_bits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    static T const value = last_bit_helper<T, BitMask, BitMask == 0>::value;$/;"	m	struct:mtl::dilated::last_bit
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    static T const value = ~even_bits<T>::value;$/;"	m	struct:mtl::dilated::odd_bits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template <typename Value> struct use_long { static const bool value= sizeof(Value) > sizeof(int); };$/;"	m	struct:mtl::mat::umfpack::use_long
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template <typename Value> struct value         	    {};$/;"	s	namespace:mtl::mat::umfpack
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<double>                	    { typedef double               type; };$/;"	s	namespace:mtl::mat::umfpack
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<float>                 	    { typedef double               type; };$/;"	s	namespace:mtl::mat::umfpack
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<long double>           	    { typedef double               type; };$/;"	s	namespace:mtl::mat::umfpack
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<std::complex<double> > 	    { typedef std::complex<double> type; };$/;"	s	namespace:mtl::mat::umfpack
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<std::complex<float> >  	    { typedef std::complex<double> type; };$/;"	s	namespace:mtl::mat::umfpack
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	template<> struct value<std::complex<long double> > { typedef std::complex<double> type; };$/;"	s	namespace:mtl::mat::umfpack
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::string value(const std::complex<Value>&) const { return std::string("complex "); }$/;"	f	class:mtl::io::matrix_market_ostream
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    value(const Value&) const { return std::string("integer "); }$/;"	f	class:mtl::io::matrix_market_ostream
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    value(const Value&) const { return std::string("real "); }$/;"	f	class:mtl::io::matrix_market_ostream
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    value_type value(size_type r, size_type c) const$/;"	f	struct:mtl::mat::compressed2D_inserter
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    static const bool value= false;$/;"	m	struct:mtl::traits::detail::major_traversal
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    static const bool value= true;$/;"	m	struct:mtl::traits::detail::major_traversal
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	static std::size_t const value= 0;$/;"	m	class:mtl::mat::detail::dense2D_array_size::std
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	static std::size_t const value= dimensions::Num_Rows * dimensions::Num_Cols;$/;"	m	class:mtl::mat::detail::dense2D_array_size::std
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    struct value<mtl::mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_factors.hpp	/^    type value;$/;"	m	struct:mtl::operation::compute_one_factor
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^    CVector value;$/;"	m	struct:mtl::operation::compute_summand
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/compute_summand.hpp	/^    typename mtl::traits::copy_expression_const_ref_container<Expr>::type value;$/;"	m	struct:mtl::operation::compute_summand
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cross.hpp	/^					   typename Collection<Vector2>::value_type>::result_type value;$/;"	t	struct:mtl::vec::detail::cross_result
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	template <typename T> struct my_traits { static const bool value = boost::is_integral<T>::value && col_traits::exists; };$/;"	m	struct:mtl::operations::range_bracket_proxy::my_traits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	template <typename T> struct my_traits { static const bool value= boost::is_same<T, mtl::irange>::value && row_traits::exists; };$/;"	m	struct:mtl::operations::bracket_proxy::my_traits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^	    result_type  value;$/;"	m	struct:mtl::vec::max_pos_functor
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^	    result_type  value;$/;"	m	struct:mtl::vec::min_pos_functor
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_specialize.hpp	/^    static const unsigned long value= 2;$/;"	m	struct:mtl::mat::detail::dmat_dmat_mult_tiling1
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_specialize.hpp	/^    static const unsigned long value= 4;$/;"	m	struct:mtl::mat::detail::dmat_dmat_mult_tiling2
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/opteron/matrix_mult.hpp	/^        static const bool value= is_k_power_base_case_row_major_t_shark<base_case_bits, tooth_length, MaskA>::value$/;"	m	struct:mtl::detail::opteron_shark_teeth
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^	Value2 value() const { return v2; }$/;"	f	struct:mtl::tfunctor::rscale
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^	    Value1 value() const { return v1; }$/;"	f	struct:mtl::tfunctor::scale
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^    static const type value= 1;$/;"	m	struct:mtl::static_num_cols
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^    static const type value= Cols;    $/;"	m	struct:mtl::static_num_cols
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^    static const type value= Size;    $/;"	m	struct:mtl::static_num_cols
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_cols.hpp	/^    static const type value= traits::is_row_major<P>::value ? static_num_cols<typename P::dimension>::value : 1;   $/;"	m	struct:mtl::static_num_cols
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^    static const type value= Rows;    $/;"	m	struct:mtl::static_num_rows
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^    static const type value= Size;    $/;"	m	struct:mtl::static_num_rows
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^    static const type value= Size;$/;"	m	struct:mtl::static_num_rows
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_num_rows.hpp	/^    static const type value= traits::is_row_major<P>::value ? 1 : static_num_rows<typename P::dimension>::value;   $/;"	m	struct:mtl::static_num_rows
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/static_size.hpp	/^    static const type value= static_num_rows<Collection>::value * static_num_cols<Collection>::value;$/;"	m	struct:mtl::static_size
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const bool value= false;$/;"	m	struct:mtl::same_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const bool value= same_mask<lsb_bits<2*K, Mask>::value, col_major_mask<K>::value>::value;$/;"	m	struct:mtl::is_k_power_base_case_col_major
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const bool value= same_mask<lsb_bits<2*K, Mask>::value, col_major_shark_mask<K, T>::value>::value;$/;"	m	struct:mtl::is_k_power_base_case_col_major_t_shark
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const bool value= same_mask<lsb_bits<2*K, Mask>::value, row_major_mask<K>::value>::value;$/;"	m	struct:mtl::is_k_power_base_case_row_major
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const bool value= same_mask<lsb_bits<2*K, Mask>::value, row_major_shark_mask<K, T>::value>::value;$/;"	m	struct:mtl::is_k_power_base_case_row_major_t_shark
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const bool value= true;$/;"	m	struct:mtl::same_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const unsigned long value= (i_order_mask<N-2>::value << 2) | 1;$/;"	m	struct:mtl::i_order_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const unsigned long value= (lsb_mask<K-T>::value << (K+T)) | lsb_mask<T>::value;$/;"	m	struct:mtl::row_major_shark_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const unsigned long value= (lsb_mask<N-1>::value << 1) | 1;$/;"	m	struct:mtl::lsb_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const unsigned long value= (z_order_mask<N-2>::value << 2) | 2;$/;"	m	struct:mtl::z_order_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const unsigned long value= 0;$/;"	m	struct:mtl::lsb_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const unsigned long value= lsb_mask<K>::value << K;$/;"	m	struct:mtl::row_major_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const unsigned long value= lsb_mask<K>::value << T;$/;"	m	struct:mtl::col_major_shark_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const unsigned long value= lsb_mask<N>::value & Value;$/;"	m	struct:mtl::lsb_bits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^    static const unsigned long value= rec_part | base_part_type::value;$/;"	m	class:mtl::generate_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^	    const_reference value() const { return ref; }$/;"	f	struct:mtl::traits::impl::eval_self_ref
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^    const_reference value() { return prod; }$/;"	f	struct:mtl::traits::eval
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    Target  value;$/;"	m	struct:mtl::make_in_out_copy_or_reference
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    Target  value;$/;"	m	struct:mtl::make_out_copy_or_reference
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    Target value;$/;"	m	struct:mtl::make_in_copy_or_reference
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    Target& value;$/;"	m	struct:mtl::make_in_out_copy_or_reference
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    Target& value;$/;"	m	struct:mtl::make_out_copy_or_reference
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    const Target& value;$/;"	m	struct:mtl::make_in_copy_or_reference
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    static const std::size_t value= Value;$/;"	m	struct:mtl::type_para::morton_matrix_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/matrix_type_generator.hpp	/^	    static const std::size_t value= morton_mask;$/;"	m	struct:mtl::type_para::morton_matrix_mask
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/maybe.hpp	/^    Value value() const $/;"	f	struct:mtl::utilities::maybe
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    Value    value;$/;"	m	struct:mtl::multi_tmp
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/multi_tmp.hpp	/^    const Value value;$/;"	m	struct:mtl::multi_constant_from_array
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct value<mtl::mat::compressed2D<Elt, Parameters> >$/;"	s	namespace:mtl::traits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct value<mtl::mat::dense2D<Value, Parameters> >$/;"	s	namespace:mtl::traits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct value<mtl::mat::morton_dense<Elt, BitMask, Parameters> >$/;"	s	namespace:mtl::traits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct value<mtl::vec::dense_vector<Value, Parameters> >$/;"	s	namespace:mtl::traits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^struct value<mtl::vec::strided_vector_ref<Value, Parameters> >$/;"	s	namespace:mtl::traits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^template <class Matrix> struct value {};$/;"	s	namespace:mtl::traits
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^	static const ValueType                                   value= FirstValue;$/;"	m	struct:mtl::static_vector
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/type_parameter.hpp	/^	    typedef typename boost::mpl::at<TypePara, kind>::type   value;$/;"	t	struct:mtl::type_para::set_para
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^	                    value= (tmp2 & 3) == 3 ? tmp2 ^ 1 : tmp2;           \/\/ for conj turn off const$/;"	m	struct:mtl::traits::view_normalize_const
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^    static const unsigned value= 0; \/\/\/< Default is zero$/;"	m	struct:mtl::traits::view_code
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^    static const unsigned value= ViewCode::value & ~1;$/;"	m	struct:mtl::traits::view_remove_const
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^    static const unsigned value= ViewCode::value ^ 4;$/;"	m	struct:mtl::traits::view_toggle_trans
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^    static const unsigned value= ViewCode::value | 1;$/;"	m	struct:mtl::traits::view_add_const
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^    static const unsigned value= view_code<Matrix>::value ^ 2; \/\/\/< Toggle conjugation bit$/;"	m	struct:mtl::traits::view_code
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^    static const unsigned value= view_code<Matrix>::value ^ 4; \/\/\/< Toggle transposition bit$/;"	m	struct:mtl::traits::view_code
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^    static const unsigned value= view_code<Matrix>::value ^ 6; \/\/\/< Toggle transposition and conjugation bit$/;"	m	struct:mtl::traits::view_code
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^    static const unsigned value= view_code<T>::value | 1; \/\/\/< Toggle constancy bit$/;"	m	struct:mtl::traits::view_code
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^    static const unsigned value= view_normalize_const<ViewCode::value ^ 2>::value;$/;"	m	struct:mtl::traits::view_toggle_conj
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^    static const unsigned value= view_normalize_const<ViewCode::value ^ 6>::value;$/;"	m	struct:mtl::traits::view_toggle_hermitian
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^	static size_type const value= 0; \/\/ for compatibility$/;"	m	struct:mtl::vec::non_fixed::dimension
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^	static size_type const value= Size;$/;"	m	struct:mtl::vec::fixed::dimension
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    value_type const& value(size_type j) const { check(j); return data[j]; }$/;"	f	class:mtl::vec::sparse_vector
value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    value_type&       value(size_type j)       { check(j); return data[j]; }$/;"	f	class:mtl::vec::sparse_vector
value	Mesh.hpp	/^		UserTriData& value() {$/;"	f	class:Mesh::Triangle
value	Mesh.hpp	/^		const UserTriData& value() const {$/;"	f	class:Mesh::Triangle
value0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/unroll_size1.hpp	/^    static const unsigned value0= 4;$/;"	m	struct:mtl::traits::unroll_size1
value0	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/unroll_size1.hpp	/^    static const unsigned value0= BSize;$/;"	m	struct:mtl::traits::unroll_size1
value_	Graph.hpp	/^	edge_value_type& value_() const {$/;"	f	class:Graph::IncidentIterator
value_a	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	typename mtl::traits::const_value<Matrix>::type  value_a; $/;"	m	struct:mtl::mat::detail::lower_trisolve_t
value_a	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	typename mtl::traits::const_value<Matrix>::type  value_a; $/;"	m	struct:mtl::mat::detail::upper_trisolve_t
value_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    value_array_type const& value_array() const { return values; } \/\/\/< Array of values (const)$/;"	f	class:mtl::mat::coordinate2D
value_array	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    value_array_type& value_array() { return values; }             \/\/\/< Array of values (mutable)$/;"	f	class:mtl::mat::coordinate2D
value_array_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef std::vector< value_type >                                   value_array_type ;$/;"	t	class:mtl::mat::coordinate2D
value_from_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    const value_type& value_from_offset(size_type offset) const$/;"	f	class:mtl::mat::compressed2D
value_from_offset	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    value_type& value_from_offset(size_type offset)$/;"	f	class:mtl::mat::compressed2D
value_from_other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    explicit value_from_other(Matrix const& matrix) $/;"	f	struct:mtl::detail::value_from_other
value_from_other	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^struct value_from_other$/;"	s	namespace:mtl::detail
value_heap	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    value_type*   value_heap;$/;"	m	class:mtl::mat::element_structure
value_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^inline value_map(Matrix& A)$/;"	f	class:mtl::mat::mtl::traits::value
value_map	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^inline value_map(Vector& A)$/;"	f	class:mtl::vec::mtl::traits::value
value_n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    const value_type& value_n(size_t offset) const $/;"	f	struct:mtl::detail::memory_crtp
value_n	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    value_type& value_n(size_t offset)$/;"	f	struct:mtl::detail::memory_crtp
value_shape	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    typedef typename mtl::ashape::ashape<typename matrix_type::value_type>::type value_shape;$/;"	t	struct:mtl::operations::update_proxy
value_type	CS207/Color.hpp	/^  typedef float value_type;$/;"	t	struct:CS207::Color
value_type	Examples/Metrics.hpp	/^  typedef T value_type;$/;"	t	struct:Metrics::Unit
value_type	Graph.hpp	/^    typedef Edge value_type;$/;"	t	class:Graph::EdgeIterator
value_type	Graph.hpp	/^    typedef Edge value_type;$/;"	t	class:Graph::IncidentIterator
value_type	Graph.hpp	/^    typedef Node value_type;$/;"	t	class:Graph::NodeIterator
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	typedef ValueType value_type;$/;"	t	class:utils::binary_heap
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/diagonal.hpp	/^    typedef Value                                         value_type;$/;"	t	class:itl::pc::diagonal
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    typedef Value                                                    value_type;$/;"	t	class:itl::pc::ic_0
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/identity.hpp	/^    typedef typename mtl::Collection<Matrix>::value_type  value_type;$/;"	t	class:itl::pc::identity
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef Value                                         value_type;$/;"	t	class:itl::pc::ilu
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ilu.hpp	/^    typedef typename mtl::Collection<Matrix>::value_type  value_type;$/;"	t	class:itl::pc::ilu
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	typedef ValType value_type;$/;"	t	class:itl::pc::imf_preconditioner
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/armijo.hpp	/^    typedef Value   value_type;$/;"	t	class:itl::armijo
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/wolf.hpp	/^    typedef Value   value_type;$/;"	t	class:itl::wolf
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^				       typename Collection<E2>::value_type>::result_type value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^				       typename Collection<VectorIn>::value_type>::result_type value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^				 typename Collection<E2>::value_type>::result_type value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef Value            	       value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef Value            value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Addable<ft, st>::result_type                 value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection< Matrix >::value_type value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<E1>::value_type                   value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<E1>::value_type value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<Matrix>::value_type               value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<Matrix>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Collection<Vector>::value_type value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename Multiplicable<ft, st>::result_type           value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename SFunctor::result_type value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename boost::remove_const<Value>::type            value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::banded_view<Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::conj_view<Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::hilbert_matrix<Value>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::imag_view<Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::implicit_dense<Functor>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::negate_view<Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::ones_matrix<Value>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::outer_product_matrix<Vector1, Vector2>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::real_view<Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::rscaled_view<Coll,RScaling>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mat::scaled_view<Scaling, Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::multi_vector<Vector>::value_type       value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::multi_vector_range<Vector>::value_type       value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename mtl::mat::transposed_view<Matrix>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename std::vector<Value>::value_type      value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::conj_view<Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::imag_view<Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::map_view<Functor, Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::negate_view<Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/concept/collection.hpp	/^	typedef typename vec::real_view<Coll>::value_type        value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    typedef Value                             value_type;$/;"	t	struct:mtl::detail::contiguous_memory_block
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    typedef Value                             value_type;$/;"	t	struct:mtl::detail::memory_crtp
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/dilated_int.hpp	/^    typedef T                                       value_type;$/;"	t	struct:mtl::dilated::dilated_int
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    typedef T                          value_type;$/;"	t	struct:mtl::dilated::masked_dilation_tables
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/trivial_inserter.hpp	/^    typedef typename matrix_type::value_type            value_type;$/;"	t	struct:mtl::detail::trivial_inserter
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef double                                    value_type;$/;"	t	class:mtl::mat::umfpack::solver
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef std::complex<double>                      value_type;$/;"	t	class:mtl::mat::umfpack::solver
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    typedef typename value<Value>::type                      value_type;$/;"	t	struct:mtl::mat::umfpack::matrix_copy
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	    typedef typename Matrix::value_type            value_type;$/;"	t	struct:mtl::traits::detail::banded_value
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef typename Matrix::value_type                value_type;$/;"	t	struct:mtl::mat::banded_view
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_matrix.hpp	/^    typedef Elt                               value_type;$/;"	t	struct:mtl::mat::base_matrix
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/base_sub_matrix.hpp	/^    typedef Elt                               value_type;$/;"	t	struct:mtl::mat::base_sub_matrix
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    typedef typename Collection<Matrix>::value_type value_type;$/;"	t	class:mtl::mat::block_diagonal2D
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^	typedef typename matrix_type::value_type                                      value_type;$/;"	t	struct:mtl::traits::range_generator
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef Elt                                      value_type;$/;"	t	class:mtl::mat::compressed2D
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef Elt                           value_type;$/;"	t	struct:mtl::mat::compressed_el_cursor
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef Elt                           value_type;$/;"	t	struct:mtl::mat::compressed_minor_cursor
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    typedef typename matrix_type::value_type  value_type;$/;"	t	struct:mtl::mat::compressed2D_inserter
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef Value                                                       value_type;$/;"	t	class:mtl::mat::coordinate2D
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    typedef typename matrix_type::value_type            value_type;$/;"	t	struct:mtl::mat::coordinate2D_inserter
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^	    typedef typename matrix_type::value_type                                      value_type;$/;"	t	struct:mtl::traits::detail::dense2D_iterator_range_generator
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/dense2D.hpp	/^    typedef Value                             value_type;$/;"	t	class:mtl::mat::dense2D
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element.hpp	/^    typedef ValType value_type;$/;"	t	class:mtl::mat::element
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    typedef ValueType value_type;$/;"	t	class:mtl::mat::element_structure
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef Value                                      value_type;$/;"	t	class:mtl::mat::ell_matrix
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef Value                             value_type;$/;"	t	struct:mtl::mat::ell_matrix_inserter
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/hermitian_view.hpp	/^    typedef typename Collection<Matrix>::value_type                value_type;$/;"	t	struct:mtl::mat::hermitian_view
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/identity2D.hpp	/^	typedef double         value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/implicit_dense.hpp	/^    typedef typename Functor::result_type              value_type;$/;"	t	class:mtl::mat::implicit_dense
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/indirect.hpp	/^    typedef typename Collection<Matrix>::value_type value_type;$/;"	t	struct:mtl::mat::indirect
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^	    typedef typename mtl::mat::map_view<Functor, Matrix>::value_type value_type;$/;"	t	struct:mtl::traits::detail::map_value
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef typename Functor::result_type              value_type;$/;"	t	struct:mtl::mat::map_view
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_op_expr.hpp	/^    typedef typename SFunctor::result_type      value_type;$/;"	t	struct:mtl::mat::mat_mat_op_expr
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^	    typedef typename matrix_type::value_type                                      value_type;$/;"	t	struct:mtl::traits::detail::morton_dense_iterator_range_generator
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef Elt                               value_type;$/;"	t	class:mtl::mat::morton_dense
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Matrix::value_type                 value_type;$/;"	t	struct:mtl::mat::morton_dense_col_const_iterator
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Matrix::value_type                 value_type;$/;"	t	struct:mtl::mat::morton_dense_col_iterator
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Matrix::value_type                 value_type;$/;"	t	struct:mtl::mat::morton_dense_row_const_iterator
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/morton_dense.hpp	/^    typedef typename Matrix::value_type                 value_type;$/;"	t	struct:mtl::mat::morton_dense_row_iterator
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    typedef typename Collection<Vector>::value_type  value_type;$/;"	t	class:mtl::mat::multi_vector
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    typedef typename Collection<Vector>::value_type  value_type;$/;"	t	class:mtl::mat::multi_vector_range
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/poisson2D_dirichlet.hpp	/^	typedef double value_type;$/;"	t	struct:mtl::Collection
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef Value                                                            value_type;$/;"	t	struct:mtl::mat::sparse_banded_inserter
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    typedef Value                                      value_type;$/;"	t	class:mtl::mat::sparse_banded
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/transposed_view.hpp	/^    typedef typename Matrix::value_type                value_type;$/;"	t	struct:mtl::mat::transposed_view
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    typedef typename ref_type::value_type      value_type;$/;"	t	struct:mtl::ColumnInMatrix
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    typedef typename Collection<Matrix>::value_type   value_type;$/;"	t	class:mtl::mat::eigenvalue_solver
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    typedef typename Collection<Matrix>::value_type   value_type;$/;"	t	class:mtl::mat::givens
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^    typedef typename Collection<Vector>::value_type   value_type;$/;"	t	class:mtl::vec::givens
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/inv.hpp	/^	typedef typename Collection<Matrix>::value_type    value_type;$/;"	t	struct:mtl::mat::traits::inv
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	typedef typename Collection<Matrix>::value_type         	       	    value_type;$/;"	t	struct:mtl::mat::detail::lower_trisolve_t
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	/^    typedef typename Collection<ValueVector>::value_type value_type;$/;"	t	struct:mtl::vec::make_sparse_trait
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_cvec_times_expr.hpp	/^				   typename Collection<E2>::value_type>::result_type   value_type;$/;"	t	struct:mtl::mat_cvec_times_expr
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/matrix_bracket.hpp	/^	typedef typename Matrix::value_type      value_type;$/;"	t	struct:mtl::operations::bracket_proxy
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^	    typedef typename Collection<Vector>::value_type       value_type;$/;"	t	struct:mtl::vec::max_pos_functor
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^	    typedef typename Collection<Vector>::value_type       value_type;$/;"	t	struct:mtl::vec::min_pos_functor
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/qr_givens.hpp	/^    typedef typename Collection<Matrix>::value_type value_type;$/;"	t	class:mtl::mat::qr_givens_solver
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    typedef typename ref_type::value_type      value_type;$/;"	t	struct:mtl::RowInMatrix
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^    typedef typename Collection<Vector>::value_type   value_type;$/;"	t	class:mtl::vec::secular_f
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/update.hpp	/^    typedef typename Inserter::value_type  value_type;$/;"	t	struct:mtl::operations::update_proxy
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	typedef typename Collection<Matrix>::value_type           value_type;$/;"	t	struct:mtl::mat::detail::upper_trisolve_t
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/dense_el_cursor.hpp	/^    typedef Value                           value_type;$/;"	t	struct:mtl::dense_el_cursor
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/iterator_adaptor_1D.hpp	/^    typedef typename Matrix::value_type                    value_type;$/;"	t	struct:mtl::traits::range_generator
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::value_type value_type;$/;"	t	struct:mtl::detail::direct_value
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::value_type value_type;$/;"	t	struct:mtl::detail::matrix_offset_value
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename Matrix::value_type value_type;$/;"	t	struct:mtl::detail::matrix_value_ref
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename other::value_type value_type;$/;"	t	struct:mtl::detail::const_value_from_other
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map_impl.hpp	/^    typedef typename other::value_type value_type;$/;"	t	struct:mtl::detail::value_from_other
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/static_vector.hpp	/^	typedef ValueType                                        value_type;$/;"	t	struct:mtl::static_vector
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/strided_dense_el_cursor.hpp	/^    typedef Value                                        value_type;$/;"	t	struct:mtl::strided_dense_el_cursor
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^	typedef mtl::utility::zip_value<T, U>  value_type;$/;"	t	struct:std::iterator_traits
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^    typedef typename E1::value_type              value_type;$/;"	t	class:mtl::vec::vec_vec_asgn_expr
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^    typedef Value             value_type ; $/;"	t	class:mtl::vec::dense_vector
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    typedef typename Collection<Vector>::value_type value_type;$/;"	t	class:mtl::vec::extracter
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    typedef typename Collection<Vector>::value_type value_type;$/;"	t	struct:mtl::vec::indexbuffer
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    typedef typename Collection<Vector>::value_type  value_type;$/;"	t	struct:mtl::vec::inserter
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    typedef typename Inserter::value_type  value_type;$/;"	t	struct:mtl::vec::update_proxy
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^	    typedef typename vec::map_view<Functor, Vector>::value_type value_type;$/;"	t	struct:mtl::vec::detail::map_value
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^    typedef typename Functor::result_type              value_type;$/;"	t	struct:mtl::vec::map_view
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^				   typename Collection<VectorIn>::value_type>::result_type value_type;$/;"	t	struct:mtl::vec::mat_cvec_multiplier
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    typedef typename mtl::Collection<VectorOut>::value_type        value_type;$/;"	t	struct:mtl::vec::row_mat_cvec_index_evaluator
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/rvec_mat_times_expr.hpp	/^				   typename Collection<E2>::value_type>::result_type   value_type;$/;"	t	struct:mtl::vec::rvec_mat_times_expr
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    typedef Value                           value_type;$/;"	t	class:mtl::vec::sparse_vector
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    typedef typename boost::remove_const<Value>::type                                value_type ; $/;"	t	class:mtl::vec::strided_vector_ref
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^    typedef typename Collection<Vector>::value_type value_type;$/;"	t	class:mtl::vec::unrolled1
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^    typedef typename Vector::value_type          value_type;$/;"	t	struct:mtl::vec::vec_const_ref_expr
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    typedef typename E1::value_type              value_type;$/;"	t	struct:mtl::vec::vec_scal_aop_expr
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    typedef typename Collection<E1>::value_type  value_type;$/;"	t	struct:mtl::vec::vec_vec_aop_expr
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    typedef typename SFunctor::result_type       value_type;$/;"	t	struct:mtl::vec::vec_vec_op_expr
value_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    typedef const_dereference_type                                value_type;$/;"	t	struct:mtl::vec::vec_vec_pmop_expr
value_type	Mesh.hpp	/^			typedef Triangle value_type;$/;"	t	class:Mesh::AdjacentIterator
value_type	Mesh.hpp	/^			typedef Triangle value_type;$/;"	t	class:Mesh::TriangleIterator
value_type	Point.hpp	/^  typedef double          value_type;$/;"	t	struct:Point
value_type	mtl_test.cpp	/^	typedef double value_type;$/;"	t	struct:mtl::Collection	file:
value_type	poisson.cpp	/^	typedef double value_type;$/;"	t	struct:mtl::Collection	file:
value_type	subgraph.cpp	/^  typedef typename std::iterator_traits<It>::value_type        value_type;$/;"	t	class:filter_iterator	file:
values	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    value_array_type          values;$/;"	m	class:mtl::mat::coordinate2D
vampir_trace	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/vpt.hpp	/^class vampir_trace$/;"	c	namespace:mtl::vpt
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/permutation.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/reorder.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_conditional_fwd.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/assign_each_nonzero.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/conj.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/crop.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cross.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/diagonal.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/divide_by.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry1D.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/entry_similar.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_index_evaluator.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/givens.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/householder.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/imag.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/infinity_norm.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/iota.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/left_scale_inplace.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/look_at_each_nonzero.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/make_sparse.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_cvec_times_expr.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_abs_pos.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/max_pos.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/merge_complex_vector.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/min_pos.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/one_norm.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/operators.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/orth.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print_vector.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/product.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/random.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/real.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/resource.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rscale.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/rvec_mat_mult.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/scale.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^    namespace vec { $/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/set_to_zero.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/size1D.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sort.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/split_complex_vector.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/sum.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/swap_row.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/trans.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/two_norm.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/unary_dot.hpp	/^    namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/eval.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/property_map.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assigner.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/crtp_base_vector.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/decrementer.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dense_vector.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dimension.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    const Vector& vec;$/;"	m	struct:mtl::vec::indexbuffer
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^namespace mtl {	namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/incrementer.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/lazy_reduction.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^namespace mtl { namespace vec { namespace detail {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/map_view.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mapped_inserter.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/mat_cvec_multiplier.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/parameter.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_functors.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/rvec_mat_times_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unit_vector.hpp	/^namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/unrolled1.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_negate_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_div_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_minus_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_mixed_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_plus_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_times_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_div_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_ele_prod_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_ele_quot_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_minus_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_minus_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_plus_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_plus_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_times_asgn_expr.hpp	/^namespace mtl { namespace vec {$/;"	n	namespace:mtl
vec_const_ref_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^    vec_const_ref_expr(const Vector& ref) : ref(ref) {}$/;"	f	struct:mtl::vec::vec_const_ref_expr
vec_const_ref_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_const_ref_expr.hpp	/^struct vec_const_ref_expr$/;"	s	namespace:mtl::vec
vec_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_expr.hpp	/^struct vec_expr {};$/;"	s	namespace:mtl::vec
vec_mult_result	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct vec_mult_result $/;"	s	namespace:mtl::traits
vec_mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct vec_mult_result_aux {};$/;"	s	namespace:mtl::traits
vec_mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct vec_mult_result_aux<Op1, Op2, ::mtl::ashape::cvec_rvec_mult> $/;"	s	namespace:mtl::traits
vec_mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct vec_mult_result_aux<Op1, Op2, ::mtl::ashape::cvec_scal_mult> $/;"	s	namespace:mtl::traits
vec_mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct vec_mult_result_aux<Op1, Op2, ::mtl::ashape::rvec_mat_mult> $/;"	s	namespace:mtl::traits
vec_mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct vec_mult_result_aux<Op1, Op2, ::mtl::ashape::rvec_scal_mult> $/;"	s	namespace:mtl::traits
vec_mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct vec_mult_result_aux<Op1, Op2, ::mtl::ashape::scal_cvec_mult> $/;"	s	namespace:mtl::traits
vec_mult_result_aux	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mult_result.hpp	/^struct vec_mult_result_aux<Op1, Op2, ::mtl::ashape::scal_rvec_mult> $/;"	s	namespace:mtl::traits
vec_para	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    typedef mtl::vec::parameters<row_major>    vec_para;$/;"	t	struct:mtl::RowInMatrix
vec_para	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    typedef vec::parameters<row_major>      vec_para;$/;"	t	struct:mtl::RowInMatrix
vec_scal_aop_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    vec_scal_aop_expr( first_argument_type& v1, second_argument_type const& v2, bool delay= false )$/;"	f	struct:mtl::vec::vec_scal_aop_expr
vec_scal_aop_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^struct vec_scal_aop_expr $/;"	s	namespace:mtl::vec
vec_scal_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_asgn_expr.hpp	/^    vec_scal_asgn_expr( E1& v1, E2 const& v2 )$/;"	f	struct:mtl::vec::vec_scal_asgn_expr
vec_scal_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_asgn_expr.hpp	/^struct vec_scal_asgn_expr $/;"	s	namespace:mtl::vec
vec_scal_div_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_div_asgn_expr.hpp	/^		vec_scal_div_asgn_expr( E1& v1, E2 const& v2 )$/;"	f	struct:mtl::vec::vec_scal_div_asgn_expr
vec_scal_div_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_div_asgn_expr.hpp	/^	struct vec_scal_div_asgn_expr $/;"	s	namespace:mtl::vec
vec_scal_minus_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_minus_asgn_expr.hpp	/^    vec_scal_minus_asgn_expr( E1& v1, E2 const& v2 )$/;"	f	struct:mtl::vec::vec_scal_minus_asgn_expr
vec_scal_minus_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_minus_asgn_expr.hpp	/^struct vec_scal_minus_asgn_expr $/;"	s	namespace:mtl::vec
vec_scal_plus_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_plus_asgn_expr.hpp	/^    vec_scal_plus_asgn_expr( E1& v1, E2 const& v2 )$/;"	f	struct:mtl::vec::vec_scal_plus_asgn_expr
vec_scal_plus_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_plus_asgn_expr.hpp	/^struct vec_scal_plus_asgn_expr $/;"	s	namespace:mtl::vec
vec_scal_times_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_times_asgn_expr.hpp	/^    vec_scal_times_asgn_expr( E1& v1, E2 const& v2 )$/;"	f	struct:mtl::vec::vec_scal_times_asgn_expr
vec_scal_times_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_times_asgn_expr.hpp	/^struct vec_scal_times_asgn_expr $/;"	s	namespace:mtl::vec
vec_vec_aop_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    vec_vec_aop_expr( first_argument_type& v1, second_argument_type const& v2, bool delay= false )$/;"	f	struct:mtl::vec::vec_vec_aop_expr
vec_vec_aop_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^struct vec_vec_aop_expr $/;"	s	namespace:mtl::vec
vec_vec_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^    vec_vec_asgn_expr( first_argument_type& v1, second_argument_type const& v2 )$/;"	f	class:mtl::vec::vec_vec_asgn_expr
vec_vec_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^class vec_vec_asgn_expr $/;"	c	namespace:mtl::vec
vec_vec_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_asgn_expr.hpp	/^    vec_vec_asgn_expr( E1& v1, E2 const& v2 )$/;"	f	struct:mtl::vec::vec_vec_asgn_expr
vec_vec_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_asgn_expr.hpp	/^struct vec_vec_asgn_expr $/;"	s	namespace:mtl::vec
vec_vec_div_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_div_asgn_expr.hpp	/^    vec_vec_div_asgn_expr( E1& v1, E2 const& v2 )$/;"	f	struct:mtl::vec::vec_vec_div_asgn_expr
vec_vec_div_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_div_asgn_expr.hpp	/^struct vec_vec_div_asgn_expr $/;"	s	namespace:mtl::vec
vec_vec_minus_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_minus_asgn_expr.hpp	/^    vec_vec_minus_asgn_expr( E1& v1, E2 const& v2 )$/;"	f	struct:mtl::vec::vec_vec_minus_asgn_expr
vec_vec_minus_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_minus_asgn_expr.hpp	/^struct vec_vec_minus_asgn_expr $/;"	s	namespace:mtl::vec
vec_vec_op_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^    vec_vec_op_expr( first_argument_type const& v1, second_argument_type const& v2 )$/;"	f	struct:mtl::vec::vec_vec_op_expr
vec_vec_op_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_op_expr.hpp	/^struct vec_vec_op_expr $/;"	s	namespace:mtl::vec
vec_vec_plus_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_plus_asgn_expr.hpp	/^    vec_vec_plus_asgn_expr( E1& v1, E2 const& v2 )$/;"	f	struct:mtl::vec::vec_vec_plus_asgn_expr
vec_vec_plus_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_plus_asgn_expr.hpp	/^struct vec_vec_plus_asgn_expr $/;"	s	namespace:mtl::vec
vec_vec_pmop_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^    vec_vec_pmop_expr( E1 const& v1, E2 const& v2 ) $/;"	f	struct:mtl::vec::vec_vec_pmop_expr
vec_vec_pmop_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_pmop_expr.hpp	/^struct vec_vec_pmop_expr$/;"	s	namespace:mtl::vec
vec_vec_times_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_times_asgn_expr.hpp	/^    vec_vec_times_asgn_expr( E1& v1, E2 const& v2 )$/;"	f	struct:mtl::vec::vec_vec_times_asgn_expr
vec_vec_times_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_times_asgn_expr.hpp	/^struct vec_vec_times_asgn_expr $/;"	s	namespace:mtl::vec
vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    vector(S c) const$/;"	f	struct:mtl::mat::map_view
vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    vector_type vector(std::size_t c) const { return vector_type(this->first.vector(c), this->second.vector(c)); }$/;"	f	struct:mtl::mat::mv_mv_minus_expr
vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    vector_type vector(std::size_t c) const { return vector_type(this->first.vector(c), this->second.vector(c)); }$/;"	f	struct:mtl::mat::mv_mv_plus_expr
vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    Vector& vector(size_type i) { return data[i]; }$/;"	f	class:mtl::mat::multi_vector
vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    const Vector& vector(size_type i) const { return data[i]; }$/;"	f	class:mtl::mat::multi_vector
vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    multi_vector_range<Vector> vector(irange const& r) const { return multi_vector_range<Vector>(*this, r); }$/;"	f	class:mtl::mat::multi_vector
vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector_range.hpp	/^    const Vector& vector(size_type i) const { return ref.vector(r.to_range(i)); }$/;"	f	class:mtl::mat::multi_vector_range
vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct vector : virtual collection {};$/;"	s	namespace:mtl::tag
vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/inserter.hpp	/^    Vector&    vector;$/;"	m	struct:mtl::vec::inserter
vector_copy	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void vector_copy(const VectorSrc& src, VectorDest& dest)$/;"	f	namespace:mtl
vector_copy_minus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void vector_copy_minus(const VectorSrc& src, VectorDest& dest)$/;"	f	namespace:mtl
vector_copy_plus	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^    inline void vector_copy_plus(const VectorSrc& src, VectorDest& dest)$/;"	f	namespace:mtl
vector_parameter_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	struct vector_parameter_generator$/;"	s	namespace:mtl::type_para
vector_parameters	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	    typedef typename vector_parameter_generator<TypePara>::type  vector_parameters;$/;"	t	struct:mtl::type_para::vector_type_generator
vector_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/tag.hpp	/^struct vector_ref : virtual vector {};$/;"	s	namespace:mtl::tag
vector_resource	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/resource.hpp	/^	struct vector_resource$/;"	s	namespace:mtl::traits
vector_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/column_in_matrix.hpp	/^    static inline size_type vector_size(const Ref& A, const irange& row_range)$/;"	f	struct:mtl::ColumnInMatrix
vector_size	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/row_in_matrix.hpp	/^    static inline size_type vector_size(const Ref& A, const irange& col_range)$/;"	f	struct:mtl::RowInMatrix
vector_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	typedef mtl::dense_vector<value_type> vector_type;$/;"	t	class:itl::pc::imf_preconditioner
vector_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef typename boost::mpl::eval_if<mtl::traits::is_multi_vector_expr<Matrix>, detail::map_vector<Functor, Matrix>, dummy>::type vector_type;$/;"	t	struct:mtl::mat::map_view
vector_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_minus_expr.hpp	/^    typedef mtl::vec::vec_vec_pmop_expr< V1, V2, mtl::sfunctor::minus<typename V1::value_type, typename V2::value_type> > vector_type;$/;"	t	struct:mtl::mat::mv_mv_minus_expr
vector_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/mat_mat_plus_expr.hpp	/^    typedef mtl::vec::vec_vec_pmop_expr< V1, V2, mtl::sfunctor::plus<typename V1::value_type, typename V2::value_type> > vector_type;$/;"	t	struct:mtl::mat::mv_mv_plus_expr
vector_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    typedef Vector                                   vector_type;$/;"	t	class:mtl::mat::multi_vector
vector_type_generator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/vector_type_generator.hpp	/^	struct vector_type_generator$/;"	s	namespace:mtl::type_para
velocity	mass_spring.cpp	/^  Point velocity;  \/\/< Node velocity$/;"	m	struct:NodeData	file:
version	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	struct version$/;"	s	struct:mtl::mat::detail::lower_trisolve_t
version	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/lower_trisolve.hpp	/^	struct version<compressed2D<Value, Para>, D, true>$/;"	s	struct:mtl::mat::detail::lower_trisolve_t
version	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	struct version$/;"	s	struct:mtl::mat::detail::upper_trisolve_t
version	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/upper_trisolve.hpp	/^	struct version<compressed2D<Value, Para>, D, true>$/;"	s	struct:mtl::mat::detail::upper_trisolve_t
vert_edge	Mesh.hpp	/^	typedef typename VertGraph::edge_type vert_edge;$/;"	t	class:Mesh
vert_node	Mesh.hpp	/^	typedef typename VertGraph::node_type vert_node;$/;"	t	class:Mesh
vertex	Mesh.hpp	/^		vert_node vertex(size_type i) {$/;"	f	class:Mesh::Triangle
vertex_data	Mesh.hpp	/^		vertex_data(UserNodeData data = UserNodeData()) : data_(data) {\/* triangles starts empty*\/}$/;"	f	struct:Mesh::vertex_data
vertex_data	Mesh.hpp	/^	typedef struct vertex_data {$/;"	s	class:Mesh
vertex_data	Mesh.hpp	/^	} vertex_data;$/;"	t	class:Mesh	typeref:struct:Mesh::vertex_data
vertex_graph_	Mesh.hpp	/^	VertGraph vertex_graph_;$/;"	m	class:Mesh
vertex_iterator	Mesh.hpp	/^	typedef typename VertGraph::node_iterator vertex_iterator;$/;"	t	class:Mesh
view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^	      view         \/\/< View of other's memory (e.g. sub-matrix), different construction than external$/;"	e	enum:mtl::detail::contiguous_memory_block::c_t
view	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	    view_type const&                                view;$/;"	m	struct:mtl::traits::detail::banded_value
view_add_const	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_add_const$/;"	s	namespace:mtl::traits
view_category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    template <> struct view_category<tag::compressed2D> { typedef tag::compressed2D_view  type; };$/;"	s	namespace:mtl::traits::detail
view_category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    template <> struct view_category<tag::dense2D>      { typedef tag::dense2D_view       type; };$/;"	s	namespace:mtl::traits::detail
view_category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    template <> struct view_category<tag::morton_dense> { typedef tag::morton_view        type; };$/;"	s	namespace:mtl::traits::detail
view_category	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/category.hpp	/^    template <typename Cat>  struct view_category       { typedef Cat                     type; };$/;"	s	namespace:mtl::traits::detail
view_code	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_code$/;"	s	namespace:mtl::traits
view_code	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_code< mat::conj_view<Matrix> >$/;"	s	namespace:mtl::traits
view_code	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_code<const T>$/;"	s	namespace:mtl::traits
view_code	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_code<mtl::mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl::traits
view_code	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_code<mtl::mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
view_normalize_const	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_normalize_const$/;"	s	namespace:mtl::traits
view_point	CS207/GLCamera.hpp	/^  inline void view_point(const Point& p) {$/;"	f	class:CS207::GLCamera
view_point	CS207/GLCamera.hpp	/^  inline void view_point(float x, float y, float z) {$/;"	f	class:CS207::GLCamera
view_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/view_ref.hpp	/^inline Matrix& view_ref(Matrix& A)$/;"	f	namespace:mtl::mat
view_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/view_ref.hpp	/^inline Matrix& view_ref(transposed_view<Matrix>& A)$/;"	f	namespace:mtl::mat
view_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/view_ref.hpp	/^inline const Matrix& view_ref(const Matrix& A)$/;"	f	namespace:mtl::mat
view_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/view_ref.hpp	/^inline const Matrix& view_ref(const conj_view<Matrix>& A)$/;"	f	namespace:mtl::mat
view_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/view_ref.hpp	/^inline const Matrix& view_ref(const hermitian_view<Matrix>& A)$/;"	f	namespace:mtl::mat
view_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/view_ref.hpp	/^inline const Matrix& view_ref(const transposed_view<Matrix>& A)$/;"	f	namespace:mtl::mat
view_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/view_ref.hpp	/^inline const Matrix& view_ref(transposed_view<const Matrix>& A)$/;"	f	namespace:mtl::mat
view_remove_const	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_remove_const$/;"	s	namespace:mtl::traits
view_toggle_conj	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_toggle_conj$/;"	s	namespace:mtl::traits
view_toggle_hermitian	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_toggle_hermitian$/;"	s	namespace:mtl::traits
view_toggle_trans	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/view_code.hpp	/^struct view_toggle_trans$/;"	s	namespace:mtl::traits
view_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^	    typedef banded_view<Matrix>                    view_type;$/;"	t	struct:mtl::traits::detail::banded_value
view_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/banded_view.hpp	/^    typedef mtl::mat::banded_view<Matrix>                                           view_type;$/;"	t	struct:mtl::mat::sub_matrix_t
view_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/map_view.hpp	/^    typedef mtl::mat::map_view<Functor, Matrix>                                     view_type;$/;"	t	struct:mtl::mat::sub_matrix_t
viewed_collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/viewed_collection.hpp	/^struct viewed_collection$/;"	s	namespace:mtl::traits
viewed_collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/viewed_collection.hpp	/^struct viewed_collection< mat::conj_view<Matrix> >$/;"	s	namespace:mtl::traits
viewed_collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/viewed_collection.hpp	/^struct viewed_collection< mat::hermitian_view<Matrix> >$/;"	s	namespace:mtl::traits
viewed_collection	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/viewed_collection.hpp	/^struct viewed_collection< mat::transposed_view<Matrix> >$/;"	s	namespace:mtl::traits
viewer	poisson.cpp	/^		CS207::SDLViewer viewer;$/;"	m	class:itl::visual_iteration	file:
visual_iteration	poisson.cpp	/^			visual_iteration(const GraphType& g, const Vector& u, $/;"	f	class:itl::visual_iteration
visual_iteration	poisson.cpp	/^	class visual_iteration : public cyclic_iteration<Real, OStream> {$/;"	c	namespace:itl	file:
vpt	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/vpt.cpp	/^namespace vpt {$/;"	n	namespace:mtl	file:
vpt	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/vpt.hpp	/^namespace vpt {$/;"	n	namespace:mtl
vpt	MTL-4.0.9555-Linux/usr/share/mtl/vpt.cpp	/^namespace vpt {$/;"	n	namespace:mtl	file:
vsmat_cvec_mult	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/mat_vec_mult.hpp	/^inline void vsmat_cvec_mult(const compressed2D<MValue, MPara>& A, const VectorIn& v, VectorOut& w, Assign, tag::row_major)$/;"	f	namespace:mtl::mat
vv_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/sparse_vector.hpp	/^    typedef std::vector<value_type>         vv_type;$/;"	t	class:mtl::vec::sparse_vector
w	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/row_mat_cvec_index_evaluator.hpp	/^    VectorOut&      w;$/;"	m	struct:mtl::vec::row_mat_cvec_index_evaluator
which_index	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/index.hpp	/^template <class T> struct which_index$/;"	s	namespace:mtl::index
which_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::complex<double> which_value(std::complex<double> v, std::complex<double>) { return v; }$/;"	f	class:mtl::io::matrix_market_istream
which_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::complex<float> which_value(std::complex<double> v, std::complex<float>) { return std::complex<float>(float(real(v)), float(imag(v))); }$/;"	f	class:mtl::io::matrix_market_istream
which_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    std::complex<long double> which_value(std::complex<double> v, std::complex<long double>) { return boost::numeric_cast<std::complex<long double> >(v); }$/;"	f	class:mtl::io::matrix_market_istream
which_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    template <typename MValue> MValue which_value(pattern_type, MValue) { return boost::numeric_cast<MValue>(0.0); }$/;"	f	class:mtl::io::matrix_market_istream
which_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    template <typename MValue> MValue which_value(std::complex<double>, MValue) { MTL_THROW(runtime_error("Cannot convert complex value in real\\n")); return 1; }$/;"	f	class:mtl::io::matrix_market_istream
which_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    template <typename Value, typename MValue> MValue which_value(Value v, MValue) { return boost::numeric_cast<MValue>(v); }$/;"	f	class:mtl::io::matrix_market_istream
width	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^	int width, precision;$/;"	m	struct:mtl::detail::with_format_t
window_height	CS207/SDLViewer.hpp	/^  int window_height() const {$/;"	f	class:CS207::SDLViewer
window_height_	CS207/SDLViewer.hpp	/^  int window_height_;$/;"	m	class:CS207::SDLViewer
window_width	CS207/SDLViewer.hpp	/^  int window_width() const {$/;"	f	class:CS207::SDLViewer
window_width_	CS207/SDLViewer.hpp	/^  int window_width_;$/;"	m	class:CS207::SDLViewer
with_bracket	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^namespace with_bracket {$/;"	n	namespace:mtl::mat
with_comma	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^	bool           with_comma;$/;"	m	struct:mtl::mat::crtp_matrix_assign::scalar_assign
with_comma	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    mutable bool                 delayed_assign, with_comma;$/;"	m	struct:mtl::vec::vec_scal_aop_expr
with_conj	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    struct with_conj$/;"	s	namespace:mtl::vec::detail
with_format	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^    inline mtl::detail::with_format_t<Collection> with_format(const Collection& collection, int width= 3, int precision= 2)$/;"	f	namespace:mtl::mat
with_format	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^    inline mtl::detail::with_format_t<Collection> with_format(const Collection& collection, int width= 3, int precision= 2)$/;"	f	namespace:mtl::vec
with_format_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^	explicit with_format_t(const Collection& collection, int width, int precision) $/;"	f	struct:mtl::detail::with_format_t
with_format_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/print.hpp	/^    struct with_format_t$/;"	s	namespace:mtl::detail
with_recursator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/cholesky.hpp	/^namespace with_recursator {$/;"	n	namespace:mtl::mat
with_unroll1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/with_unroll1.hpp	/^struct with_unroll1$/;"	s	namespace:mtl::traits
with_unroll1	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/with_unroll1.hpp	/^struct with_unroll1<vec::unrolled1<BSize, Vector> >$/;"	s	namespace:mtl::traits
without_conj	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dot.hpp	/^	    struct without_conj$/;"	s	namespace:mtl::vec::detail
wolf	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/wolf.hpp	/^    wolf(Value delta= 0.5, Value gamma= 0.5, Value beta1= 0.25, Value beta2= 0.5)$/;"	f	class:itl::wolf
wolf	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/stepper/wolf.hpp	/^class wolf$/;"	c	namespace:itl
wrapped_object	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/wrapped_object.hpp	/^    wrapped_object(T& x) : wrapped_object_member(x) {}$/;"	f	struct:mtl::wrapped_object
wrapped_object	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/wrapped_object.hpp	/^    wrapped_object(const T& x, const U& y) : wrapped_object_member(x, y) {}$/;"	f	struct:mtl::wrapped_object
wrapped_object	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/wrapped_object.hpp	/^struct wrapped_object$/;"	s	namespace:mtl
wrapped_object_member	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/wrapped_object.hpp	/^    View wrapped_object_member; \/\/ ugly name avoid ambiguities in derived classes$/;"	m	struct:mtl::wrapped_object
wrapped_type	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    typedef wrapped_object<compressed_type>   wrapped_type;$/;"	t	struct:mtl::mat::ell_matrix_inserter
wrec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/mtl_fwd.hpp	/^    namespace wrec {}$/;"	n	namespace:mtl
wrec	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^namespace wrec {$/;"	n	namespace:mtl
write	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    template <typename Matrix> self& write(const Matrix& A, tag::matrix)$/;"	f	class:mtl::io::matrix_market_ostream
write_ast	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast.hpp	/^void write_ast(const Expr& expr, const char* fname)$/;"	f	namespace:mtl::io
write_ast_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^void write_ast_dispatch(const mtl::dense_vector<Value, Parameters>& v, std::string s, std::ofstream& f)$/;"	f	namespace:mtl::io
write_ast_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^void write_ast_dispatch(const mtl::map_view<Functor, Vector>& expr, std::string s, std::ofstream& f)$/;"	f	namespace:mtl::io
write_ast_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^void write_ast_dispatch(const mtl::mat::outer_product_matrix<Vector1, Vector2>& expr, std::string s, std::ofstream& f)$/;"	f	namespace:mtl::io
write_ast_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^void write_ast_dispatch(const mtl::operation::compute_summand<Expr>& expr, std::string s, std::ofstream& f)$/;"	f	namespace:mtl::io
write_ast_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^void write_ast_dispatch(const mtl::operation::compute_summand<mtl::mat_cvec_times_expr<Matrix, Vector> >& expr, std::string s, std::ofstream& f)$/;"	f	namespace:mtl::io
write_ast_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^void write_ast_dispatch(const mtl::scaled_view<Scaling, Vector>& expr, std::string s, std::ofstream& f)$/;"	f	namespace:mtl::io
write_ast_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^void write_ast_dispatch(const mtl::tfunctor::scale<Value1, Value2, mtl::tag::scalar>& expr, std::string s, std::ofstream& f)$/;"	f	namespace:mtl::io
write_ast_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^void write_ast_dispatch(const mtl::vec_vec_aop_expr<E1, E2, SFunctor>& expr, std::string s, std::ofstream& f)$/;"	f	namespace:mtl::io
write_ast_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^void write_ast_dispatch(const mtl::vec_vec_pmop_expr<E1, E2, SFunctor>& expr, std::string s, std::ofstream& f)$/;"	f	namespace:mtl::io
write_ast_dispatch	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/write_ast_dispatch.hpp	/^write_ast_dispatch(const Value& v, std::string s, std::ofstream& f)$/;"	f	namespace:mtl::io
write_dense_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    template <typename Matrix> self& write_dense_matrix(const Matrix& A)$/;"	f	class:mtl::io::matrix_market_ostream
write_sparse_matrix	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    template <typename Matrix> self& write_sparse_matrix(const Matrix& A)$/;"	f	class:mtl::io::matrix_market_ostream
write_to_file	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    void write_to_file(const std::string& filename) $/;"	f	class:mtl::mat::element_structure
write_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    void write_value(const std::complex<Value>& v) $/;"	f	class:mtl::io::matrix_market_ostream
write_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    write_value(const Value& v) $/;"	f	class:mtl::io::matrix_market_ostream
write_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    write_value(const Value& v) { my_stream << v; }$/;"	f	class:mtl::io::matrix_market_ostream
x	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/solver.hpp	/^    const Vector&         x;$/;"	m	struct:itl::pc::solver
x	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^	const VectorIn& x;$/;"	m	struct:mtl::mat::block_diagonal2D::multiplier
x	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    T x;$/;"	m	struct:mtl::utility::zip_value
x	Point.hpp	/^      double x;$/;"	m	struct:Point::__anon1::__anon2
xgemm	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/dmat_dmat_mult.hpp	/^    void inline xgemm(const dense2D<Value, ParaA>& A, const dense2D<Value, ParaB>& B, $/;"	f	namespace:mtl::detail
y	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    VectorOut&                               y;$/;"	m	struct:itl::pc::ic_0_evaluator
y	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    U y;$/;"	m	struct:mtl::utility::zip_value
y	Point.hpp	/^      double y;$/;"	m	struct:Point::__anon1::__anon2
y0	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/ic_0.hpp	/^    const VectorOut&                         y0;$/;"	m	struct:itl::pc::ic_0_evaluator
z	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/secular.hpp	/^    Vector     z, d;$/;"	m	class:mtl::vec::secular_f
z	Point.hpp	/^      double z;$/;"	m	struct:Point::__anon1::__anon2
z_order_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^struct z_order_mask$/;"	s	namespace:mtl
z_order_mask	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/recursion/bit_masking.hpp	/^template<> struct z_order_mask<0> : public lsb_mask<0> {};  \/\/ set to 0$/;"	s	namespace:mtl
zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/linear_algebra/identity.hpp	/^inline Element zero(const Element& v)$/;"	f	namespace:math
zero	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/eigenvalue.hpp	/^    value_type zero, one, eps;$/;"	m	class:mtl::mat::eigenvalue_solver
zero_with_sparse_src	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	inline void zero_with_sparse_src(MatrixDest& dest, tag::flat<tag::sparse>)$/;"	f	namespace:mtl::detail
zero_with_sparse_src	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/copy.hpp	/^	inline void zero_with_sparse_src(MatrixDest&, tag::universe) {} $/;"	f	namespace:mtl::detail
zip_it	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    explicit zip_it(T* a, U* v, diff_type p) : a(a), v(v), p(p) {}$/;"	f	struct:mtl::utility::zip_it
zip_it	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^struct zip_it$/;"	s	namespace:mtl::utility
zip_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_ref(T* a, U* v, int p) : a(a), v(v), p(p) {}$/;"	f	struct:mtl::utility::zip_ref
zip_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^struct zip_ref$/;"	s	namespace:mtl::utility
zip_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^    zip_value(const zip_ref<T, U>& r) : x(r.a[r.p]), y(r.v[r.p]) {}$/;"	f	struct:mtl::utility::zip_value
zip_value	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/zipped_sort.hpp	/^struct zip_value$/;"	s	namespace:mtl::utility
zoom	CS207/GLCamera.hpp	/^  inline void zoom(float d) {$/;"	f	class:CS207::GLCamera
zoom_mag	CS207/GLCamera.hpp	/^  inline void zoom_mag(float d) {$/;"	f	class:CS207::GLCamera
~SDLViewer	CS207/SDLViewer.hpp	/^  ~SDLViewer() {$/;"	f	class:CS207::SDLViewer
~SimpleSet	Examples/proxy_example.cpp	/^  ~SimpleSet() {$/;"	f	class:SimpleSet
~Timer	Examples/openmp.cpp	/^  ~Timer() {$/;"	f	struct:Timer
~Vector	Examples/trivial_copy.cpp	/^  ~Vector() {$/;"	f	class:Vector
~basic_iteration	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/iteration/basic_iteration.hpp	/^    virtual ~basic_iteration() {}$/;"	f	class:itl::basic_iteration
~binary_heap	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/binary_heap.hpp	/^	~binary_heap() {$/;"	f	class:utils::binary_heap
~block_diagonal2D	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/block_diagonal2D.hpp	/^    ~block_diagonal2D() { delete[] compact_heap; }$/;"	f	class:mtl::mat::block_diagonal2D
~compressed2D_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/compressed2D.hpp	/^    ~compressed2D_inserter()$/;"	f	struct:mtl::mat::compressed2D_inserter
~contiguous_memory_block	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/contiguous_memory_block.hpp	/^    ~contiguous_memory_block()$/;"	f	struct:mtl::detail::contiguous_memory_block
~coordinate2D_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/coordinate2D.hpp	/^    ~coordinate2D_inserter() { matrix.compress(Updater()); }$/;"	f	struct:mtl::mat::coordinate2D_inserter
~dot_index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/dot_index_evaluator.hpp	/^    ~dot_index_evaluator() $/;"	f	struct:mtl::vec::dot_index_evaluator
~element_structure	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/element_structure.hpp	/^    ~element_structure() { delete[] m_elements; delete[] index_heap; delete[] value_heap; }$/;"	f	class:mtl::mat::element_structure
~ell_matrix_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/ell_matrix.hpp	/^    ~ell_matrix_inserter()$/;"	f	struct:mtl::mat::ell_matrix_inserter
~extracter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/extracter.hpp	/^    ~extracter() {$/;"	f	class:mtl::vec::extracter
~fused_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/operation/fused_expr.hpp	/^    ~fused_expr() { if (!delayed_assign) eval(forward(), backward()); }$/;"	f	struct:mtl::fused_expr
~imf_preconditioner	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/imf_preconditioner.hpp	/^	~imf_preconditioner() $/;"	f	class:itl::pc::imf_preconditioner
~make_in_out_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    ~make_in_out_copy_or_reference() { src= value; }$/;"	f	struct:mtl::make_in_out_copy_or_reference
~make_out_copy_or_reference	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/make_copy_or_reference.hpp	/^    ~make_out_copy_or_reference() { src= value; }$/;"	f	struct:mtl::make_out_copy_or_reference
~masked_dilation_tables	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/detail/masked_dilation_tables.hpp	/^    ~masked_dilation_tables()$/;"	f	struct:mtl::dilated::masked_dilation_tables
~matrix_container	MTL-4.0.9555-Linux/usr/include/boost/numeric/itl/pc/sub_matrix_pc.hpp	/^	~matrix_container() { delete Ap; }$/;"	f	struct:itl::pc::sub_matrix_pc::matrix_container
~matrix_market_istream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    ~matrix_market_istream() $/;"	f	class:mtl::io::matrix_market_istream
~matrix_market_ostream	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/io/matrix_market.hpp	/^    ~matrix_market_ostream() { if (new_stream) delete new_stream; }$/;"	f	class:mtl::io::matrix_market_ostream
~multi_vector	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/multi_vector.hpp	/^    ~multi_vector() { delete master; }$/;"	f	class:mtl::mat::multi_vector
~papi_t	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/utility/papi.hpp	/^    ~papi_t()$/;"	f	class:mtl::utility::papi_t
~reduction_index_evaluator	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/reduction_index_evaluator.hpp	/^    ~reduction_index_evaluator() $/;"	f	struct:mtl::vec::reduction_index_evaluator
~safe_lock	CS207/SDLViewer.hpp	/^    ~safe_lock() {$/;"	f	struct:CS207::SDLViewer::safe_lock
~scalar_assign	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/crtp_base_matrix.hpp	/^	~scalar_assign()$/;"	f	struct:mtl::mat::crtp_matrix_assign::scalar_assign
~solver	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/interface/umfpack_solve.hpp	/^	    ~solver()$/;"	f	class:mtl::mat::umfpack::solver
~sparse_banded	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    ~sparse_banded() { delete[] data; }$/;"	f	class:mtl::mat::sparse_banded
~sparse_banded_inserter	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/matrix/sparse_banded.hpp	/^    ~sparse_banded_inserter()$/;"	f	struct:mtl::mat::sparse_banded_inserter
~strided_vector_ref	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/strided_vector_ref.hpp	/^    ~strided_vector_ref() { if (cloned && data) delete[] data; }$/;"	f	class:mtl::vec::strided_vector_ref
~vec_scal_aop_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_scal_aop_expr.hpp	/^    ~vec_scal_aop_expr()$/;"	f	struct:mtl::vec::vec_scal_aop_expr
~vec_vec_aop_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/vec_vec_aop_expr.hpp	/^    ~vec_vec_aop_expr()$/;"	f	struct:mtl::vec::vec_vec_aop_expr
~vec_vec_asgn_expr	MTL-4.0.9555-Linux/usr/include/boost/numeric/mtl/vector/assign_expression.hpp	/^    ~vec_vec_asgn_expr()$/;"	f	class:mtl::vec::vec_vec_asgn_expr
